/**
 * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);
                name = name.split('/');
                lastIndex = name.length - 1;

                // Node .js allowance:
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                name = baseParts.concat(name);

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("src/bower_components/almond/almond", function(){});

//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.6.0';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
    return obj;
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    any(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, function(value, index, list) {
      return !predicate.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
    each(obj, function(value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
    each(obj, function(value, index, list) {
      if (result || (result = predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    var result = -Infinity, lastComputed = -Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed > lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    var result = Infinity, lastComputed = Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed < lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Shuffle an array, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return value;
    return _.property(value);
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Split an array into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(array, predicate) {
    var pass = [], fail = [];
    each(array, function(elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [pass, fail];
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.contains(other, item);
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))
                        && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function () {
      return value;
    };
  };

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    return function(obj) {
      if (obj === attrs) return true; //avoid comparing an object to itself.
      for (var key in attrs) {
        if (attrs[key] !== obj[key])
          return false;
      }
      return true;
    }
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() { return new Date().getTime(); };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}).call(this);

//  Underscore.string
//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
//  Underscore.string is freely distributable under the terms of the MIT license.
//  Documentation: https://github.com/epeli/underscore.string
//  Some code is borrowed from MooTools and Alexandru Marasteanu.
//  Version '2.3.2'

!function(root, String){
  

  // Defining helper functions.

  var nativeTrim = String.prototype.trim;
  var nativeTrimRight = String.prototype.trimRight;
  var nativeTrimLeft = String.prototype.trimLeft;

  var parseNumber = function(source) { return source * 1 || 0; };

  var strRepeat = function(str, qty){
    if (qty < 1) return '';
    var result = '';
    while (qty > 0) {
      if (qty & 1) result += str;
      qty >>= 1, str += str;
    }
    return result;
  };

  var slice = [].slice;

  var defaultToWhiteSpace = function(characters) {
    if (characters == null)
      return '\\s';
    else if (characters.source)
      return characters.source;
    else
      return '[' + _s.escapeRegExp(characters) + ']';
  };

  // Helper for toBoolean
  function boolMatch(s, matchers) {
    var i, matcher, down = s.toLowerCase();
    matchers = [].concat(matchers);
    for (i = 0; i < matchers.length; i += 1) {
      matcher = matchers[i];
      if (!matcher) continue;
      if (matcher.test && matcher.test(s)) return true;
      if (matcher.toLowerCase() === down) return true;
    }
  }

  var escapeChars = {
    lt: '<',
    gt: '>',
    quot: '"',
    amp: '&',
    apos: "'"
  };

  var reversedEscapeChars = {};
  for(var key in escapeChars) reversedEscapeChars[escapeChars[key]] = key;
  reversedEscapeChars["'"] = '#39';

  // sprintf() for JavaScript 0.7-beta1
  // http://www.diveintojavascript.com/projects/javascript-sprintf
  //
  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
  // All rights reserved.

  var sprintf = (function() {
    function get_type(variable) {
      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
    }

    var str_repeat = strRepeat;

    var str_format = function() {
      if (!str_format.cache.hasOwnProperty(arguments[0])) {
        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
      }
      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
    };

    str_format.format = function(parse_tree, argv) {
      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
      for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === 'string') {
          output.push(parse_tree[i]);
        }
        else if (node_type === 'array') {
          match = parse_tree[i]; // convenience purposes only
          if (match[2]) { // keyword argument
            arg = argv[cursor];
            for (k = 0; k < match[2].length; k++) {
              if (!arg.hasOwnProperty(match[2][k])) {
                throw new Error(sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
              }
              arg = arg[match[2][k]];
            }
          } else if (match[1]) { // positional argument (explicit)
            arg = argv[match[1]];
          }
          else { // positional argument (implicit)
            arg = argv[cursor++];
          }

          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
          }
          switch (match[8]) {
            case 'b': arg = arg.toString(2); break;
            case 'c': arg = String.fromCharCode(arg); break;
            case 'd': arg = parseInt(arg, 10); break;
            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
            case 'o': arg = arg.toString(8); break;
            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
            case 'u': arg = Math.abs(arg); break;
            case 'x': arg = arg.toString(16); break;
            case 'X': arg = arg.toString(16).toUpperCase(); break;
          }
          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
          pad_length = match[6] - String(arg).length;
          pad = match[6] ? str_repeat(pad_character, pad_length) : '';
          output.push(match[5] ? arg + pad : pad + arg);
        }
      }
      return output.join('');
    };

    str_format.cache = {};

    str_format.parse = function(fmt) {
      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
      while (_fmt) {
        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
          parse_tree.push(match[0]);
        }
        else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
          parse_tree.push('%');
        }
        else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
          if (match[2]) {
            arg_names |= 1;
            var field_list = [], replacement_field = match[2], field_match = [];
            if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
              field_list.push(field_match[1]);
              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else {
                  throw new Error('[_.sprintf] huh?');
                }
              }
            }
            else {
              throw new Error('[_.sprintf] huh?');
            }
            match[2] = field_list;
          }
          else {
            arg_names |= 2;
          }
          if (arg_names === 3) {
            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
          }
          parse_tree.push(match);
        }
        else {
          throw new Error('[_.sprintf] huh?');
        }
        _fmt = _fmt.substring(match[0].length);
      }
      return parse_tree;
    };

    return str_format;
  })();



  // Defining underscore.string

  var _s = {

    VERSION: '2.3.0',

    isBlank: function(str){
      if (str == null) str = '';
      return (/^\s*$/).test(str);
    },

    stripTags: function(str){
      if (str == null) return '';
      return String(str).replace(/<\/?[^>]+>/g, '');
    },

    capitalize : function(str){
      str = str == null ? '' : String(str);
      return str.charAt(0).toUpperCase() + str.slice(1);
    },

    chop: function(str, step){
      if (str == null) return [];
      str = String(str);
      step = ~~step;
      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
    },

    clean: function(str){
      return _s.strip(str).replace(/\s+/g, ' ');
    },

    count: function(str, substr){
      if (str == null || substr == null) return 0;

      str = String(str);
      substr = String(substr);

      var count = 0,
        pos = 0,
        length = substr.length;

      while (true) {
        pos = str.indexOf(substr, pos);
        if (pos === -1) break;
        count++;
        pos += length;
      }

      return count;
    },

    chars: function(str) {
      if (str == null) return [];
      return String(str).split('');
    },

    swapCase: function(str) {
      if (str == null) return '';
      return String(str).replace(/\S/g, function(c){
        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
      });
    },

    escapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/[&<>"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });
    },

    unescapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/\&([^;]+);/g, function(entity, entityCode){
        var match;

        if (entityCode in escapeChars) {
          return escapeChars[entityCode];
        } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
          return String.fromCharCode(parseInt(match[1], 16));
        } else if (match = entityCode.match(/^#(\d+)$/)) {
          return String.fromCharCode(~~match[1]);
        } else {
          return entity;
        }
      });
    },

    escapeRegExp: function(str){
      if (str == null) return '';
      return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    },

    splice: function(str, i, howmany, substr){
      var arr = _s.chars(str);
      arr.splice(~~i, ~~howmany, substr);
      return arr.join('');
    },

    insert: function(str, i, substr){
      return _s.splice(str, i, 0, substr);
    },

    include: function(str, needle){
      if (needle === '') return true;
      if (str == null) return false;
      return String(str).indexOf(needle) !== -1;
    },

    join: function() {
      var args = slice.call(arguments),
        separator = args.shift();

      if (separator == null) separator = '';

      return args.join(separator);
    },

    lines: function(str) {
      if (str == null) return [];
      return String(str).split("\n");
    },

    reverse: function(str){
      return _s.chars(str).reverse().join('');
    },

    startsWith: function(str, starts){
      if (starts === '') return true;
      if (str == null || starts == null) return false;
      str = String(str); starts = String(starts);
      return str.length >= starts.length && str.slice(0, starts.length) === starts;
    },

    endsWith: function(str, ends){
      if (ends === '') return true;
      if (str == null || ends == null) return false;
      str = String(str); ends = String(ends);
      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;
    },

    succ: function(str){
      if (str == null) return '';
      str = String(str);
      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);
    },

    titleize: function(str){
      if (str == null) return '';
      str  = String(str).toLowerCase();
      return str.replace(/(?:^|\s|-)\S/g, function(c){ return c.toUpperCase(); });
    },

    camelize: function(str){
      return _s.trim(str).replace(/[-_\s]+(.)?/g, function(match, c){ return c ? c.toUpperCase() : ""; });
    },

    underscored: function(str){
      return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    },

    dasherize: function(str){
      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
    },

    classify: function(str){
      return _s.titleize(String(str).replace(/[\W_]/g, ' ')).replace(/\s/g, '');
    },

    humanize: function(str){
      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));
    },

    trim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrim) return nativeTrim.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('\^' + characters + '+|' + characters + '+$', 'g'), '');
    },

    ltrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('^' + characters + '+'), '');
    },

    rtrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp(characters + '+$'), '');
    },

    truncate: function(str, length, truncateStr){
      if (str == null) return '';
      str = String(str); truncateStr = truncateStr || '...';
      length = ~~length;
      return str.length > length ? str.slice(0, length) + truncateStr : str;
    },

    /**
     * _s.prune: a more elegant version of truncate
     * prune extra chars, never leaving a half-chopped word.
     * @author github.com/rwz
     */
    prune: function(str, length, pruneStr){
      if (str == null) return '';

      str = String(str); length = ~~length;
      pruneStr = pruneStr != null ? String(pruneStr) : '...';

      if (str.length <= length) return str;

      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },
        template = str.slice(0, length+1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

      if (template.slice(template.length-2).match(/\w\w/))
        template = template.replace(/\s*\S+$/, '');
      else
        template = _s.rtrim(template.slice(0, template.length-1));

      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;
    },

    words: function(str, delimiter) {
      if (_s.isBlank(str)) return [];
      return _s.trim(str, delimiter).split(delimiter || /\s+/);
    },

    pad: function(str, length, padStr, type) {
      str = str == null ? '' : String(str);
      length = ~~length;

      var padlen  = 0;

      if (!padStr)
        padStr = ' ';
      else if (padStr.length > 1)
        padStr = padStr.charAt(0);

      switch(type) {
        case 'right':
          padlen = length - str.length;
          return str + strRepeat(padStr, padlen);
        case 'both':
          padlen = length - str.length;
          return strRepeat(padStr, Math.ceil(padlen/2)) + str
                  + strRepeat(padStr, Math.floor(padlen/2));
        default: // 'left'
          padlen = length - str.length;
          return strRepeat(padStr, padlen) + str;
        }
    },

    lpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr);
    },

    rpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'right');
    },

    lrpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'both');
    },

    sprintf: sprintf,

    vsprintf: function(fmt, argv){
      argv.unshift(fmt);
      return sprintf.apply(null, argv);
    },

    toNumber: function(str, decimals) {
      if (!str) return 0;
      str = _s.trim(str);
      if (!str.match(/^-?\d+(?:\.\d+)?$/)) return NaN;
      return parseNumber(parseNumber(str).toFixed(~~decimals));
    },

    numberFormat : function(number, dec, dsep, tsep) {
      if (isNaN(number) || number == null) return '';

      number = number.toFixed(~~dec);
      tsep = typeof tsep == 'string' ? tsep : ',';

      var parts = number.split('.'), fnums = parts[0],
        decimals = parts[1] ? (dsep || '.') + parts[1] : '';

      return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
    },

    strRight: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strRightBack: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.lastIndexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strLeft: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    strLeftBack: function(str, sep){
      if (str == null) return '';
      str += ''; sep = sep != null ? ''+sep : sep;
      var pos = str.lastIndexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    toSentence: function(array, separator, lastSeparator, serial) {
      separator = separator || ', ';
      lastSeparator = lastSeparator || ' and ';
      var a = array.slice(), lastMember = a.pop();

      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;

      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
    },

    toSentenceSerial: function() {
      var args = slice.call(arguments);
      args[3] = true;
      return _s.toSentence.apply(_s, args);
    },

    slugify: function(str) {
      if (str == null) return '';

      var from  = "ąàáäâãåæăćęèéëêìíïîłńòóöôõøśșțùúüûñçżź",
          to    = "aaaaaaaaaceeeeeiiiilnoooooosstuuuunczz",
          regex = new RegExp(defaultToWhiteSpace(from), 'g');

      str = String(str).toLowerCase().replace(regex, function(c){
        var index = from.indexOf(c);
        return to.charAt(index) || '-';
      });

      return _s.dasherize(str.replace(/[^\w\s-]/g, ''));
    },

    surround: function(str, wrapper) {
      return [wrapper, str, wrapper].join('');
    },

    quote: function(str, quoteChar) {
      return _s.surround(str, quoteChar || '"');
    },

    unquote: function(str, quoteChar) {
      quoteChar = quoteChar || '"';
      if (str[0] === quoteChar && str[str.length-1] === quoteChar)
        return str.slice(1,str.length-1);
      else return str;
    },

    exports: function() {
      var result = {};

      for (var prop in this) {
        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;
        result[prop] = this[prop];
      }

      return result;
    },

    repeat: function(str, qty, separator){
      if (str == null) return '';

      qty = ~~qty;

      // using faster implementation if separator is not needed;
      if (separator == null) return strRepeat(String(str), qty);

      // this one is about 300x slower in Google Chrome
      for (var repeat = []; qty > 0; repeat[--qty] = str) {}
      return repeat.join(separator);
    },

    naturalCmp: function(str1, str2){
      if (str1 == str2) return 0;
      if (!str1) return -1;
      if (!str2) return 1;

      var cmpRegex = /(\.\d+)|(\d+)|(\D+)/g,
        tokens1 = String(str1).toLowerCase().match(cmpRegex),
        tokens2 = String(str2).toLowerCase().match(cmpRegex),
        count = Math.min(tokens1.length, tokens2.length);

      for(var i = 0; i < count; i++) {
        var a = tokens1[i], b = tokens2[i];

        if (a !== b){
          var num1 = parseInt(a, 10);
          if (!isNaN(num1)){
            var num2 = parseInt(b, 10);
            if (!isNaN(num2) && num1 - num2)
              return num1 - num2;
          }
          return a < b ? -1 : 1;
        }
      }

      if (tokens1.length === tokens2.length)
        return tokens1.length - tokens2.length;

      return str1 < str2 ? -1 : 1;
    },

    levenshtein: function(str1, str2) {
      if (str1 == null && str2 == null) return 0;
      if (str1 == null) return String(str2).length;
      if (str2 == null) return String(str1).length;

      str1 = String(str1); str2 = String(str2);

      var current = [], prev, value;

      for (var i = 0; i <= str2.length; i++)
        for (var j = 0; j <= str1.length; j++) {
          if (i && j)
            if (str1.charAt(j - 1) === str2.charAt(i - 1))
              value = prev;
            else
              value = Math.min(current[j], current[j - 1], prev) + 1;
          else
            value = i + j;

          prev = current[j];
          current[j] = value;
        }

      return current.pop();
    },

    toBoolean: function(str, trueValues, falseValues) {
      if (typeof str === "number") str = "" + str;
      if (typeof str !== "string") return !!str;
      str = _s.trim(str);
      if (boolMatch(str, trueValues || ["true", "1"])) return true;
      if (boolMatch(str, falseValues || ["false", "0"])) return false;
    }
  };

  // Aliases

  _s.strip    = _s.trim;
  _s.lstrip   = _s.ltrim;
  _s.rstrip   = _s.rtrim;
  _s.center   = _s.lrpad;
  _s.rjust    = _s.lpad;
  _s.ljust    = _s.rpad;
  _s.contains = _s.include;
  _s.q        = _s.quote;
  _s.toBool   = _s.toBoolean;

  // Exporting

  // CommonJS module is defined
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports)
      module.exports = _s;

    exports._s = _s;
  }

  // Register as a named module with AMD.
  if (typeof define === 'function' && define.amd)
    define('underscore.string', [], function(){ return _s; });


  // Integrate with Underscore.js if defined
  // or create our own underscore object.
  root._ = root._ || {};
  root._.string = root._.str = _s;
}(this, String);

define("underscorestring", function(){});

/*!
 * jQuery JavaScript Library v2.1.0
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-01-23T21:10Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var trim = "".trim;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.0",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return a 'clean' array
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return just the object
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return obj - parseFloat( obj ) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		// Support: Firefox <20
		// The try/catch suppresses exceptions thrown when attempting to access
		// the "constructor" property of certain host objects, ie. |window.location|
		// https://bugzilla.mozilla.org/show_bug.cgi?id=814622
		try {
			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}
		} catch ( e ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android < 4.0, iOS < 6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	trim: function( text ) {
		return text == null ? "" : trim.call( text );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.16
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-01-13
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select t=''><option selected=''></option></select>";

			// Support: IE8, Opera 10-12
			// Nothing should be selected when empty strings follow ^= or $= or *=
			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android < 4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Math.random();
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android < 4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



/*
	Implementation Summary

	1. Enforce API surface and semantic compatibility with 1.9.x branch
	2. Improve the module's maintainability by reducing the storage
		paths to a single mechanism.
	3. Use the same single mechanism to support "private" and "user" data.
	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	5. Avoid exposing implementation details on user objects (eg. expando properties)
	6. Provide a clear path for implementation upgrade to WeakMap in 2014
*/
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {
						name = attrs[ i ].name;

						if ( name.indexOf( "data-" ) === 0 ) {
							name = jQuery.camelCase( name.slice(5) );
							dataAttr( elem, name, data[ name ] );
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) );

	// #11217 - WebKit loses check when the name is after the checked attribute
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE9-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome < 28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				// Support: Android < 4.0
				src.defaultPrevented === undefined &&
				src.getPreventDefault && src.getPreventDefault() ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Create "bubbling" focus and blur events
// Support: Firefox, Chrome, Safari
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE 9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE 9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Support: IE >= 9
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Support: IE >= 9
		// Fix Cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit
					// jQuery.merge because push.apply(_, arraylike) throws
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Fixes #12346
					// Support: Webkit, IE
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, events, type, key, j,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					events = Object.keys( data.events || {} );
					if ( events.length ) {
						for ( j = 0; (type = events[j]) !== undefined; j++ ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			window.getDefaultComputedStyle( elem[ 0 ] ).display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') in IE9, see #12537
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
		divReset = "padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;" +
			"-moz-box-sizing:content-box;box-sizing:content-box",
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;" +
		"margin-top:1px";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		// Support: Firefox, Android 2.3 (Prefixed box-sizing versions).
		div.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;" +
			"position:absolute;top:1%";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Use window.getComputedStyle because jsdom on node.js will break without it.
	if ( window.getComputedStyle ) {
		jQuery.extend(support, {
			pixelPosition: function() {
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );
				marginDiv.style.cssText = div.style.cssText = divReset;
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );

				// Clean up the div for other support tests.
				div.innerHTML = "";

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css(elem, "display") );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				// Support: Chrome, Safari
				// Setting style to blank string required to delete "style: x !important;"
				style[ name ] = "";
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );
		// Get default display if display is currently "none"
		if ( display === "none" ) {
			display = defaultDisplay( elem.nodeName );
		}
		if ( display === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS 5.1, Android 4.x, Android 2.3
	// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
	support.checkOn = input.value !== "";

	// Must access the parent to make an option select properly
	// Support: IE9, IE10
	support.optSelected = opt.selected;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Check if an input maintains its value after becoming a radio
	// Support: IE9, IE10
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

// Support: IE9+
// Selectedness for an option in an optgroup can be inaccurate
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				// Do send the request
				// This may raise an exception which is actually
				// handled in jQuery.ajax (so no try/catch here)
				xhr.send( options.hasContent && options.data || null );
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// We assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

define("jquery", function(){});

/*!
 * fancyBox - jQuery Plugin
 * version: 2.1.5 (Fri, 14 Jun 2013)
 * @requires jQuery v1.6 or later
 *
 * Examples at http://fancyapps.com/fancybox/
 * License: www.fancyapps.com/fancybox/#license
 *
 * Copyright 2012 Janis Skarnelis - janis@fancyapps.com
 *
 */

(function (window, document, $, undefined) {
	

	var H = $("html"),
		W = $(window),
		D = $(document),
		F = $.fancybox = function () {
			F.open.apply( this, arguments );
		},
		IE =  navigator.userAgent.match(/msie/i),
		didUpdate	= null,
		isTouch		= document.createTouch !== undefined,

		isQuery	= function(obj) {
			return obj && obj.hasOwnProperty && obj instanceof $;
		},
		isString = function(str) {
			return str && $.type(str) === "string";
		},
		isPercentage = function(str) {
			return isString(str) && str.indexOf('%') > 0;
		},
		isScrollable = function(el) {
			return (el && !(el.style.overflow && el.style.overflow === 'hidden') && ((el.clientWidth && el.scrollWidth > el.clientWidth) || (el.clientHeight && el.scrollHeight > el.clientHeight)));
		},
		getScalar = function(orig, dim) {
			var value = parseInt(orig, 10) || 0;

			if (dim && isPercentage(orig)) {
				value = F.getViewport()[ dim ] / 100 * value;
			}

			return Math.ceil(value);
		},
		getValue = function(value, dim) {
			return getScalar(value, dim) + 'px';
		};

	$.extend(F, {
		// The current version of fancyBox
		version: '2.1.5',

		defaults: {
			padding : 15,
			margin  : 20,

			width     : 800,
			height    : 600,
			minWidth  : 100,
			minHeight : 100,
			maxWidth  : 9999,
			maxHeight : 9999,
			pixelRatio: 1, // Set to 2 for retina display support

			autoSize   : true,
			autoHeight : false,
			autoWidth  : false,

			autoResize  : true,
			autoCenter  : !isTouch,
			fitToView   : true,
			aspectRatio : false,
			topRatio    : 0.5,
			leftRatio   : 0.5,

			scrolling : 'auto', // 'auto', 'yes' or 'no'
			wrapCSS   : '',

			arrows     : true,
			closeBtn   : true,
			closeClick : false,
			nextClick  : false,
			mouseWheel : true,
			autoPlay   : false,
			playSpeed  : 3000,
			preload    : 3,
			modal      : false,
			loop       : true,

			ajax  : {
				dataType : 'html',
				headers  : { 'X-fancyBox': true }
			},
			iframe : {
				scrolling : 'auto',
				preload   : true
			},
			swf : {
				wmode: 'transparent',
				allowfullscreen   : 'true',
				allowscriptaccess : 'always'
			},

			keys  : {
				next : {
					13 : 'left', // enter
					34 : 'up',   // page down
					39 : 'left', // right arrow
					40 : 'up'    // down arrow
				},
				prev : {
					8  : 'right',  // backspace
					33 : 'down',   // page up
					37 : 'right',  // left arrow
					38 : 'down'    // up arrow
				},
				close  : [27], // escape key
				play   : [32], // space - start/stop slideshow
				toggle : [70]  // letter "f" - toggle fullscreen
			},

			direction : {
				next : 'left',
				prev : 'right'
			},

			scrollOutside  : true,

			// Override some properties
			index   : 0,
			type    : null,
			href    : null,
			content : null,
			title   : null,

			// HTML templates
			tpl: {
				wrap     : '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
				image    : '<img class="fancybox-image" src="{href}" alt="" />',
				iframe   : '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' + (IE ? ' allowtransparency="true"' : '') + '></iframe>',
				error    : '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
				closeBtn : '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
				next     : '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
				prev     : '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'
			},

			// Properties for each animation type
			// Opening fancyBox
			openEffect  : 'fade', // 'elastic', 'fade' or 'none'
			openSpeed   : 250,
			openEasing  : 'swing',
			openOpacity : true,
			openMethod  : 'zoomIn',

			// Closing fancyBox
			closeEffect  : 'fade', // 'elastic', 'fade' or 'none'
			closeSpeed   : 250,
			closeEasing  : 'swing',
			closeOpacity : true,
			closeMethod  : 'zoomOut',

			// Changing next gallery item
			nextEffect : 'elastic', // 'elastic', 'fade' or 'none'
			nextSpeed  : 250,
			nextEasing : 'swing',
			nextMethod : 'changeIn',

			// Changing previous gallery item
			prevEffect : 'elastic', // 'elastic', 'fade' or 'none'
			prevSpeed  : 250,
			prevEasing : 'swing',
			prevMethod : 'changeOut',

			// Enable default helpers
			helpers : {
				overlay : true,
				title   : true
			},

			// Callbacks
			onCancel     : $.noop, // If canceling
			beforeLoad   : $.noop, // Before loading
			afterLoad    : $.noop, // After loading
			beforeShow   : $.noop, // Before changing in current item
			afterShow    : $.noop, // After opening
			beforeChange : $.noop, // Before changing gallery item
			beforeClose  : $.noop, // Before closing
			afterClose   : $.noop  // After closing
		},

		//Current state
		group    : {}, // Selected group
		opts     : {}, // Group options
		previous : null,  // Previous element
		coming   : null,  // Element being loaded
		current  : null,  // Currently loaded element
		isActive : false, // Is activated
		isOpen   : false, // Is currently open
		isOpened : false, // Have been fully opened at least once

		wrap  : null,
		skin  : null,
		outer : null,
		inner : null,

		player : {
			timer    : null,
			isActive : false
		},

		// Loaders
		ajaxLoad   : null,
		imgPreload : null,

		// Some collections
		transitions : {},
		helpers     : {},

		/*
		 *	Static methods
		 */

		open: function (group, opts) {
			if (!group) {
				return;
			}

			if (!$.isPlainObject(opts)) {
				opts = {};
			}

			// Close if already active
			if (false === F.close(true)) {
				return;
			}

			// Normalize group
			if (!$.isArray(group)) {
				group = isQuery(group) ? $(group).get() : [group];
			}

			// Recheck if the type of each element is `object` and set content type (image, ajax, etc)
			$.each(group, function(i, element) {
				var obj = {},
					href,
					title,
					content,
					type,
					rez,
					hrefParts,
					selector;

				if ($.type(element) === "object") {
					// Check if is DOM element
					if (element.nodeType) {
						element = $(element);
					}

					if (isQuery(element)) {
						obj = {
							href    : element.data('fancybox-href') || element.attr('href'),
							title   : element.data('fancybox-title') || element.attr('title'),
							isDom   : true,
							element : element
						};

						if ($.metadata) {
							$.extend(true, obj, element.metadata());
						}

					} else {
						obj = element;
					}
				}

				href  = opts.href  || obj.href || (isString(element) ? element : null);
				title = opts.title !== undefined ? opts.title : obj.title || '';

				content = opts.content || obj.content;
				type    = content ? 'html' : (opts.type  || obj.type);

				if (!type && obj.isDom) {
					type = element.data('fancybox-type');

					if (!type) {
						rez  = element.prop('class').match(/fancybox\.(\w+)/);
						type = rez ? rez[1] : null;
					}
				}

				if (isString(href)) {
					// Try to guess the content type
					if (!type) {
						if (F.isImage(href)) {
							type = 'image';

						} else if (F.isSWF(href)) {
							type = 'swf';

						} else if (href.charAt(0) === '#') {
							type = 'inline';

						} else if (isString(element)) {
							type    = 'html';
							content = element;
						}
					}

					// Split url into two pieces with source url and content selector, e.g,
					// "/mypage.html #my_id" will load "/mypage.html" and display element having id "my_id"
					if (type === 'ajax') {
						hrefParts = href.split(/\s+/, 2);
						href      = hrefParts.shift();
						selector  = hrefParts.shift();
					}
				}

				if (!content) {
					if (type === 'inline') {
						if (href) {
							content = $( isString(href) ? href.replace(/.*(?=#[^\s]+$)/, '') : href ); //strip for ie7

						} else if (obj.isDom) {
							content = element;
						}

					} else if (type === 'html') {
						content = href;

					} else if (!type && !href && obj.isDom) {
						type    = 'inline';
						content = element;
					}
				}

				$.extend(obj, {
					href     : href,
					type     : type,
					content  : content,
					title    : title,
					selector : selector
				});

				group[ i ] = obj;
			});

			// Extend the defaults
			F.opts = $.extend(true, {}, F.defaults, opts);

			// All options are merged recursive except keys
			if (opts.keys !== undefined) {
				F.opts.keys = opts.keys ? $.extend({}, F.defaults.keys, opts.keys) : false;
			}

			F.group = group;

			return F._start(F.opts.index);
		},

		// Cancel image loading or abort ajax request
		cancel: function () {
			var coming = F.coming;

			if (!coming || false === F.trigger('onCancel')) {
				return;
			}

			F.hideLoading();

			if (F.ajaxLoad) {
				F.ajaxLoad.abort();
			}

			F.ajaxLoad = null;

			if (F.imgPreload) {
				F.imgPreload.onload = F.imgPreload.onerror = null;
			}

			if (coming.wrap) {
				coming.wrap.stop(true, true).trigger('onReset').remove();
			}

			F.coming = null;

			// If the first item has been canceled, then clear everything
			if (!F.current) {
				F._afterZoomOut( coming );
			}
		},

		// Start closing animation if is open; remove immediately if opening/closing
		close: function (event) {
			F.cancel();

			if (false === F.trigger('beforeClose')) {
				return;
			}

			F.unbindEvents();

			if (!F.isActive) {
				return;
			}

			if (!F.isOpen || event === true) {
				$('.fancybox-wrap').stop(true).trigger('onReset').remove();

				F._afterZoomOut();

			} else {
				F.isOpen = F.isOpened = false;
				F.isClosing = true;

				$('.fancybox-item, .fancybox-nav').remove();

				F.wrap.stop(true, true).removeClass('fancybox-opened');

				F.transitions[ F.current.closeMethod ]();
			}
		},

		// Manage slideshow:
		//   $.fancybox.play(); - toggle slideshow
		//   $.fancybox.play( true ); - start
		//   $.fancybox.play( false ); - stop
		play: function ( action ) {
			var clear = function () {
					clearTimeout(F.player.timer);
				},
				set = function () {
					clear();

					if (F.current && F.player.isActive) {
						F.player.timer = setTimeout(F.next, F.current.playSpeed);
					}
				},
				stop = function () {
					clear();

					D.unbind('.player');

					F.player.isActive = false;

					F.trigger('onPlayEnd');
				},
				start = function () {
					if (F.current && (F.current.loop || F.current.index < F.group.length - 1)) {
						F.player.isActive = true;

						D.bind({
							'onCancel.player beforeClose.player' : stop,
							'onUpdate.player'   : set,
							'beforeLoad.player' : clear
						});

						set();

						F.trigger('onPlayStart');
					}
				};

			if (action === true || (!F.player.isActive && action !== false)) {
				start();
			} else {
				stop();
			}
		},

		// Navigate to next gallery item
		next: function ( direction ) {
			var current = F.current;

			if (current) {
				if (!isString(direction)) {
					direction = current.direction.next;
				}

				F.jumpto(current.index + 1, direction, 'next');
			}
		},

		// Navigate to previous gallery item
		prev: function ( direction ) {
			var current = F.current;

			if (current) {
				if (!isString(direction)) {
					direction = current.direction.prev;
				}

				F.jumpto(current.index - 1, direction, 'prev');
			}
		},

		// Navigate to gallery item by index
		jumpto: function ( index, direction, router ) {
			var current = F.current;

			if (!current) {
				return;
			}

			index = getScalar(index);

			F.direction = direction || current.direction[ (index >= current.index ? 'next' : 'prev') ];
			F.router    = router || 'jumpto';

			if (current.loop) {
				if (index < 0) {
					index = current.group.length + (index % current.group.length);
				}

				index = index % current.group.length;
			}

			if (current.group[ index ] !== undefined) {
				F.cancel();

				F._start(index);
			}
		},

		// Center inside viewport and toggle position type to fixed or absolute if needed
		reposition: function (e, onlyAbsolute) {
			var current = F.current,
				wrap    = current ? current.wrap : null,
				pos;

			if (wrap) {
				pos = F._getPosition(onlyAbsolute);

				if (e && e.type === 'scroll') {
					delete pos.position;

					wrap.stop(true, true).animate(pos, 200);

				} else {
					wrap.css(pos);

					current.pos = $.extend({}, current.dim, pos);
				}
			}
		},

		update: function (e) {
			var type = (e && e.type),
				anyway = !type || type === 'orientationchange';

			if (anyway) {
				clearTimeout(didUpdate);

				didUpdate = null;
			}

			if (!F.isOpen || didUpdate) {
				return;
			}

			didUpdate = setTimeout(function() {
				var current = F.current;

				if (!current || F.isClosing) {
					return;
				}

				F.wrap.removeClass('fancybox-tmp');

				if (anyway || type === 'load' || (type === 'resize' && current.autoResize)) {
					F._setDimension();
				}

				if (!(type === 'scroll' && current.canShrink)) {
					F.reposition(e);
				}

				F.trigger('onUpdate');

				didUpdate = null;

			}, (anyway && !isTouch ? 0 : 300));
		},

		// Shrink content to fit inside viewport or restore if resized
		toggle: function ( action ) {
			if (F.isOpen) {
				F.current.fitToView = $.type(action) === "boolean" ? action : !F.current.fitToView;

				// Help browser to restore document dimensions
				if (isTouch) {
					F.wrap.removeAttr('style').addClass('fancybox-tmp');

					F.trigger('onUpdate');
				}

				F.update();
			}
		},

		hideLoading: function () {
			D.unbind('.loading');

			$('#fancybox-loading').remove();
		},

		showLoading: function () {
			var el, viewport;

			F.hideLoading();

			el = $('<div id="fancybox-loading"><div></div></div>').click(F.cancel).appendTo('body');

			// If user will press the escape-button, the request will be canceled
			D.bind('keydown.loading', function(e) {
				if ((e.which || e.keyCode) === 27) {
					e.preventDefault();

					F.cancel();
				}
			});

			if (!F.defaults.fixed) {
				viewport = F.getViewport();

				el.css({
					position : 'absolute',
					top  : (viewport.h * 0.5) + viewport.y,
					left : (viewport.w * 0.5) + viewport.x
				});
			}
		},

		getViewport: function () {
			var locked = (F.current && F.current.locked) || false,
				rez    = {
					x: W.scrollLeft(),
					y: W.scrollTop()
				};

			if (locked) {
				rez.w = locked[0].clientWidth;
				rez.h = locked[0].clientHeight;

			} else {
				// See http://bugs.jquery.com/ticket/6724
				rez.w = isTouch && window.innerWidth  ? window.innerWidth  : W.width();
				rez.h = isTouch && window.innerHeight ? window.innerHeight : W.height();
			}

			return rez;
		},

		// Unbind the keyboard / clicking actions
		unbindEvents: function () {
			if (F.wrap && isQuery(F.wrap)) {
				F.wrap.unbind('.fb');
			}

			D.unbind('.fb');
			W.unbind('.fb');
		},

		bindEvents: function () {
			var current = F.current,
				keys;

			if (!current) {
				return;
			}

			// Changing document height on iOS devices triggers a 'resize' event,
			// that can change document height... repeating infinitely
			W.bind('orientationchange.fb' + (isTouch ? '' : ' resize.fb') + (current.autoCenter && !current.locked ? ' scroll.fb' : ''), F.update);

			keys = current.keys;

			if (keys) {
				D.bind('keydown.fb', function (e) {
					var code   = e.which || e.keyCode,
						target = e.target || e.srcElement;

					// Skip esc key if loading, because showLoading will cancel preloading
					if (code === 27 && F.coming) {
						return false;
					}

					// Ignore key combinations and key events within form elements
					if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey && !(target && (target.type || $(target).is('[contenteditable]')))) {
						$.each(keys, function(i, val) {
							if (current.group.length > 1 && val[ code ] !== undefined) {
								F[ i ]( val[ code ] );

								e.preventDefault();
								return false;
							}

							if ($.inArray(code, val) > -1) {
								F[ i ] ();

								e.preventDefault();
								return false;
							}
						});
					}
				});
			}

			if ($.fn.mousewheel && current.mouseWheel) {
				F.wrap.bind('mousewheel.fb', function (e, delta, deltaX, deltaY) {
					var target = e.target || null,
						parent = $(target),
						canScroll = false;

					while (parent.length) {
						if (canScroll || parent.is('.fancybox-skin') || parent.is('.fancybox-wrap')) {
							break;
						}

						canScroll = isScrollable( parent[0] );
						parent    = $(parent).parent();
					}

					if (delta !== 0 && !canScroll) {
						if (F.group.length > 1 && !current.canShrink) {
							if (deltaY > 0 || deltaX > 0) {
								F.prev( deltaY > 0 ? 'down' : 'left' );

							} else if (deltaY < 0 || deltaX < 0) {
								F.next( deltaY < 0 ? 'up' : 'right' );
							}

							e.preventDefault();
						}
					}
				});
			}
		},

		trigger: function (event, o) {
			var ret, obj = o || F.coming || F.current;

			if (!obj) {
				return;
			}

			if ($.isFunction( obj[event] )) {
				ret = obj[event].apply(obj, Array.prototype.slice.call(arguments, 1));
			}

			if (ret === false) {
				return false;
			}

			if (obj.helpers) {
				$.each(obj.helpers, function (helper, opts) {
					if (opts && F.helpers[helper] && $.isFunction(F.helpers[helper][event])) {
						F.helpers[helper][event]($.extend(true, {}, F.helpers[helper].defaults, opts), obj);
					}
				});
			}

			D.trigger(event);
		},

		isImage: function (str) {
			return isString(str) && str.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i);
		},

		isSWF: function (str) {
			return isString(str) && str.match(/\.(swf)((\?|#).*)?$/i);
		},

		_start: function (index) {
			var coming = {},
				obj,
				href,
				type,
				margin,
				padding;

			index = getScalar( index );
			obj   = F.group[ index ] || null;

			if (!obj) {
				return false;
			}

			coming = $.extend(true, {}, F.opts, obj);

			// Convert margin and padding properties to array - top, right, bottom, left
			margin  = coming.margin;
			padding = coming.padding;

			if ($.type(margin) === 'number') {
				coming.margin = [margin, margin, margin, margin];
			}

			if ($.type(padding) === 'number') {
				coming.padding = [padding, padding, padding, padding];
			}

			// 'modal' propery is just a shortcut
			if (coming.modal) {
				$.extend(true, coming, {
					closeBtn   : false,
					closeClick : false,
					nextClick  : false,
					arrows     : false,
					mouseWheel : false,
					keys       : null,
					helpers: {
						overlay : {
							closeClick : false
						}
					}
				});
			}

			// 'autoSize' property is a shortcut, too
			if (coming.autoSize) {
				coming.autoWidth = coming.autoHeight = true;
			}

			if (coming.width === 'auto') {
				coming.autoWidth = true;
			}

			if (coming.height === 'auto') {
				coming.autoHeight = true;
			}

			/*
			 * Add reference to the group, so it`s possible to access from callbacks, example:
			 * afterLoad : function() {
			 *     this.title = 'Image ' + (this.index + 1) + ' of ' + this.group.length + (this.title ? ' - ' + this.title : '');
			 * }
			 */

			coming.group  = F.group;
			coming.index  = index;

			// Give a chance for callback or helpers to update coming item (type, title, etc)
			F.coming = coming;

			if (false === F.trigger('beforeLoad')) {
				F.coming = null;

				return;
			}

			type = coming.type;
			href = coming.href;

			if (!type) {
				F.coming = null;

				//If we can not determine content type then drop silently or display next/prev item if looping through gallery
				if (F.current && F.router && F.router !== 'jumpto') {
					F.current.index = index;

					return F[ F.router ]( F.direction );
				}

				return false;
			}

			F.isActive = true;

			if (type === 'image' || type === 'swf') {
				coming.autoHeight = coming.autoWidth = false;
				coming.scrolling  = 'visible';
			}

			if (type === 'image') {
				coming.aspectRatio = true;
			}

			if (type === 'iframe' && isTouch) {
				coming.scrolling = 'scroll';
			}

			// Build the neccessary markup
			coming.wrap = $(coming.tpl.wrap).addClass('fancybox-' + (isTouch ? 'mobile' : 'desktop') + ' fancybox-type-' + type + ' fancybox-tmp ' + coming.wrapCSS).appendTo( coming.parent || 'body' );

			$.extend(coming, {
				skin  : $('.fancybox-skin',  coming.wrap),
				outer : $('.fancybox-outer', coming.wrap),
				inner : $('.fancybox-inner', coming.wrap)
			});

			$.each(["Top", "Right", "Bottom", "Left"], function(i, v) {
				coming.skin.css('padding' + v, getValue(coming.padding[ i ]));
			});

			F.trigger('onReady');

			// Check before try to load; 'inline' and 'html' types need content, others - href
			if (type === 'inline' || type === 'html') {
				if (!coming.content || !coming.content.length) {
					return F._error( 'content' );
				}

			} else if (!href) {
				return F._error( 'href' );
			}

			if (type === 'image') {
				F._loadImage();

			} else if (type === 'ajax') {
				F._loadAjax();

			} else if (type === 'iframe') {
				F._loadIframe();

			} else {
				F._afterLoad();
			}
		},

		_error: function ( type ) {
			$.extend(F.coming, {
				type       : 'html',
				autoWidth  : true,
				autoHeight : true,
				minWidth   : 0,
				minHeight  : 0,
				scrolling  : 'no',
				hasError   : type,
				content    : F.coming.tpl.error
			});

			F._afterLoad();
		},

		_loadImage: function () {
			// Reset preload image so it is later possible to check "complete" property
			var img = F.imgPreload = new Image();

			img.onload = function () {
				this.onload = this.onerror = null;

				F.coming.width  = this.width / F.opts.pixelRatio;
				F.coming.height = this.height / F.opts.pixelRatio;

				F._afterLoad();
			};

			img.onerror = function () {
				this.onload = this.onerror = null;

				F._error( 'image' );
			};

			img.src = F.coming.href;

			if (img.complete !== true) {
				F.showLoading();
			}
		},

		_loadAjax: function () {
			var coming = F.coming;

			F.showLoading();

			F.ajaxLoad = $.ajax($.extend({}, coming.ajax, {
				url: coming.href,
				error: function (jqXHR, textStatus) {
					if (F.coming && textStatus !== 'abort') {
						F._error( 'ajax', jqXHR );

					} else {
						F.hideLoading();
					}
				},
				success: function (data, textStatus) {
					if (textStatus === 'success') {
						coming.content = data;

						F._afterLoad();
					}
				}
			}));
		},

		_loadIframe: function() {
			var coming = F.coming,
				iframe = $(coming.tpl.iframe.replace(/\{rnd\}/g, new Date().getTime()))
					.attr('scrolling', isTouch ? 'auto' : coming.iframe.scrolling)
					.attr('src', coming.href);

			// This helps IE
			$(coming.wrap).bind('onReset', function () {
				try {
					$(this).find('iframe').hide().attr('src', '//about:blank').end().empty();
				} catch (e) {}
			});

			if (coming.iframe.preload) {
				F.showLoading();

				iframe.one('load', function() {
					$(this).data('ready', 1);

					// iOS will lose scrolling if we resize
					if (!isTouch) {
						$(this).bind('load.fb', F.update);
					}

					// Without this trick:
					//   - iframe won't scroll on iOS devices
					//   - IE7 sometimes displays empty iframe
					$(this).parents('.fancybox-wrap').width('100%').removeClass('fancybox-tmp').show();

					F._afterLoad();
				});
			}

			coming.content = iframe.appendTo( coming.inner );

			if (!coming.iframe.preload) {
				F._afterLoad();
			}
		},

		_preloadImages: function() {
			var group   = F.group,
				current = F.current,
				len     = group.length,
				cnt     = current.preload ? Math.min(current.preload, len - 1) : 0,
				item,
				i;

			for (i = 1; i <= cnt; i += 1) {
				item = group[ (current.index + i ) % len ];

				if (item.type === 'image' && item.href) {
					new Image().src = item.href;
				}
			}
		},

		_afterLoad: function () {
			var coming   = F.coming,
				previous = F.current,
				placeholder = 'fancybox-placeholder',
				current,
				content,
				type,
				scrolling,
				href,
				embed;

			F.hideLoading();

			if (!coming || F.isActive === false) {
				return;
			}

			if (false === F.trigger('afterLoad', coming, previous)) {
				coming.wrap.stop(true).trigger('onReset').remove();

				F.coming = null;

				return;
			}

			if (previous) {
				F.trigger('beforeChange', previous);

				previous.wrap.stop(true).removeClass('fancybox-opened')
					.find('.fancybox-item, .fancybox-nav')
					.remove();
			}

			F.unbindEvents();

			current   = coming;
			content   = coming.content;
			type      = coming.type;
			scrolling = coming.scrolling;

			$.extend(F, {
				wrap  : current.wrap,
				skin  : current.skin,
				outer : current.outer,
				inner : current.inner,
				current  : current,
				previous : previous
			});

			href = current.href;

			switch (type) {
				case 'inline':
				case 'ajax':
				case 'html':
					if (current.selector) {
						content = $('<div>').html(content).find(current.selector);

					} else if (isQuery(content)) {
						if (!content.data(placeholder)) {
							content.data(placeholder, $('<div class="' + placeholder + '"></div>').insertAfter( content ).hide() );
						}

						content = content.show().detach();

						current.wrap.bind('onReset', function () {
							if ($(this).find(content).length) {
								content.hide().replaceAll( content.data(placeholder) ).data(placeholder, false);
							}
						});
					}
				break;

				case 'image':
					content = current.tpl.image.replace('{href}', href);
				break;

				case 'swf':
					content = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + href + '"></param>';
					embed   = '';

					$.each(current.swf, function(name, val) {
						content += '<param name="' + name + '" value="' + val + '"></param>';
						embed   += ' ' + name + '="' + val + '"';
					});

					content += '<embed src="' + href + '" type="application/x-shockwave-flash" width="100%" height="100%"' + embed + '></embed></object>';
				break;
			}

			if (!(isQuery(content) && content.parent().is(current.inner))) {
				current.inner.append( content );
			}

			// Give a chance for helpers or callbacks to update elements
			F.trigger('beforeShow');

			// Set scrolling before calculating dimensions
			current.inner.css('overflow', scrolling === 'yes' ? 'scroll' : (scrolling === 'no' ? 'hidden' : scrolling));

			// Set initial dimensions and start position
			F._setDimension();

			F.reposition();

			F.isOpen = false;
			F.coming = null;

			F.bindEvents();

			if (!F.isOpened) {
				$('.fancybox-wrap').not( current.wrap ).stop(true).trigger('onReset').remove();

			} else if (previous.prevMethod) {
				F.transitions[ previous.prevMethod ]();
			}

			F.transitions[ F.isOpened ? current.nextMethod : current.openMethod ]();

			F._preloadImages();
		},

		_setDimension: function () {
			var viewport   = F.getViewport(),
				steps      = 0,
				canShrink  = false,
				canExpand  = false,
				wrap       = F.wrap,
				skin       = F.skin,
				inner      = F.inner,
				current    = F.current,
				width      = current.width,
				height     = current.height,
				minWidth   = current.minWidth,
				minHeight  = current.minHeight,
				maxWidth   = current.maxWidth,
				maxHeight  = current.maxHeight,
				scrolling  = current.scrolling,
				scrollOut  = current.scrollOutside ? current.scrollbarWidth : 0,
				margin     = current.margin,
				wMargin    = getScalar(margin[1] + margin[3]),
				hMargin    = getScalar(margin[0] + margin[2]),
				wPadding,
				hPadding,
				wSpace,
				hSpace,
				origWidth,
				origHeight,
				origMaxWidth,
				origMaxHeight,
				ratio,
				width_,
				height_,
				maxWidth_,
				maxHeight_,
				iframe,
				body;

			// Reset dimensions so we could re-check actual size
			wrap.add(skin).add(inner).width('auto').height('auto').removeClass('fancybox-tmp');

			wPadding = getScalar(skin.outerWidth(true)  - skin.width());
			hPadding = getScalar(skin.outerHeight(true) - skin.height());

			// Any space between content and viewport (margin, padding, border, title)
			wSpace = wMargin + wPadding;
			hSpace = hMargin + hPadding;

			origWidth  = isPercentage(width)  ? (viewport.w - wSpace) * getScalar(width)  / 100 : width;
			origHeight = isPercentage(height) ? (viewport.h - hSpace) * getScalar(height) / 100 : height;

			if (current.type === 'iframe') {
				iframe = current.content;

				if (current.autoHeight && iframe.data('ready') === 1) {
					try {
						if (iframe[0].contentWindow.document.location) {
							inner.width( origWidth ).height(9999);

							body = iframe.contents().find('body');

							if (scrollOut) {
								body.css('overflow-x', 'hidden');
							}

							origHeight = body.outerHeight(true);
						}

					} catch (e) {}
				}

			} else if (current.autoWidth || current.autoHeight) {
				inner.addClass( 'fancybox-tmp' );

				// Set width or height in case we need to calculate only one dimension
				if (!current.autoWidth) {
					inner.width( origWidth );
				}

				if (!current.autoHeight) {
					inner.height( origHeight );
				}

				if (current.autoWidth) {
					origWidth = inner.width();
				}

				if (current.autoHeight) {
					origHeight = inner.height();
				}

				inner.removeClass( 'fancybox-tmp' );
			}

			width  = getScalar( origWidth );
			height = getScalar( origHeight );

			ratio  = origWidth / origHeight;

			// Calculations for the content
			minWidth  = getScalar(isPercentage(minWidth) ? getScalar(minWidth, 'w') - wSpace : minWidth);
			maxWidth  = getScalar(isPercentage(maxWidth) ? getScalar(maxWidth, 'w') - wSpace : maxWidth);

			minHeight = getScalar(isPercentage(minHeight) ? getScalar(minHeight, 'h') - hSpace : minHeight);
			maxHeight = getScalar(isPercentage(maxHeight) ? getScalar(maxHeight, 'h') - hSpace : maxHeight);

			// These will be used to determine if wrap can fit in the viewport
			origMaxWidth  = maxWidth;
			origMaxHeight = maxHeight;

			if (current.fitToView) {
				maxWidth  = Math.min(viewport.w - wSpace, maxWidth);
				maxHeight = Math.min(viewport.h - hSpace, maxHeight);
			}

			maxWidth_  = viewport.w - wMargin;
			maxHeight_ = viewport.h - hMargin;

			if (current.aspectRatio) {
				if (width > maxWidth) {
					width  = maxWidth;
					height = getScalar(width / ratio);
				}

				if (height > maxHeight) {
					height = maxHeight;
					width  = getScalar(height * ratio);
				}

				if (width < minWidth) {
					width  = minWidth;
					height = getScalar(width / ratio);
				}

				if (height < minHeight) {
					height = minHeight;
					width  = getScalar(height * ratio);
				}

			} else {
				width = Math.max(minWidth, Math.min(width, maxWidth));

				if (current.autoHeight && current.type !== 'iframe') {
					inner.width( width );

					height = inner.height();
				}

				height = Math.max(minHeight, Math.min(height, maxHeight));
			}

			// Try to fit inside viewport (including the title)
			if (current.fitToView) {
				inner.width( width ).height( height );

				wrap.width( width + wPadding );

				// Real wrap dimensions
				width_  = wrap.width();
				height_ = wrap.height();

				if (current.aspectRatio) {
					while ((width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight) {
						if (steps++ > 19) {
							break;
						}

						height = Math.max(minHeight, Math.min(maxHeight, height - 10));
						width  = getScalar(height * ratio);

						if (width < minWidth) {
							width  = minWidth;
							height = getScalar(width / ratio);
						}

						if (width > maxWidth) {
							width  = maxWidth;
							height = getScalar(width / ratio);
						}

						inner.width( width ).height( height );

						wrap.width( width + wPadding );

						width_  = wrap.width();
						height_ = wrap.height();
					}

				} else {
					width  = Math.max(minWidth,  Math.min(width,  width  - (width_  - maxWidth_)));
					height = Math.max(minHeight, Math.min(height, height - (height_ - maxHeight_)));
				}
			}

			if (scrollOut && scrolling === 'auto' && height < origHeight && (width + wPadding + scrollOut) < maxWidth_) {
				width += scrollOut;
			}

			inner.width( width ).height( height );

			wrap.width( width + wPadding );

			width_  = wrap.width();
			height_ = wrap.height();

			canShrink = (width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight;
			canExpand = current.aspectRatio ? (width < origMaxWidth && height < origMaxHeight && width < origWidth && height < origHeight) : ((width < origMaxWidth || height < origMaxHeight) && (width < origWidth || height < origHeight));

			$.extend(current, {
				dim : {
					width	: getValue( width_ ),
					height	: getValue( height_ )
				},
				origWidth  : origWidth,
				origHeight : origHeight,
				canShrink  : canShrink,
				canExpand  : canExpand,
				wPadding   : wPadding,
				hPadding   : hPadding,
				wrapSpace  : height_ - skin.outerHeight(true),
				skinSpace  : skin.height() - height
			});

			if (!iframe && current.autoHeight && height > minHeight && height < maxHeight && !canExpand) {
				inner.height('auto');
			}
		},

		_getPosition: function (onlyAbsolute) {
			var current  = F.current,
				viewport = F.getViewport(),
				margin   = current.margin,
				width    = F.wrap.width()  + margin[1] + margin[3],
				height   = F.wrap.height() + margin[0] + margin[2],
				rez      = {
					position: 'absolute',
					top  : margin[0],
					left : margin[3]
				};

			if (current.autoCenter && current.fixed && !onlyAbsolute && height <= viewport.h && width <= viewport.w) {
				rez.position = 'fixed';

			} else if (!current.locked) {
				rez.top  += viewport.y;
				rez.left += viewport.x;
			}

			rez.top  = getValue(Math.max(rez.top,  rez.top  + ((viewport.h - height) * current.topRatio)));
			rez.left = getValue(Math.max(rez.left, rez.left + ((viewport.w - width)  * current.leftRatio)));

			return rez;
		},

		_afterZoomIn: function () {
			var current = F.current;

			if (!current) {
				return;
			}

			F.isOpen = F.isOpened = true;

			F.wrap.css('overflow', 'visible').addClass('fancybox-opened');

			F.update();

			// Assign a click event
			if ( current.closeClick || (current.nextClick && F.group.length > 1) ) {
				F.inner.css('cursor', 'pointer').bind('click.fb', function(e) {
					if (!$(e.target).is('a') && !$(e.target).parent().is('a')) {
						e.preventDefault();

						F[ current.closeClick ? 'close' : 'next' ]();
					}
				});
			}

			// Create a close button
			if (current.closeBtn) {
				$(current.tpl.closeBtn).appendTo(F.skin).bind('click.fb', function(e) {
					e.preventDefault();

					F.close();
				});
			}

			// Create navigation arrows
			if (current.arrows && F.group.length > 1) {
				if (current.loop || current.index > 0) {
					$(current.tpl.prev).appendTo(F.outer).bind('click.fb', F.prev);
				}

				if (current.loop || current.index < F.group.length - 1) {
					$(current.tpl.next).appendTo(F.outer).bind('click.fb', F.next);
				}
			}

			F.trigger('afterShow');

			// Stop the slideshow if this is the last item
			if (!current.loop && current.index === current.group.length - 1) {
				F.play( false );

			} else if (F.opts.autoPlay && !F.player.isActive) {
				F.opts.autoPlay = false;

				F.play();
			}
		},

		_afterZoomOut: function ( obj ) {
			obj = obj || F.current;

			$('.fancybox-wrap').trigger('onReset').remove();

			$.extend(F, {
				group  : {},
				opts   : {},
				router : false,
				current   : null,
				isActive  : false,
				isOpened  : false,
				isOpen    : false,
				isClosing : false,
				wrap   : null,
				skin   : null,
				outer  : null,
				inner  : null
			});

			F.trigger('afterClose', obj);
		}
	});

	/*
	 *	Default transitions
	 */

	F.transitions = {
		getOrigPosition: function () {
			var current  = F.current,
				element  = current.element,
				orig     = current.orig,
				pos      = {},
				width    = 50,
				height   = 50,
				hPadding = current.hPadding,
				wPadding = current.wPadding,
				viewport = F.getViewport();

			if (!orig && current.isDom && element.is(':visible')) {
				orig = element.find('img:first');

				if (!orig.length) {
					orig = element;
				}
			}

			if (isQuery(orig)) {
				pos = orig.offset();

				if (orig.is('img')) {
					width  = orig.outerWidth();
					height = orig.outerHeight();
				}

			} else {
				pos.top  = viewport.y + (viewport.h - height) * current.topRatio;
				pos.left = viewport.x + (viewport.w - width)  * current.leftRatio;
			}

			if (F.wrap.css('position') === 'fixed' || current.locked) {
				pos.top  -= viewport.y;
				pos.left -= viewport.x;
			}

			pos = {
				top     : getValue(pos.top  - hPadding * current.topRatio),
				left    : getValue(pos.left - wPadding * current.leftRatio),
				width   : getValue(width  + wPadding),
				height  : getValue(height + hPadding)
			};

			return pos;
		},

		step: function (now, fx) {
			var ratio,
				padding,
				value,
				prop       = fx.prop,
				current    = F.current,
				wrapSpace  = current.wrapSpace,
				skinSpace  = current.skinSpace;

			if (prop === 'width' || prop === 'height') {
				ratio = fx.end === fx.start ? 1 : (now - fx.start) / (fx.end - fx.start);

				if (F.isClosing) {
					ratio = 1 - ratio;
				}

				padding = prop === 'width' ? current.wPadding : current.hPadding;
				value   = now - padding;

				F.skin[ prop ](  getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) ) );
				F.inner[ prop ]( getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) - (skinSpace * ratio) ) );
			}
		},

		zoomIn: function () {
			var current  = F.current,
				startPos = current.pos,
				effect   = current.openEffect,
				elastic  = effect === 'elastic',
				endPos   = $.extend({opacity : 1}, startPos);

			// Remove "position" property that breaks older IE
			delete endPos.position;

			if (elastic) {
				startPos = this.getOrigPosition();

				if (current.openOpacity) {
					startPos.opacity = 0.1;
				}

			} else if (effect === 'fade') {
				startPos.opacity = 0.1;
			}

			F.wrap.css(startPos).animate(endPos, {
				duration : effect === 'none' ? 0 : current.openSpeed,
				easing   : current.openEasing,
				step     : elastic ? this.step : null,
				complete : F._afterZoomIn
			});
		},

		zoomOut: function () {
			var current  = F.current,
				effect   = current.closeEffect,
				elastic  = effect === 'elastic',
				endPos   = {opacity : 0.1};

			if (elastic) {
				endPos = this.getOrigPosition();

				if (current.closeOpacity) {
					endPos.opacity = 0.1;
				}
			}

			F.wrap.animate(endPos, {
				duration : effect === 'none' ? 0 : current.closeSpeed,
				easing   : current.closeEasing,
				step     : elastic ? this.step : null,
				complete : F._afterZoomOut
			});
		},

		changeIn: function () {
			var current   = F.current,
				effect    = current.nextEffect,
				startPos  = current.pos,
				endPos    = { opacity : 1 },
				direction = F.direction,
				distance  = 200,
				field;

			startPos.opacity = 0.1;

			if (effect === 'elastic') {
				field = direction === 'down' || direction === 'up' ? 'top' : 'left';

				if (direction === 'down' || direction === 'right') {
					startPos[ field ] = getValue(getScalar(startPos[ field ]) - distance);
					endPos[ field ]   = '+=' + distance + 'px';

				} else {
					startPos[ field ] = getValue(getScalar(startPos[ field ]) + distance);
					endPos[ field ]   = '-=' + distance + 'px';
				}
			}

			// Workaround for http://bugs.jquery.com/ticket/12273
			if (effect === 'none') {
				F._afterZoomIn();

			} else {
				F.wrap.css(startPos).animate(endPos, {
					duration : current.nextSpeed,
					easing   : current.nextEasing,
					complete : F._afterZoomIn
				});
			}
		},

		changeOut: function () {
			var previous  = F.previous,
				effect    = previous.prevEffect,
				endPos    = { opacity : 0.1 },
				direction = F.direction,
				distance  = 200;

			if (effect === 'elastic') {
				endPos[ direction === 'down' || direction === 'up' ? 'top' : 'left' ] = ( direction === 'up' || direction === 'left' ? '-' : '+' ) + '=' + distance + 'px';
			}

			previous.wrap.animate(endPos, {
				duration : effect === 'none' ? 0 : previous.prevSpeed,
				easing   : previous.prevEasing,
				complete : function () {
					$(this).trigger('onReset').remove();
				}
			});
		}
	};

	/*
	 *	Overlay helper
	 */

	F.helpers.overlay = {
		defaults : {
			closeClick : true,      // if true, fancyBox will be closed when user clicks on the overlay
			speedOut   : 200,       // duration of fadeOut animation
			showEarly  : true,      // indicates if should be opened immediately or wait until the content is ready
			css        : {},        // custom CSS properties
			locked     : !isTouch,  // if true, the content will be locked into overlay
			fixed      : true       // if false, the overlay CSS position property will not be set to "fixed"
		},

		overlay : null,      // current handle
		fixed   : false,     // indicates if the overlay has position "fixed"
		el      : $('html'), // element that contains "the lock"

		// Public methods
		create : function(opts) {
			opts = $.extend({}, this.defaults, opts);

			if (this.overlay) {
				this.close();
			}

			this.overlay = $('<div class="fancybox-overlay"></div>').appendTo( F.coming ? F.coming.parent : opts.parent );
			this.fixed   = false;

			if (opts.fixed && F.defaults.fixed) {
				this.overlay.addClass('fancybox-overlay-fixed');

				this.fixed = true;
			}
		},

		open : function(opts) {
			var that = this;

			opts = $.extend({}, this.defaults, opts);

			if (this.overlay) {
				this.overlay.unbind('.overlay').width('auto').height('auto');

			} else {
				this.create(opts);
			}

			if (!this.fixed) {
				W.bind('resize.overlay', $.proxy( this.update, this) );

				this.update();
			}

			if (opts.closeClick) {
				this.overlay.bind('click.overlay', function(e) {
					if ($(e.target).hasClass('fancybox-overlay')) {
						if (F.isActive) {
							F.close();
						} else {
							that.close();
						}

						return false;
					}
				});
			}

			this.overlay.css( opts.css ).show();
		},

		close : function() {
			var scrollV, scrollH;

			W.unbind('resize.overlay');

			if (this.el.hasClass('fancybox-lock')) {
				$('.fancybox-margin').removeClass('fancybox-margin');

				scrollV = W.scrollTop();
				scrollH = W.scrollLeft();

				this.el.removeClass('fancybox-lock');

				W.scrollTop( scrollV ).scrollLeft( scrollH );
			}

			$('.fancybox-overlay').remove().hide();

			$.extend(this, {
				overlay : null,
				fixed   : false
			});
		},

		// Private, callbacks

		update : function () {
			var width = '100%', offsetWidth;

			// Reset width/height so it will not mess
			this.overlay.width(width).height('100%');

			// jQuery does not return reliable result for IE
			if (IE) {
				offsetWidth = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);

				if (D.width() > offsetWidth) {
					width = D.width();
				}

			} else if (D.width() > W.width()) {
				width = D.width();
			}

			this.overlay.width(width).height(D.height());
		},

		// This is where we can manipulate DOM, because later it would cause iframes to reload
		onReady : function (opts, obj) {
			var overlay = this.overlay;

			$('.fancybox-overlay').stop(true, true);

			if (!overlay) {
				this.create(opts);
			}

			if (opts.locked && this.fixed && obj.fixed) {
				if (!overlay) {
					this.margin = D.height() > W.height() ? $('html').css('margin-right').replace("px", "") : false;
				}

				obj.locked = this.overlay.append( obj.wrap );
				obj.fixed  = false;
			}

			if (opts.showEarly === true) {
				this.beforeShow.apply(this, arguments);
			}
		},

		beforeShow : function(opts, obj) {
			var scrollV, scrollH;

			if (obj.locked) {
				if (this.margin !== false) {
					$('*').filter(function(){
						return ($(this).css('position') === 'fixed' && !$(this).hasClass("fancybox-overlay") && !$(this).hasClass("fancybox-wrap") );
					}).addClass('fancybox-margin');

					this.el.addClass('fancybox-margin');
				}

				scrollV = W.scrollTop();
				scrollH = W.scrollLeft();

				this.el.addClass('fancybox-lock');

				W.scrollTop( scrollV ).scrollLeft( scrollH );
			}

			this.open(opts);
		},

		onUpdate : function() {
			if (!this.fixed) {
				this.update();
			}
		},

		afterClose: function (opts) {
			// Remove overlay if exists and fancyBox is not opening
			// (e.g., it is not being open using afterClose callback)
			//if (this.overlay && !F.isActive) {
			if (this.overlay && !F.coming) {
				this.overlay.fadeOut(opts.speedOut, $.proxy( this.close, this ));
			}
		}
	};

	/*
	 *	Title helper
	 */

	F.helpers.title = {
		defaults : {
			type     : 'float', // 'float', 'inside', 'outside' or 'over',
			position : 'bottom' // 'top' or 'bottom'
		},

		beforeShow: function (opts) {
			var current = F.current,
				text    = current.title,
				type    = opts.type,
				title,
				target;

			if ($.isFunction(text)) {
				text = text.call(current.element, current);
			}

			if (!isString(text) || $.trim(text) === '') {
				return;
			}

			title = $('<div class="fancybox-title fancybox-title-' + type + '-wrap">' + text + '</div>');

			switch (type) {
				case 'inside':
					target = F.skin;
				break;

				case 'outside':
					target = F.wrap;
				break;

				case 'over':
					target = F.inner;
				break;

				default: // 'float'
					target = F.skin;

					title.appendTo('body');

					if (IE) {
						title.width( title.width() );
					}

					title.wrapInner('<span class="child"></span>');

					//Increase bottom margin so this title will also fit into viewport
					F.current.margin[2] += Math.abs( getScalar(title.css('margin-bottom')) );
				break;
			}

			title[ (opts.position === 'top' ? 'prependTo'  : 'appendTo') ](target);
		}
	};

	// jQuery plugin initialization
	$.fn.fancybox = function (options) {
		var index,
			that     = $(this),
			selector = this.selector || '',
			run      = function(e) {
				var what = $(this).blur(), idx = index, relType, relVal;

				if (!(e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) && !what.is('.fancybox-wrap')) {
					relType = options.groupAttr || 'data-fancybox-group';
					relVal  = what.attr(relType);

					if (!relVal) {
						relType = 'rel';
						relVal  = what.get(0)[ relType ];
					}

					if (relVal && relVal !== '' && relVal !== 'nofollow') {
						what = selector.length ? $(selector) : that;
						what = what.filter('[' + relType + '="' + relVal + '"]');
						idx  = what.index(this);
					}

					options.index = idx;

					// Stop an event from bubbling if everything is fine
					if (F.open(what, options) !== false) {
						e.preventDefault();
					}
				}
			};

		options = options || {};
		index   = options.index || 0;

		if (!selector || options.live === false) {
			that.unbind('click.fb-start').bind('click.fb-start', run);

		} else {
			D.undelegate(selector, 'click.fb-start').delegate(selector + ":not('.fancybox-item, .fancybox-nav')", 'click.fb-start', run);
		}

		this.filter('[data-fancybox-start=1]').trigger('click');

		return this;
	};

	// Tests that need a body at doc ready
	D.ready(function() {
		var w1, w2;

		if ( $.scrollbarWidth === undefined ) {
			// http://benalman.com/projects/jquery-misc-plugins/#scrollbarwidth
			$.scrollbarWidth = function() {
				var parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo('body'),
					child  = parent.children(),
					width  = child.innerWidth() - child.height( 99 ).innerWidth();

				parent.remove();

				return width;
			};
		}

		if ( $.support.fixedPosition === undefined ) {
			$.support.fixedPosition = (function() {
				var elem  = $('<div style="position:fixed;top:20px;"></div>').appendTo('body'),
					fixed = ( elem[0].offsetTop === 20 || elem[0].offsetTop === 15 );

				elem.remove();

				return fixed;
			}());
		}

		$.extend(F.defaults, {
			scrollbarWidth : $.scrollbarWidth(),
			fixed  : $.support.fixedPosition,
			parent : $('body')
		});

		//Get real width of page scroll-bar
		w1 = $(window).width();

		H.addClass('fancybox-lock-test');

		w2 = $(window).width();

		H.removeClass('fancybox-lock-test');

		$("<style type='text/css'>.fancybox-margin{margin-right:" + (w2 - w1) + "px;}</style>").appendTo("head");
	});

}(window, document, jQuery));
define("fancybox", function(){});

define('spec/javascripts/fixtures/json/range',[],function() {
  return [
    {
      name: 'low',
      start: 1,
      end: 5
    }, {
      name: 'medium',
      start: 6,
      end: 10
    }, {
      name: 'high',
      start: 11,
      end: 15
    }
  ];
});

//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define('backbone',['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore');
    factory(root, exports, _);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      if (!model.collection) model.collection = this;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

// Backbone.Wreqr (Backbone.Marionette)
// ----------------------------------
// v1.3.1
//
// Copyright (c)2014 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/marionettejs/backbone.wreqr


(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define('backbone.wreqr',['backbone', 'underscore'], function(Backbone, _) {
      return factory(Backbone, _);
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    module.exports = factory(Backbone, _);
  } else {
    factory(root.Backbone, root._);
  }

}(this, function(Backbone, _) {
  

  var previousWreqr = Backbone.Wreqr;

  var Wreqr = Backbone.Wreqr = {};

  Backbone.Wreqr.VERSION = '1.3.1';

  Backbone.Wreqr.noConflict = function () {
    Backbone.Wreqr = previousWreqr;
    return this;
  };

  // Handlers
  // --------
  // A registry of functions to call, given a name
  
  Wreqr.Handlers = (function(Backbone, _){
    
    
    // Constructor
    // -----------
  
    var Handlers = function(options){
      this.options = options;
      this._wreqrHandlers = {};
      
      if (_.isFunction(this.initialize)){
        this.initialize(options);
      }
    };
  
    Handlers.extend = Backbone.Model.extend;
  
    // Instance Members
    // ----------------
  
    _.extend(Handlers.prototype, Backbone.Events, {
  
      // Add multiple handlers using an object literal configuration
      setHandlers: function(handlers){
        _.each(handlers, function(handler, name){
          var context = null;
  
          if (_.isObject(handler) && !_.isFunction(handler)){
            context = handler.context;
            handler = handler.callback;
          }
  
          this.setHandler(name, handler, context);
        }, this);
      },
  
      // Add a handler for the given name, with an
      // optional context to run the handler within
      setHandler: function(name, handler, context){
        var config = {
          callback: handler,
          context: context
        };
  
        this._wreqrHandlers[name] = config;
  
        this.trigger("handler:add", name, handler, context);
      },
  
      // Determine whether or not a handler is registered
      hasHandler: function(name){
        return !! this._wreqrHandlers[name];
      },
  
      // Get the currently registered handler for
      // the specified name. Throws an exception if
      // no handler is found.
      getHandler: function(name){
        var config = this._wreqrHandlers[name];
  
        if (!config){
          return;
        }
  
        return function(){
          var args = Array.prototype.slice.apply(arguments);
          return config.callback.apply(config.context, args);
        };
      },
  
      // Remove a handler for the specified name
      removeHandler: function(name){
        delete this._wreqrHandlers[name];
      },
  
      // Remove all handlers from this registry
      removeAllHandlers: function(){
        this._wreqrHandlers = {};
      }
    });
  
    return Handlers;
  })(Backbone, _);
  
  // Wreqr.CommandStorage
  // --------------------
  //
  // Store and retrieve commands for execution.
  Wreqr.CommandStorage = (function(){
    
  
    // Constructor function
    var CommandStorage = function(options){
      this.options = options;
      this._commands = {};
  
      if (_.isFunction(this.initialize)){
        this.initialize(options);
      }
    };
  
    // Instance methods
    _.extend(CommandStorage.prototype, Backbone.Events, {
  
      // Get an object literal by command name, that contains
      // the `commandName` and the `instances` of all commands
      // represented as an array of arguments to process
      getCommands: function(commandName){
        var commands = this._commands[commandName];
  
        // we don't have it, so add it
        if (!commands){
  
          // build the configuration
          commands = {
            command: commandName, 
            instances: []
          };
  
          // store it
          this._commands[commandName] = commands;
        }
  
        return commands;
      },
  
      // Add a command by name, to the storage and store the
      // args for the command
      addCommand: function(commandName, args){
        var command = this.getCommands(commandName);
        command.instances.push(args);
      },
  
      // Clear all commands for the given `commandName`
      clearCommands: function(commandName){
        var command = this.getCommands(commandName);
        command.instances = [];
      }
    });
  
    return CommandStorage;
  })();
  
  // Wreqr.Commands
  // --------------
  //
  // A simple command pattern implementation. Register a command
  // handler and execute it.
  Wreqr.Commands = (function(Wreqr){
    
  
    return Wreqr.Handlers.extend({
      // default storage type
      storageType: Wreqr.CommandStorage,
  
      constructor: function(options){
        this.options = options || {};
  
        this._initializeStorage(this.options);
        this.on("handler:add", this._executeCommands, this);
  
        var args = Array.prototype.slice.call(arguments);
        Wreqr.Handlers.prototype.constructor.apply(this, args);
      },
  
      // Execute a named command with the supplied args
      execute: function(name, args){
        name = arguments[0];
        args = Array.prototype.slice.call(arguments, 1);
  
        if (this.hasHandler(name)){
          this.getHandler(name).apply(this, args);
        } else {
          this.storage.addCommand(name, args);
        }
  
      },
  
      // Internal method to handle bulk execution of stored commands
      _executeCommands: function(name, handler, context){
        var command = this.storage.getCommands(name);
  
        // loop through and execute all the stored command instances
        _.each(command.instances, function(args){
          handler.apply(context, args);
        });
  
        this.storage.clearCommands(name);
      },
  
      // Internal method to initialize storage either from the type's
      // `storageType` or the instance `options.storageType`.
      _initializeStorage: function(options){
        var storage;
  
        var StorageType = options.storageType || this.storageType;
        if (_.isFunction(StorageType)){
          storage = new StorageType();
        } else {
          storage = StorageType;
        }
  
        this.storage = storage;
      }
    });
  
  })(Wreqr);
  
  // Wreqr.RequestResponse
  // ---------------------
  //
  // A simple request/response implementation. Register a
  // request handler, and return a response from it
  Wreqr.RequestResponse = (function(Wreqr){
    
  
    return Wreqr.Handlers.extend({
      request: function(){
        var name = arguments[0];
        var args = Array.prototype.slice.call(arguments, 1);
        if (this.hasHandler(name)) {
          return this.getHandler(name).apply(this, args);
        }
      }
    });
  
  })(Wreqr);
  
  // Event Aggregator
  // ----------------
  // A pub-sub object that can be used to decouple various parts
  // of an application through event-driven architecture.
  
  Wreqr.EventAggregator = (function(Backbone, _){
    
    var EA = function(){};
  
    // Copy the `extend` function used by Backbone's classes
    EA.extend = Backbone.Model.extend;
  
    // Copy the basic Backbone.Events on to the event aggregator
    _.extend(EA.prototype, Backbone.Events);
  
    return EA;
  })(Backbone, _);
  
  // Wreqr.Channel
  // --------------
  //
  // An object that wraps the three messaging systems:
  // EventAggregator, RequestResponse, Commands
  Wreqr.Channel = (function(Wreqr){
    
  
    var Channel = function(channelName) {
      this.vent        = new Backbone.Wreqr.EventAggregator();
      this.reqres      = new Backbone.Wreqr.RequestResponse();
      this.commands    = new Backbone.Wreqr.Commands();
      this.channelName = channelName;
    };
  
    _.extend(Channel.prototype, {
  
      // Remove all handlers from the messaging systems of this channel
      reset: function() {
        this.vent.off();
        this.vent.stopListening();
        this.reqres.removeAllHandlers();
        this.commands.removeAllHandlers();
        return this;
      },
  
      // Connect a hash of events; one for each messaging system
      connectEvents: function(hash, context) {
        this._connect('vent', hash, context);
        return this;
      },
  
      connectCommands: function(hash, context) {
        this._connect('commands', hash, context);
        return this;
      },
  
      connectRequests: function(hash, context) {
        this._connect('reqres', hash, context);
        return this;
      },
  
      // Attach the handlers to a given message system `type`
      _connect: function(type, hash, context) {
        if (!hash) {
          return;
        }
  
        context = context || this;
        var method = (type === 'vent') ? 'on' : 'setHandler';
  
        _.each(hash, function(fn, eventName) {
          this[type][method](eventName, _.bind(fn, context));
        }, this);
      }
    });
  
  
    return Channel;
  })(Wreqr);
  
  // Wreqr.Radio
  // --------------
  //
  // An object that lets you communicate with many channels.
  Wreqr.radio = (function(Wreqr){
    
  
    var Radio = function() {
      this._channels = {};
      this.vent = {};
      this.commands = {};
      this.reqres = {};
      this._proxyMethods();
    };
  
    _.extend(Radio.prototype, {
  
      channel: function(channelName) {
        if (!channelName) {
          throw new Error('Channel must receive a name');
        }
  
        return this._getChannel( channelName );
      },
  
      _getChannel: function(channelName) {
        var channel = this._channels[channelName];
  
        if(!channel) {
          channel = new Wreqr.Channel(channelName);
          this._channels[channelName] = channel;
        }
  
        return channel;
      },
  
      _proxyMethods: function() {
        _.each(['vent', 'commands', 'reqres'], function(system) {
          _.each( messageSystems[system], function(method) {
            this[system][method] = proxyMethod(this, system, method);
          }, this);
        }, this);
      }
    });
  
  
    var messageSystems = {
      vent: [
        'on',
        'off',
        'trigger',
        'once',
        'stopListening',
        'listenTo',
        'listenToOnce'
      ],
  
      commands: [
        'execute',
        'setHandler',
        'setHandlers',
        'removeHandler',
        'removeAllHandlers'
      ],
  
      reqres: [
        'request',
        'setHandler',
        'setHandlers',
        'removeHandler',
        'removeAllHandlers'
      ]
    };
  
    var proxyMethod = function(radio, system, method) {
      return function(channelName) {
        var messageSystem = radio._getChannel(channelName)[system];
        var args = Array.prototype.slice.call(arguments, 1);
  
        return messageSystem[method].apply(messageSystem, args);
      };
    };
  
    return new Radio();
  
  })(Wreqr);
  

  return Backbone.Wreqr;

}));

// Backbone.BabySitter
// -------------------
// v0.1.4
//
// Copyright (c)2014 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://github.com/marionettejs/backbone.babysitter

(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define('backbone.babysitter',['backbone', 'underscore'], function(Backbone, _) {
      return factory(Backbone, _);
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    module.exports = factory(Backbone, _);
  } else {
    factory(root.Backbone, root._);
  }

}(this, function(Backbone, _) {
  

  var previousChildViewContainer = Backbone.ChildViewContainer;

  // BabySitter.ChildViewContainer
  // -----------------------------
  //
  // Provide a container to store, retrieve and
  // shut down child views.
  
  Backbone.ChildViewContainer = (function (Backbone, _) {
  
    // Container Constructor
    // ---------------------
  
    var Container = function(views){
      this._views = {};
      this._indexByModel = {};
      this._indexByCustom = {};
      this._updateLength();
  
      _.each(views, this.add, this);
    };
  
    // Container Methods
    // -----------------
  
    _.extend(Container.prototype, {
  
      // Add a view to this container. Stores the view
      // by `cid` and makes it searchable by the model
      // cid (and model itself). Optionally specify
      // a custom key to store an retrieve the view.
      add: function(view, customIndex){
        var viewCid = view.cid;
  
        // store the view
        this._views[viewCid] = view;
  
        // index it by model
        if (view.model){
          this._indexByModel[view.model.cid] = viewCid;
        }
  
        // index by custom
        if (customIndex){
          this._indexByCustom[customIndex] = viewCid;
        }
  
        this._updateLength();
        return this;
      },
  
      // Find a view by the model that was attached to
      // it. Uses the model's `cid` to find it.
      findByModel: function(model){
        return this.findByModelCid(model.cid);
      },
  
      // Find a view by the `cid` of the model that was attached to
      // it. Uses the model's `cid` to find the view `cid` and
      // retrieve the view using it.
      findByModelCid: function(modelCid){
        var viewCid = this._indexByModel[modelCid];
        return this.findByCid(viewCid);
      },
  
      // Find a view by a custom indexer.
      findByCustom: function(index){
        var viewCid = this._indexByCustom[index];
        return this.findByCid(viewCid);
      },
  
      // Find by index. This is not guaranteed to be a
      // stable index.
      findByIndex: function(index){
        return _.values(this._views)[index];
      },
  
      // retrieve a view by its `cid` directly
      findByCid: function(cid){
        return this._views[cid];
      },
  
      // Remove a view
      remove: function(view){
        var viewCid = view.cid;
  
        // delete model index
        if (view.model){
          delete this._indexByModel[view.model.cid];
        }
  
        // delete custom index
        _.any(this._indexByCustom, function(cid, key) {
          if (cid === viewCid) {
            delete this._indexByCustom[key];
            return true;
          }
        }, this);
  
        // remove the view from the container
        delete this._views[viewCid];
  
        // update the length
        this._updateLength();
        return this;
      },
  
      // Call a method on every view in the container,
      // passing parameters to the call method one at a
      // time, like `function.call`.
      call: function(method){
        this.apply(method, _.tail(arguments));
      },
  
      // Apply a method on every view in the container,
      // passing parameters to the call method one at a
      // time, like `function.apply`.
      apply: function(method, args){
        _.each(this._views, function(view){
          if (_.isFunction(view[method])){
            view[method].apply(view, args || []);
          }
        });
      },
  
      // Update the `.length` attribute on this container
      _updateLength: function(){
        this.length = _.size(this._views);
      }
    });
  
    // Borrowing this code from Backbone.Collection:
    // http://backbonejs.org/docs/backbone.html#section-106
    //
    // Mix in methods from Underscore, for iteration, and other
    // collection related features.
    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
      'last', 'without', 'isEmpty', 'pluck'];
  
    _.each(methods, function(method) {
      Container.prototype[method] = function() {
        var views = _.values(this._views);
        var args = [views].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    });
  
    // return the public API
    return Container;
  })(Backbone, _);
  

  Backbone.ChildViewContainer.VERSION = '0.1.4';

  Backbone.ChildViewContainer.noConflict = function () {
    Backbone.ChildViewContainer = previousChildViewContainer;
    return this;
  };

  return Backbone.ChildViewContainer;

}));

// MarionetteJS (Backbone.Marionette)
// ----------------------------------
// v2.0.1
//
// Copyright (c)2014 Derick Bailey, Muted Solutions, LLC.
// Distributed under MIT license
//
// http://marionettejs.com

(function(root, factory) {

  if (typeof define === 'function' && define.amd) {
    define('marionette',['backbone', 'underscore', 'backbone.wreqr', 'backbone.babysitter'], function(Backbone, _) {
      return (root.Marionette = factory(root, Backbone, _));
    });
  } else if (typeof exports !== 'undefined') {
    var Backbone = require('backbone');
    var _ = require('underscore');
    var Wreqr = require('backbone.wreqr');
    var BabySitter = require('backbone.babysitter');
    module.exports = factory(root, Backbone, _);
  } else {
    root.Marionette = factory(root, root.Backbone, root._);
  }

}(this, function(root, Backbone, _) {
  

  var previousMarionette = root.Marionette;

  var Marionette = Backbone.Marionette = {};

  Marionette.VERSION = '2.0.1';

  Marionette.noConflict = function() {
    root.Marionette = previousMarionette;
    return this;
  };

  // Get the Deferred creator for later use
  Marionette.Deferred = Backbone.$.Deferred;

  /* jshint unused: false */
  
  // Helpers
  // -------
  
  // For slicing `arguments` in functions
  var slice = Array.prototype.slice;
  
  function throwError(message, name) {
    var error = new Error(message);
    error.name = name || 'Error';
    throw error;
  }
  
  // Marionette.extend
  // -----------------
  
  // Borrow the Backbone `extend` method so we can use it as needed
  Marionette.extend = Backbone.Model.extend;
  
  // Marionette.getOption
  // --------------------
  
  // Retrieve an object, function or other value from a target
  // object or its `options`, with `options` taking precedence.
  Marionette.getOption = function(target, optionName) {
    if (!target || !optionName) { return; }
    var value;
  
    if (target.options && (target.options[optionName] !== undefined)) {
      value = target.options[optionName];
    } else {
      value = target[optionName];
    }
  
    return value;
  };
  
  // Proxy `Marionette.getOption`
  Marionette.proxyGetOption = function(optionName) {
    return Marionette.getOption(this, optionName);
  };
  
  // Marionette.normalizeMethods
  // ----------------------
  
  // Pass in a mapping of events => functions or function names
  // and return a mapping of events => functions
  Marionette.normalizeMethods = function(hash) {
    var normalizedHash = {}, method;
    _.each(hash, function(fn, name) {
      method = fn;
      if (!_.isFunction(method)) {
        method = this[method];
      }
      if (!method) {
        return;
      }
      normalizedHash[name] = method;
    }, this);
    return normalizedHash;
  };
  
  
  // allows for the use of the @ui. syntax within
  // a given key for triggers and events
  // swaps the @ui with the associated selector
  Marionette.normalizeUIKeys = function(hash, ui) {
    if (typeof(hash) === 'undefined') {
      return;
    }
  
    _.each(_.keys(hash), function(v) {
      var pattern = /@ui.[a-zA-Z_$0-9]*/g;
      if (v.match(pattern)) {
        hash[v.replace(pattern, function(r) {
          return ui[r.slice(4)];
        })] = hash[v];
        delete hash[v];
      }
    });
  
    return hash;
  };
  
  // Mix in methods from Underscore, for iteration, and other
  // collection related features.
  // Borrowing this code from Backbone.Collection:
  // http://backbonejs.org/docs/backbone.html#section-106
  Marionette.actAsCollection = function(object, listProperty) {
    var methods = ['forEach', 'each', 'map', 'find', 'detect', 'filter',
      'select', 'reject', 'every', 'all', 'some', 'any', 'include',
      'contains', 'invoke', 'toArray', 'first', 'initial', 'rest',
      'last', 'without', 'isEmpty', 'pluck'];
  
    _.each(methods, function(method) {
      object[method] = function() {
        var list = _.values(_.result(this, listProperty));
        var args = [list].concat(_.toArray(arguments));
        return _[method].apply(_, args);
      };
    });
  };
  
  // Trigger an event and/or a corresponding method name. Examples:
  //
  // `this.triggerMethod("foo")` will trigger the "foo" event and
  // call the "onFoo" method.
  //
  // `this.triggerMethod("foo:bar")` will trigger the "foo:bar" event and
  // call the "onFooBar" method.
  Marionette.triggerMethod = (function() {
  
    // split the event name on the ":"
    var splitter = /(^|:)(\w)/gi;
  
    // take the event section ("section1:section2:section3")
    // and turn it in to uppercase name
    function getEventName(match, prefix, eventName) {
      return eventName.toUpperCase();
    }
  
    // actual triggerMethod implementation
    var triggerMethod = function(event) {
      // get the method name from the event name
      var methodName = 'on' + event.replace(splitter, getEventName);
      var method = this[methodName];
      var result;
  
      // call the onMethodName if it exists
      if (_.isFunction(method)) {
        // pass all arguments, except the event name
        result = method.apply(this, _.tail(arguments));
      }
  
      // trigger the event, if a trigger method exists
      if (_.isFunction(this.trigger)) {
        this.trigger.apply(this, arguments);
      }
  
      return result;
    };
  
    return triggerMethod;
  })();
  
  // DOMRefresh
  // ----------
  //
  // Monitor a view's state, and after it has been rendered and shown
  // in the DOM, trigger a "dom:refresh" event every time it is
  // re-rendered.
  
  Marionette.MonitorDOMRefresh = (function(documentElement) {
    // track when the view has been shown in the DOM,
    // using a Marionette.Region (or by other means of triggering "show")
    function handleShow(view) {
      view._isShown = true;
      triggerDOMRefresh(view);
    }
  
    // track when the view has been rendered
    function handleRender(view) {
      view._isRendered = true;
      triggerDOMRefresh(view);
    }
  
    // Trigger the "dom:refresh" event and corresponding "onDomRefresh" method
    function triggerDOMRefresh(view) {
      if (view._isShown && view._isRendered && isInDOM(view)) {
        if (_.isFunction(view.triggerMethod)) {
          view.triggerMethod('dom:refresh');
        }
      }
    }
  
    function isInDOM(view) {
      return documentElement.contains(view.el);
    }
  
    // Export public API
    return function(view) {
      view.listenTo(view, 'show', function() {
        handleShow(view);
      });
  
      view.listenTo(view, 'render', function() {
        handleRender(view);
      });
    };
  })(document.documentElement);
  

  /* jshint maxparams: 5 */
  
  // Marionette.bindEntityEvents & unbindEntityEvents
  // ---------------------------
  //
  // These methods are used to bind/unbind a backbone "entity" (collection/model)
  // to methods on a target object.
  //
  // The first parameter, `target`, must have a `listenTo` method from the
  // EventBinder object.
  //
  // The second parameter is the entity (Backbone.Model or Backbone.Collection)
  // to bind the events from.
  //
  // The third parameter is a hash of { "event:name": "eventHandler" }
  // configuration. Multiple handlers can be separated by a space. A
  // function can be supplied instead of a string handler name.
  
  (function(Marionette) {
    
  
    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function bindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);
  
      _.each(methodNames, function(methodName) {
  
        var method = target[methodName];
        if (!method) {
          throwError('Method "' + methodName +
            '" was configured as an event handler, but does not exist.');
        }
  
        target.listenTo(entity, evt, method);
      });
    }
  
    // Bind the event to a supplied callback function
    function bindToFunction(target, entity, evt, method) {
      target.listenTo(entity, evt, method);
    }
  
    // Bind the event to handlers specified as a string of
    // handler names on the target object
    function unbindFromStrings(target, entity, evt, methods) {
      var methodNames = methods.split(/\s+/);
  
      _.each(methodNames, function(methodName) {
        var method = target[methodName];
        target.stopListening(entity, evt, method);
      });
    }
  
    // Bind the event to a supplied callback function
    function unbindToFunction(target, entity, evt, method) {
      target.stopListening(entity, evt, method);
    }
  
  
    // generic looping function
    function iterateEvents(target, entity, bindings, functionCallback, stringCallback) {
      if (!entity || !bindings) { return; }
  
      // allow the bindings to be a function
      if (_.isFunction(bindings)) {
        bindings = bindings.call(target);
      }
  
      // iterate the bindings and bind them
      _.each(bindings, function(methods, evt) {
  
        // allow for a function as the handler,
        // or a list of event names as a string
        if (_.isFunction(methods)) {
          functionCallback(target, entity, evt, methods);
        } else {
          stringCallback(target, entity, evt, methods);
        }
  
      });
    }
  
    // Export Public API
    Marionette.bindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, bindToFunction, bindFromStrings);
    };
  
    Marionette.unbindEntityEvents = function(target, entity, bindings) {
      iterateEvents(target, entity, bindings, unbindToFunction, unbindFromStrings);
    };
  
    // Proxy `bindEntityEvents`
    Marionette.proxyBindEntityEvents = function(entity, bindings) {
      return Marionette.bindEntityEvents(this, entity, bindings);
    };
  
    // Proxy `unbindEntityEvents`
    Marionette.proxyUnbindEntityEvents = function(entity, bindings) {
      return Marionette.unbindEntityEvents(this, entity, bindings);
    };
  })(Marionette);
  

  // Callbacks
  // ---------
  
  // A simple way of managing a collection of callbacks
  // and executing them at a later point in time, using jQuery's
  // `Deferred` object.
  Marionette.Callbacks = function() {
    this._deferred = Marionette.Deferred();
    this._callbacks = [];
  };
  
  _.extend(Marionette.Callbacks.prototype, {
  
    // Add a callback to be executed. Callbacks added here are
    // guaranteed to execute, even if they are added after the
    // `run` method is called.
    add: function(callback, contextOverride) {
      var promise = _.result(this._deferred, 'promise');
  
      this._callbacks.push({cb: callback, ctx: contextOverride});
  
      promise.then(function(args) {
        if (contextOverride){ args.context = contextOverride; }
        callback.call(args.context, args.options);
      });
    },
  
    // Run all registered callbacks with the context specified.
    // Additional callbacks can be added after this has been run
    // and they will still be executed.
    run: function(options, context) {
      this._deferred.resolve({
        options: options,
        context: context
      });
    },
  
    // Resets the list of callbacks to be run, allowing the same list
    // to be run multiple times - whenever the `run` method is called.
    reset: function() {
      var callbacks = this._callbacks;
      this._deferred = Marionette.Deferred();
      this._callbacks = [];
  
      _.each(callbacks, function(cb) {
        this.add(cb.cb, cb.ctx);
      }, this);
    }
  });
  
  // Marionette Controller
  // ---------------------
  //
  // A multi-purpose object to use as a controller for
  // modules and routers, and as a mediator for workflow
  // and coordination of other objects, views, and more.
  Marionette.Controller = function(options) {
    this.triggerMethod = Marionette.triggerMethod;
    this.options = options || {};
  
    if (_.isFunction(this.initialize)) {
      this.initialize(this.options);
    }
  };
  
  Marionette.Controller.extend = Marionette.extend;
  
  // Controller Methods
  // --------------
  
  // Ensure it can trigger events with Backbone.Events
  _.extend(Marionette.Controller.prototype, Backbone.Events, {
    destroy: function() {
      var args = Array.prototype.slice.call(arguments);
      this.triggerMethod.apply(this, ['before:destroy'].concat(args));
      this.triggerMethod.apply(this, ['destroy'].concat(args));
  
      this.stopListening();
      this.off();
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption
  
  });
  
  /* jshint maxcomplexity: 10, maxstatements: 27 */
  
  // Region
  // ------
  //
  // Manage the visual regions of your composite application. See
  // http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/
  
  Marionette.Region = function(options) {
    this.options = options || {};
    this.el = this.getOption('el');
  
    // Handle when this.el is passed in as a $ wrapped element.
    this.el = this.el instanceof Backbone.$ ? this.el[0] : this.el;
  
    if (!this.el) {
      throwError('An "el" must be specified for a region.', 'NoElError');
    }
  
    this.$el = this.getEl(this.el);
  
    if (this.initialize) {
      var args = Array.prototype.slice.apply(arguments);
      this.initialize.apply(this, args);
    }
  };
  
  
  // Region Class methods
  // -------------------
  
  _.extend(Marionette.Region, {
  
    // Build an instance of a region by passing in a configuration object
    // and a default region class to use if none is specified in the config.
    //
    // The config object should either be a string as a jQuery DOM selector,
    // a Region class directly, or an object literal that specifies both
    // a selector and regionClass:
    //
    // ```js
    // {
    //   selector: "#foo",
    //   regionClass: MyCustomRegion
    // }
    // ```
    //
    buildRegion: function(regionConfig, defaultRegionClass) {
      var regionIsString = _.isString(regionConfig);
      var regionSelectorIsString = _.isString(regionConfig.selector);
      var regionClassIsUndefined = _.isUndefined(regionConfig.regionClass);
      var regionIsClass = _.isFunction(regionConfig);
  
      if (!regionIsClass && !regionIsString && !regionSelectorIsString) {
        throwError('Region must be specified as a Region class,' +
          'a selector string or an object with selector property');
      }
  
      var selector, RegionClass;
  
      // get the selector for the region
  
      if (regionIsString) {
        selector = regionConfig;
      }
  
      if (regionConfig.selector) {
        selector = regionConfig.selector;
        delete regionConfig.selector;
      }
  
      // get the class for the region
  
      if (regionIsClass) {
        RegionClass = regionConfig;
      }
  
      if (!regionIsClass && regionClassIsUndefined) {
        RegionClass = defaultRegionClass;
      }
  
      if (regionConfig.regionClass) {
        RegionClass = regionConfig.regionClass;
        delete regionConfig.regionClass;
      }
  
      if (regionIsString || regionIsClass) {
        regionConfig = {};
      }
  
      regionConfig.el = selector;
  
      // build the region instance
      var region = new RegionClass(regionConfig);
  
      // override the `getEl` function if we have a parentEl
      // this must be overridden to ensure the selector is found
      // on the first use of the region. if we try to assign the
      // region's `el` to `parentEl.find(selector)` in the object
      // literal to build the region, the element will not be
      // guaranteed to be in the DOM already, and will cause problems
      if (regionConfig.parentEl) {
        region.getEl = function(el) {
          if (_.isObject(el)) {
            return Backbone.$(el);
          }
          var parentEl = regionConfig.parentEl;
          if (_.isFunction(parentEl)) {
            parentEl = parentEl();
          }
          return parentEl.find(el);
        };
      }
  
      return region;
    }
  
  });
  
  // Region Instance Methods
  // -----------------------
  
  _.extend(Marionette.Region.prototype, Backbone.Events, {
  
    // Displays a backbone view instance inside of the region.
    // Handles calling the `render` method for you. Reads content
    // directly from the `el` attribute. Also calls an optional
    // `onShow` and `onDestroy` method on your view, just after showing
    // or just before destroying the view, respectively.
    // The `preventDestroy` option can be used to prevent a view from
    // the old view being destroyed on show.
    // The `forceShow` option can be used to force a view to be
    // re-rendered if it's already shown in the region.
  
    show: function(view, options){
      this._ensureElement();
  
      var showOptions = options || {};
      var isDifferentView = view !== this.currentView;
      var preventDestroy =  !!showOptions.preventDestroy;
      var forceShow = !!showOptions.forceShow;
  
      // we are only changing the view if there is a view to change to begin with
      var isChangingView = !!this.currentView;
  
      // only destroy the view if we don't want to preventDestroy and the view is different
      var _shouldDestroyView = !preventDestroy && isDifferentView;
  
      if (_shouldDestroyView) {
        this.empty();
      }
  
      // show the view if the view is different or if you want to re-show the view
      var _shouldShowView = isDifferentView || forceShow;
  
      if (_shouldShowView) {
        view.render();
  
        if (isChangingView) {
          this.triggerMethod('before:swap', view);
        }
  
        this.triggerMethod('before:show', view);
        this.triggerMethod.call(view, 'before:show');
  
        this.attachHtml(view);
        this.currentView = view;
  
        if (isChangingView) {
          this.triggerMethod('swap', view);
        }
  
        this.triggerMethod('show', view);
  
        if (_.isFunction(view.triggerMethod)) {
          view.triggerMethod('show');
        } else {
          this.triggerMethod.call(view, 'show');
        }
  
        return this;
      }
  
      return this;
    },
  
    _ensureElement: function(){
      if (!_.isObject(this.el)) {
        this.$el = this.getEl(this.el);
        this.el = this.$el[0];
      }
  
      if (!this.$el || this.$el.length === 0) {
        throwError('An "el" ' + this.$el.selector + ' must exist in DOM');
      }
    },
  
    // Override this method to change how the region finds the
    // DOM element that it manages. Return a jQuery selector object.
    getEl: function(el) {
      return Backbone.$(el);
    },
  
    // Override this method to change how the new view is
    // appended to the `$el` that the region is managing
    attachHtml: function(view) {
      // empty the node and append new view
      this.el.innerHTML='';
      this.el.appendChild(view.el);
    },
  
    // Destroy the current view, if there is one. If there is no
    // current view, it does nothing and returns immediately.
    empty: function() {
      var view = this.currentView;
      if (!view || view.isDestroyed) { return; }
  
      this.triggerMethod('before:empty', view);
  
      // call 'destroy' or 'remove', depending on which is found
      if (view.destroy) { view.destroy(); }
      else if (view.remove) { view.remove(); }
  
      this.triggerMethod('empty', view);
  
      delete this.currentView;
    },
  
    // Attach an existing view to the region. This
    // will not call `render` or `onShow` for the new view,
    // and will not replace the current HTML for the `el`
    // of the region.
    attachView: function(view) {
      this.currentView = view;
    },
  
    // Reset the region by destroying any existing view and
    // clearing out the cached `$el`. The next time a view
    // is shown via this region, the region will re-query the
    // DOM for the region's `el`.
    reset: function() {
      this.empty();
  
      if (this.$el) {
        this.el = this.$el.selector;
      }
  
      delete this.$el;
    },
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod
  });
  
  // Copy the `extend` function used by Backbone's classes
  Marionette.Region.extend = Marionette.extend;
  
  // Marionette.RegionManager
  // ------------------------
  //
  // Manage one or more related `Marionette.Region` objects.
  Marionette.RegionManager = (function(Marionette) {
  
    var RegionManager = Marionette.Controller.extend({
      constructor: function(options) {
        this._regions = {};
        Marionette.Controller.call(this, options);
      },
  
      // Add multiple regions using an object literal, where
      // each key becomes the region name, and each value is
      // the region definition.
      addRegions: function(regionDefinitions, defaults) {
        var regions = {};
  
        _.each(regionDefinitions, function(definition, name) {
          if (_.isString(definition)) {
            definition = {selector: definition};
          }
  
          if (definition.selector) {
            definition = _.defaults({}, definition, defaults);
          }
  
          var region = this.addRegion(name, definition);
          regions[name] = region;
        }, this);
  
        return regions;
      },
  
      // Add an individual region to the region manager,
      // and return the region instance
      addRegion: function(name, definition) {
        var region;
  
        var isObject = _.isObject(definition);
        var isString = _.isString(definition);
        var hasSelector = !!definition.selector;
  
        if (isString || (isObject && hasSelector)) {
          region = Marionette.Region.buildRegion(definition, Marionette.Region);
        } else if (_.isFunction(definition)) {
          region = Marionette.Region.buildRegion(definition, Marionette.Region);
        } else {
          region = definition;
        }
  
        this.triggerMethod('before:add:region', name, region);
  
        this._store(name, region);
  
        this.triggerMethod('add:region', name, region);
        return region;
      },
  
      // Get a region by name
      get: function(name) {
        return this._regions[name];
      },
  
      // Gets all the regions contained within
      // the `regionManager` instance.
      getRegions: function(){
        return _.clone(this._regions);
      },
  
      // Remove a region by name
      removeRegion: function(name) {
        var region = this._regions[name];
        this._remove(name, region);
      },
  
      // Empty all regions in the region manager, and
      // remove them
      removeRegions: function() {
        _.each(this._regions, function(region, name) {
          this._remove(name, region);
        }, this);
      },
  
      // Empty all regions in the region manager, but
      // leave them attached
      emptyRegions: function() {
        _.each(this._regions, function(region) {
          region.empty();
        }, this);
      },
  
      // Destroy all regions and shut down the region
      // manager entirely
      destroy: function() {
        this.removeRegions();
        Marionette.Controller.prototype.destroy.apply(this, arguments);
      },
  
      // internal method to store regions
      _store: function(name, region) {
        this._regions[name] = region;
        this._setLength();
      },
  
      // internal method to remove a region
      _remove: function(name, region) {
        this.triggerMethod('before:remove:region', name, region);
        region.empty();
        region.stopListening();
        delete this._regions[name];
        this._setLength();
        this.triggerMethod('remove:region', name, region);
      },
  
      // set the number of regions current held
      _setLength: function() {
        this.length = _.size(this._regions);
      }
  
    });
  
    Marionette.actAsCollection(RegionManager.prototype, '_regions');
  
    return RegionManager;
  })(Marionette);
  

  // Template Cache
  // --------------
  
  // Manage templates stored in `<script>` blocks,
  // caching them for faster access.
  Marionette.TemplateCache = function(templateId) {
    this.templateId = templateId;
  };
  
  // TemplateCache object-level methods. Manage the template
  // caches from these method calls instead of creating
  // your own TemplateCache instances
  _.extend(Marionette.TemplateCache, {
    templateCaches: {},
  
    // Get the specified template by id. Either
    // retrieves the cached version, or loads it
    // from the DOM.
    get: function(templateId) {
      var cachedTemplate = this.templateCaches[templateId];
  
      if (!cachedTemplate) {
        cachedTemplate = new Marionette.TemplateCache(templateId);
        this.templateCaches[templateId] = cachedTemplate;
      }
  
      return cachedTemplate.load();
    },
  
    // Clear templates from the cache. If no arguments
    // are specified, clears all templates:
    // `clear()`
    //
    // If arguments are specified, clears each of the
    // specified templates from the cache:
    // `clear("#t1", "#t2", "...")`
    clear: function() {
      var i;
      var args = slice.call(arguments);
      var length = args.length;
  
      if (length > 0) {
        for (i = 0; i < length; i++) {
          delete this.templateCaches[args[i]];
        }
      } else {
        this.templateCaches = {};
      }
    }
  });
  
  // TemplateCache instance methods, allowing each
  // template cache object to manage its own state
  // and know whether or not it has been loaded
  _.extend(Marionette.TemplateCache.prototype, {
  
    // Internal method to load the template
    load: function() {
      // Guard clause to prevent loading this template more than once
      if (this.compiledTemplate) {
        return this.compiledTemplate;
      }
  
      // Load the template and compile it
      var template = this.loadTemplate(this.templateId);
      this.compiledTemplate = this.compileTemplate(template);
  
      return this.compiledTemplate;
    },
  
    // Load a template from the DOM, by default. Override
    // this method to provide your own template retrieval
    // For asynchronous loading with AMD/RequireJS, consider
    // using a template-loader plugin as described here:
    // https://github.com/marionettejs/backbone.marionette/wiki/Using-marionette-with-requirejs
    loadTemplate: function(templateId) {
      var template = Backbone.$(templateId).html();
  
      if (!template || template.length === 0) {
        throwError('Could not find template: "' + templateId + '"', 'NoTemplateError');
      }
  
      return template;
    },
  
    // Pre-compile the template before caching it. Override
    // this method if you do not need to pre-compile a template
    // (JST / RequireJS for example) or if you want to change
    // the template engine used (Handebars, etc).
    compileTemplate: function(rawTemplate) {
      return _.template(rawTemplate);
    }
  });
  
  // Renderer
  // --------
  
  // Render a template with data by passing in the template
  // selector and the data to render.
  Marionette.Renderer = {
  
    // Render a template with data. The `template` parameter is
    // passed to the `TemplateCache` object to retrieve the
    // template function. Override this method to provide your own
    // custom rendering and template handling for all of Marionette.
    render: function(template, data) {
      if (!template) {
        throwError('Cannot render the template since its false, null or undefined.',
          'TemplateNotFoundError');
      }
  
      var templateFunc;
      if (typeof template === 'function') {
        templateFunc = template;
      } else {
        templateFunc = Marionette.TemplateCache.get(template);
      }
  
      return templateFunc(data);
    }
  };
  

  /* jshint maxlen: 114, nonew: false */
  // Marionette.View
  // ---------------
  
  // The core view class that other Marionette views extend from.
  Marionette.View = Backbone.View.extend({
  
    constructor: function(options) {
      _.bindAll(this, 'render');
  
      // this exposes view options to the view initializer
      // this is a backfill since backbone removed the assignment
      // of this.options
      // at some point however this may be removed
      this.options = _.extend({}, _.result(this, 'options'), _.isFunction(options) ? options.call(this) : options);
      // parses out the @ui DSL for events
      this.events = this.normalizeUIKeys(_.result(this, 'events'));
  
      if (_.isObject(this.behaviors)) {
        new Marionette.Behaviors(this);
      }
  
      Backbone.View.apply(this, arguments);
  
      Marionette.MonitorDOMRefresh(this);
      this.listenTo(this, 'show', this.onShowCalled);
    },
  
    // Get the template for this view
    // instance. You can set a `template` attribute in the view
    // definition or pass a `template: "whatever"` parameter in
    // to the constructor options.
    getTemplate: function() {
      return this.getOption('template');
    },
  
    // Mix in template helper methods. Looks for a
    // `templateHelpers` attribute, which can either be an
    // object literal, or a function that returns an object
    // literal. All methods and attributes from this object
    // are copies to the object passed in.
    mixinTemplateHelpers: function(target) {
      target = target || {};
      var templateHelpers = this.getOption('templateHelpers');
      if (_.isFunction(templateHelpers)) {
        templateHelpers = templateHelpers.call(this);
      }
      return _.extend(target, templateHelpers);
    },
  
  
    normalizeUIKeys: function(hash) {
      var ui = _.result(this, 'ui');
      var uiBindings = _.result(this, '_uiBindings');
      return Marionette.normalizeUIKeys(hash, uiBindings || ui);
    },
  
    // Configure `triggers` to forward DOM events to view
    // events. `triggers: {"click .foo": "do:foo"}`
    configureTriggers: function() {
      if (!this.triggers) { return; }
  
      var triggerEvents = {};
  
      // Allow `triggers` to be configured as a function
      var triggers = this.normalizeUIKeys(_.result(this, 'triggers'));
  
      // Configure the triggers, prevent default
      // action and stop propagation of DOM events
      _.each(triggers, function(value, key) {
  
        var hasOptions = _.isObject(value);
        var eventName = hasOptions ? value.event : value;
  
        // build the event handler function for the DOM event
        triggerEvents[key] = function(e) {
  
          // stop the event in its tracks
          if (e) {
            var prevent = e.preventDefault;
            var stop = e.stopPropagation;
  
            var shouldPrevent = hasOptions ? value.preventDefault : prevent;
            var shouldStop = hasOptions ? value.stopPropagation : stop;
  
            if (shouldPrevent && prevent) { prevent.apply(e); }
            if (shouldStop && stop) { stop.apply(e); }
          }
  
          // build the args for the event
          var args = {
            view: this,
            model: this.model,
            collection: this.collection
          };
  
          // trigger the event
          this.triggerMethod(eventName, args);
        };
  
      }, this);
  
      return triggerEvents;
    },
  
    // Overriding Backbone.View's delegateEvents to handle
    // the `triggers`, `modelEvents`, and `collectionEvents` configuration
    delegateEvents: function(events) {
      this._delegateDOMEvents(events);
      this.bindEntityEvents(this.model, this.getOption('modelEvents'));
      this.bindEntityEvents(this.collection, this.getOption('collectionEvents'));
    },
  
    // internal method to delegate DOM events and triggers
    _delegateDOMEvents: function(events) {
      events = events || this.events;
      if (_.isFunction(events)) { events = events.call(this); }
  
      // normalize ui keys
      events = this.normalizeUIKeys(events);
  
      var combinedEvents = {};
  
      // look up if this view has behavior events
      var behaviorEvents = _.result(this, 'behaviorEvents') || {};
      var triggers = this.configureTriggers();
  
      // behavior events will be overriden by view events and or triggers
      _.extend(combinedEvents, behaviorEvents, events, triggers);
  
      Backbone.View.prototype.delegateEvents.call(this, combinedEvents);
    },
  
    // Overriding Backbone.View's undelegateEvents to handle unbinding
    // the `triggers`, `modelEvents`, and `collectionEvents` config
    undelegateEvents: function() {
      var args = Array.prototype.slice.call(arguments);
      Backbone.View.prototype.undelegateEvents.apply(this, args);
      this.unbindEntityEvents(this.model, this.getOption('modelEvents'));
      this.unbindEntityEvents(this.collection, this.getOption('collectionEvents'));
    },
  
    // Internal method, handles the `show` event.
    onShowCalled: function() {},
  
    // Internal helper method to verify whether the view hasn't been destroyed
    _ensureViewIsIntact: function() {
      if (this.isDestroyed) {
        var err = new Error('Cannot use a view thats already been destroyed.');
        err.name = 'ViewDestroyedError';
        throw err;
      }
    },
  
    // Default `destroy` implementation, for removing a view from the
    // DOM and unbinding it. Regions will call this method
    // for you. You can specify an `onDestroy` method in your view to
    // add custom code that is called after the view is destroyed.
    destroy: function() {
      if (this.isDestroyed) { return; }
  
      var args = Array.prototype.slice.call(arguments);
  
      this.triggerMethod.apply(this, ['before:destroy'].concat(args));
  
      // mark as destroyed before doing the actual destroy, to
      // prevent infinite loops within "destroy" event handlers
      // that are trying to destroy other views
      this.isDestroyed = true;
      this.triggerMethod.apply(this, ['destroy'].concat(args));
  
      // unbind UI elements
      this.unbindUIElements();
  
      // remove the view from the DOM
      this.remove();
    },
  
    // This method binds the elements specified in the "ui" hash inside the view's code with
    // the associated jQuery selectors.
    bindUIElements: function() {
      if (!this.ui) { return; }
  
      // store the ui hash in _uiBindings so they can be reset later
      // and so re-rendering the view will be able to find the bindings
      if (!this._uiBindings) {
        this._uiBindings = this.ui;
      }
  
      // get the bindings result, as a function or otherwise
      var bindings = _.result(this, '_uiBindings');
  
      // empty the ui so we don't have anything to start with
      this.ui = {};
  
      // bind each of the selectors
      _.each(_.keys(bindings), function(key) {
        var selector = bindings[key];
        this.ui[key] = this.$(selector);
      }, this);
    },
  
    // This method unbinds the elements specified in the "ui" hash
    unbindUIElements: function() {
      if (!this.ui || !this._uiBindings) { return; }
  
      // delete all of the existing ui bindings
      _.each(this.ui, function($el, name) {
        delete this.ui[name];
      }, this);
  
      // reset the ui element to the original bindings configuration
      this.ui = this._uiBindings;
      delete this._uiBindings;
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod,
  
    // Imports the "normalizeMethods" to transform hashes of
    // events=>function references/names to a hash of events=>function references
    normalizeMethods: Marionette.normalizeMethods,
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption,
  
    // Proxy `unbindEntityEvents` to enable binding view's events from another entity.
    bindEntityEvents: Marionette.proxyBindEntityEvents,
  
    // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
    unbindEntityEvents: Marionette.proxyUnbindEntityEvents
  });
  
  // Item View
  // ---------
  
  // A single item view implementation that contains code for rendering
  // with underscore.js templates, serializing the view's model or collection,
  // and calling several methods on extended views, such as `onRender`.
  Marionette.ItemView = Marionette.View.extend({
  
    // Setting up the inheritance chain which allows changes to
    // Marionette.View.prototype.constructor which allows overriding
    constructor: function() {
      Marionette.View.apply(this, arguments);
    },
  
    // Serialize the model or collection for the view. If a model is
    // found, `.toJSON()` is called. If a collection is found, `.toJSON()`
    // is also called, but is used to populate an `items` array in the
    // resulting data. If both are found, defaults to the model.
    // You can override the `serializeData` method in your own view
    // definition, to provide custom serialization for your view's data.
    serializeData: function() {
      var data = {};
  
      if (this.model) {
        data = this.model.toJSON();
      }
      else if (this.collection) {
        data = {items: this.collection.toJSON()};
      }
  
      return data;
    },
  
    // Render the view, defaulting to underscore.js templates.
    // You can override this in your view definition to provide
    // a very specific rendering for your view. In general, though,
    // you should override the `Marionette.Renderer` object to
    // change how Marionette renders views.
    render: function() {
      this._ensureViewIsIntact();
  
      this.triggerMethod('before:render', this);
  
      var data = this.serializeData();
      data = this.mixinTemplateHelpers(data);
  
      var template = this.getTemplate();
      var html = Marionette.Renderer.render(template, data);
      this.attachElContent(html);
      this.bindUIElements();
  
      this.triggerMethod('render', this);
  
      return this;
    },
  
    // Attaches the content of a given view.
    // This method can be overriden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);
  
      return this;
    },
  
    // Override the default destroy event to add a few
    // more events that are triggered.
    destroy: function() {
      if (this.isDestroyed) { return; }
  
      Marionette.View.prototype.destroy.apply(this, arguments);
    }
  });
  
  /* jshint maxstatements: 14 */
  
  // Collection View
  // ---------------
  
  // A view that iterates over a Backbone.Collection
  // and renders an individual child view for each model.
  Marionette.CollectionView = Marionette.View.extend({
  
    // used as the prefix for child view events
    // that are forwarded through the collectionview
    childViewEventPrefix: 'childview',
  
    // constructor
    // option to pass `{sort: false}` to prevent the `CollectionView` from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    constructor: function(options){
      var initOptions = options || {};
      this.sort = _.isUndefined(initOptions.sort) ? true : initOptions.sort;
  
      this._initChildViewStorage();
  
      Marionette.View.apply(this, arguments);
  
      this._initialEvents();
      this.initRenderBuffer();
    },
  
    // Instead of inserting elements one by one into the page,
    // it's much more performant to insert elements into a document
    // fragment and then insert that document fragment into the page
    initRenderBuffer: function() {
      this.elBuffer = document.createDocumentFragment();
      this._bufferedChildren = [];
    },
  
    startBuffering: function() {
      this.initRenderBuffer();
      this.isBuffering = true;
    },
  
    endBuffering: function() {
      this.isBuffering = false;
      this._triggerBeforeShowBufferedChildren();
      this.attachBuffer(this, this.elBuffer);
      this._triggerShowBufferedChildren();
      this.initRenderBuffer();
    },
  
    _triggerBeforeShowBufferedChildren: function() {
      if (this._isShown) {
        _.invoke(this._bufferedChildren, 'triggerMethod', 'before:show');
      }
    },
  
    _triggerShowBufferedChildren: function() {
      if (this._isShown) {
        _.each(this._bufferedChildren, function (child) {
          if (_.isFunction(child.triggerMethod)) {
            child.triggerMethod('show');
          } else {
            Marionette.triggerMethod.call(child, 'show');
          }
        });
        this._bufferedChildren = [];
      }
    },
  
    // Configured the initial events that the collection view
    // binds to.
    _initialEvents: function() {
      if (this.collection) {
        this.listenTo(this.collection, 'add', this._onCollectionAdd);
        this.listenTo(this.collection, 'remove', this._onCollectionRemove);
        this.listenTo(this.collection, 'reset', this.render);
  
        if (this.sort) {
          this.listenTo(this.collection, 'sort', this._sortViews);
        }
      }
    },
  
    // Handle a child added to the collection
    _onCollectionAdd: function(child, collection, options) {
      this.destroyEmptyView();
      var ChildView = this.getChildView(child);
      var index = this.collection.indexOf(child);
      this.addChild(child, ChildView, index);
    },
  
    // get the child view by model it holds, and remove it
    _onCollectionRemove: function(model) {
      var view = this.children.findByModel(model);
      this.removeChildView(view);
      this.checkEmpty();
    },
  
    // Override from `Marionette.View` to trigger show on child views
    onShowCalled: function(){
      this.children.each(function(child){
        if (_.isFunction(child.triggerMethod)) {
          child.triggerMethod('show');
        } else {
          Marionette.triggerMethod.call(child, 'show');
        }
      });
    },
  
    // Render children views. Override this method to
    // provide your own implementation of a render function for
    // the collection view.
    render: function() {
      this._ensureViewIsIntact();
      this.triggerMethod('before:render', this);
      this._renderChildren();
      this.triggerMethod('render', this);
      return this;
    },
  
    // Internal method. This checks for any changes in the order of the collection.
    // If the index of any view doesn't match, it will render.
    _sortViews: function(){
      // check for any changes in sort order of views
      var orderChanged = this.collection.find(function(item, index){
        var view = this.children.findByModel(item);
        return view && view._index !== index;
      }, this);
  
      if (orderChanged) {
        this.render();
      }
    },
  
    // Internal method. Separated so that CompositeView can have
    // more control over events being triggered, around the rendering
    // process
    _renderChildren: function() {
      this.startBuffering();
  
      this.destroyEmptyView();
      this.destroyChildren();
  
      if (!this.isEmpty(this.collection)) {
        this.triggerMethod('before:render:collection', this);
        this.showCollection();
        this.triggerMethod('render:collection', this);
      } else {
        this.showEmptyView();
      }
  
      this.endBuffering();
    },
  
    // Internal method to loop through collection and show each child view.
    showCollection: function() {
      var ChildView;
      this.collection.each(function(child, index) {
        ChildView = this.getChildView(child);
        this.addChild(child, ChildView, index);
      }, this);
    },
  
    // Internal method to show an empty view in place of
    // a collection of child views, when the collection is empty
    showEmptyView: function() {
      var EmptyView = this.getEmptyView();
  
      if (EmptyView && !this._showingEmptyView) {
        this.triggerMethod('before:render:empty');
  
        this._showingEmptyView = true;
        var model = new Backbone.Model();
        this.addEmptyView(model, EmptyView);
  
        this.triggerMethod('render:empty');
      }
    },
  
    // Internal method to destroy an existing emptyView instance
    // if one exists. Called when a collection view has been
    // rendered empty, and then a child is added to the collection.
    destroyEmptyView: function() {
      if (this._showingEmptyView) {
        this.destroyChildren();
        delete this._showingEmptyView;
      }
    },
  
    // Retrieve the empty view class
    getEmptyView: function() {
      return this.getOption('emptyView');
    },
  
    // Render and show the emptyView. Similar to addChild method
    // but "child:added" events are not fired, and the event from
    // emptyView are not forwarded
    addEmptyView: function(child, EmptyView){
  
      // get the emptyViewOptions, falling back to childViewOptions
      var emptyViewOptions = this.getOption('emptyViewOptions') ||
                            this.getOption('childViewOptions');
  
      if (_.isFunction(emptyViewOptions)){
        emptyViewOptions = emptyViewOptions.call(this);
      }
  
      // build the empty view
      var view = this.buildChildView(child, EmptyView, emptyViewOptions);
  
      // trigger the 'before:show' event on `view` if the collection view
      // has already been shown
      if (this._isShown){
        this.triggerMethod.call(view, 'before:show');
      }
  
      // Store the `emptyView` like a `childView` so we can properly
      // remove and/or close it later
      this.children.add(view);
  
      // Render it and show it
      this.renderChildView(view, -1);
  
      // call the 'show' method if the collection view
      // has already been shown
      if (this._isShown){
        this.triggerMethod.call(view, 'show');
      }
    },
  
    // Retrieve the childView class, either from `this.options.childView`
    // or from the `childView` in the object definition. The "options"
    // takes precedence.
    getChildView: function(child) {
      var childView = this.getOption('childView');
  
      if (!childView) {
        throwError('A "childView" must be specified', 'NoChildViewError');
      }
  
      return childView;
    },
  
    // Render the child's view and add it to the
    // HTML for the collection view at a given index.
    // This will also update the indices of later views in the collection
    // in order to keep the children in sync with the collection.
    addChild: function(child, ChildView, index) {
      var childViewOptions = this.getOption('childViewOptions');
      if (_.isFunction(childViewOptions)) {
        childViewOptions = childViewOptions.call(this, child, index);
      }
  
      var view = this.buildChildView(child, ChildView, childViewOptions);
  
      // increment indices of views after this one
      this._updateIndices(view, true, index);
  
      this._addChildView(view, index);
  
      return view;
    },
  
    // Internal method. This decrements or increments the indices of views after the
    // added/removed view to keep in sync with the collection.
    _updateIndices: function(view, increment, index) {
      if (!this.sort) {
        return;
      }
  
      if (increment) {
        // assign the index to the view
        view._index = index;
  
        // increment the index of views after this one
        this.children.each(function (laterView) {
          if (laterView._index >= view._index) {
            laterView._index++;
          }
        });
      }
      else {
        // decrement the index of views after this one
        this.children.each(function (laterView) {
          if (laterView._index >= view._index) {
            laterView._index--;
          }
        });
      }
    },
  
  
    // Internal Method. Add the view to children and render it at
    // the given index.
    _addChildView: function(view, index) {
      // set up the child view event forwarding
      this.proxyChildEvents(view);
  
      this.triggerMethod('before:add:child', view);
  
      // Store the child view itself so we can properly
      // remove and/or destroy it later
      this.children.add(view);
      this.renderChildView(view, index);
  
      if (this._isShown && !this.isBuffering){
        if (_.isFunction(view.triggerMethod)) {
          view.triggerMethod('show');
        } else {
          Marionette.triggerMethod.call(view, 'show');
        }
      }
  
      this.triggerMethod('add:child', view);
    },
  
    // render the child view
    renderChildView: function(view, index) {
      view.render();
      this.attachHtml(this, view, index);
    },
  
    // Build a `childView` for a model in the collection.
    buildChildView: function(child, ChildViewClass, childViewOptions) {
      var options = _.extend({model: child}, childViewOptions);
      return new ChildViewClass(options);
    },
  
    // Remove the child view and destroy it.
    // This function also updates the indices of
    // later views in the collection in order to keep
    // the children in sync with the collection.
    removeChildView: function(view) {
  
      if (view) {
        this.triggerMethod('before:remove:child', view);
        // call 'destroy' or 'remove', depending on which is found
        if (view.destroy) { view.destroy(); }
        else if (view.remove) { view.remove(); }
  
        this.stopListening(view);
        this.children.remove(view);
        this.triggerMethod('remove:child', view);
  
        // decrement the index of views after this one
        this._updateIndices(view, false);
      }
  
    },
  
    // check if the collection is empty
    isEmpty: function(collection) {
      return !this.collection || this.collection.length === 0;
    },
  
    // If empty, show the empty view
    checkEmpty: function() {
      if (this.isEmpty(this.collection)) {
        this.showEmptyView();
      }
    },
  
    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(collectionView, buffer) {
      collectionView.$el.append(buffer);
    },
  
    // Append the HTML to the collection's `el`.
    // Override this method to do something other
    // than `.append`.
    attachHtml: function(collectionView, childView, index) {
      if (collectionView.isBuffering) {
        // buffering happens on reset events and initial renders
        // in order to reduce the number of inserts into the
        // document, which are expensive.
        collectionView.elBuffer.appendChild(childView.el);
        collectionView._bufferedChildren.push(childView);
      }
      else {
        // If we've already rendered the main collection, append
        // the new child into the correct order if we need to. Otherwise
        // append to the end.
        if (!collectionView._insertBefore(childView, index)){
          collectionView._insertAfter(childView);
        }
      }
    },
  
    // Internal method. Check whether we need to insert the view into
    // the correct position.
    _insertBefore: function(childView, index) {
      var currentView;
      var findPosition = this.sort && (index < this.children.length - 1);
      if (findPosition) {
        // Find the view after this one
        currentView = this.children.find(function (view) {
          return view._index === index + 1;
        });
      }
  
      if (currentView) {
        currentView.$el.before(childView.el);
        return true;
      }
  
      return false;
    },
  
    // Internal method. Append a view to the end of the $el
    _insertAfter: function(childView) {
      this.$el.append(childView.el);
    },
  
    // Internal method to set up the `children` object for
    // storing all of the child views
    _initChildViewStorage: function() {
      this.children = new Backbone.ChildViewContainer();
    },
  
    // Handle cleanup and other destroying needs for the collection of views
    destroy: function() {
      if (this.isDestroyed) { return; }
  
      this.triggerMethod('before:destroy:collection');
      this.destroyChildren();
      this.triggerMethod('destroy:collection');
  
      Marionette.View.prototype.destroy.apply(this, arguments);
    },
  
    // Destroy the child views that this collection view
    // is holding on to, if any
    destroyChildren: function() {
      this.children.each(this.removeChildView, this);
      this.checkEmpty();
    },
  
    // Set up the child view event forwarding. Uses a "childview:"
    // prefix in front of all forwarded events.
    proxyChildEvents: function(view) {
      var prefix = this.getOption('childViewEventPrefix');
  
      // Forward all child view events through the parent,
      // prepending "childview:" to the event name
      this.listenTo(view, 'all', function() {
        var args = Array.prototype.slice.call(arguments);
        var rootEvent = args[0];
        var childEvents = this.normalizeMethods(_.result(this, 'childEvents'));
  
        args[0] = prefix + ':' + rootEvent;
        args.splice(1, 0, view);
  
        // call collectionView childEvent if defined
        if (typeof childEvents !== 'undefined' && _.isFunction(childEvents[rootEvent])) {
          childEvents[rootEvent].apply(this, args.slice(1));
        }
  
        this.triggerMethod.apply(this, args);
      }, this);
    }
  });
  
  /* jshint maxstatements: 17, maxlen: 117 */
  
  // Composite View
  // --------------
  
  // Used for rendering a branch-leaf, hierarchical structure.
  // Extends directly from CollectionView and also renders an
  // a child view as `modelView`, for the top leaf
  Marionette.CompositeView = Marionette.CollectionView.extend({
  
    // Setting up the inheritance chain which allows changes to
    // Marionette.CollectionView.prototype.constructor which allows overriding
    // option to pass '{sort: false}' to prevent the CompositeView from
    // maintaining the sorted order of the collection.
    // This will fallback onto appending childView's to the end.
    constructor: function() {
      Marionette.CollectionView.apply(this, arguments);
    },
  
    // Configured the initial events that the composite view
    // binds to. Override this method to prevent the initial
    // events, or to add your own initial events.
    _initialEvents: function() {
  
      // Bind only after composite view is rendered to avoid adding child views
      // to nonexistent childViewContainer
      this.once('render', function() {
        if (this.collection) {
          this.listenTo(this.collection, 'add', this._onCollectionAdd);
          this.listenTo(this.collection, 'remove', this._onCollectionRemove);
          this.listenTo(this.collection, 'reset', this._renderChildren);
  
          if (this.sort) {
            this.listenTo(this.collection, 'sort', this._sortViews);
          }
        }
      });
  
    },
  
    // Retrieve the `childView` to be used when rendering each of
    // the items in the collection. The default is to return
    // `this.childView` or Marionette.CompositeView if no `childView`
    // has been defined
    getChildView: function(child) {
      var childView = this.getOption('childView') || this.constructor;
  
      if (!childView) {
        throwError('A "childView" must be specified', 'NoChildViewError');
      }
  
      return childView;
    },
  
    // Serialize the collection for the view.
    // You can override the `serializeData` method in your own view
    // definition, to provide custom serialization for your view's data.
    serializeData: function() {
      var data = {};
  
      if (this.model) {
        data = this.model.toJSON();
      }
  
      return data;
    },
  
    // Renders the model once, and the collection once. Calling
    // this again will tell the model's view to re-render itself
    // but the collection will not re-render.
    render: function() {
      this._ensureViewIsIntact();
      this.isRendered = true;
      this.resetChildViewContainer();
  
      this.triggerMethod('before:render', this);
  
      this._renderRoot();
      this._renderChildren();
  
      this.triggerMethod('render', this);
      return this;
    },
  
    _renderChildren: function() {
      if (this.isRendered) {
        Marionette.CollectionView.prototype._renderChildren.call(this);
      }
    },
  
    // Render the root template that the children
    // views are appended to
    _renderRoot: function() {
      var data = {};
      data = this.serializeData();
      data = this.mixinTemplateHelpers(data);
  
      this.triggerMethod('before:render:template');
  
      var template = this.getTemplate();
      var html = Marionette.Renderer.render(template, data);
      this.attachElContent(html);
  
      // the ui bindings is done here and not at the end of render since they
      // will not be available until after the model is rendered, but should be
      // available before the collection is rendered.
      this.bindUIElements();
      this.triggerMethod('render:template');
    },
  
    // Attaches the content of the root.
    // This method can be overriden to optimize rendering,
    // or to render in a non standard way.
    //
    // For example, using `innerHTML` instead of `$el.html`
    //
    // ```js
    // attachElContent: function(html) {
    //   this.el.innerHTML = html;
    //   return this;
    // }
    // ```
    attachElContent: function(html) {
      this.$el.html(html);
  
      return this;
    },
  
    // You might need to override this if you've overridden attachHtml
    attachBuffer: function(compositeView, buffer) {
      var $container = this.getChildViewContainer(compositeView);
      $container.append(buffer);
    },
  
    // Internal method. Append a view to the end of the $el.
    // Overidden from CollectionView to ensure view is appended to
    // childViewContainer
    _insertAfter: function (childView) {
      var $container = this.getChildViewContainer(this);
      $container.append(childView.el);
    },
  
    // Internal method to ensure an `$childViewContainer` exists, for the
    // `attachHtml` method to use.
    getChildViewContainer: function(containerView) {
      if ('$childViewContainer' in containerView) {
        return containerView.$childViewContainer;
      }
  
      var container;
      var childViewContainer = Marionette.getOption(containerView, 'childViewContainer');
      if (childViewContainer) {
  
        var selector = _.isFunction(childViewContainer) ? childViewContainer.call(containerView) : childViewContainer;
  
        if (selector.charAt(0) === '@' && containerView.ui) {
          container = containerView.ui[selector.substr(4)];
        } else {
          container = containerView.$(selector);
        }
  
        if (container.length <= 0) {
          throwError('The specified "childViewContainer" was not found: ' +
            containerView.childViewContainer, 'ChildViewContainerMissingError');
        }
  
      } else {
        container = containerView.$el;
      }
  
      containerView.$childViewContainer = container;
      return container;
    },
  
    // Internal method to reset the `$childViewContainer` on render
    resetChildViewContainer: function() {
      if (this.$childViewContainer) {
        delete this.$childViewContainer;
      }
    }
  });
  
  // LayoutView
  // ----------
  
  // Used for managing application layoutViews, nested layoutViews and
  // multiple regions within an application or sub-application.
  //
  // A specialized view class that renders an area of HTML and then
  // attaches `Region` instances to the specified `regions`.
  // Used for composite view management and sub-application areas.
  Marionette.LayoutView = Marionette.ItemView.extend({
    regionClass: Marionette.Region,
  
    // Ensure the regions are available when the `initialize` method
    // is called.
    constructor: function(options) {
      options = options || {};
  
      this._firstRender = true;
      this._initializeRegions(options);
  
      Marionette.ItemView.call(this, options);
    },
  
    // LayoutView's render will use the existing region objects the
    // first time it is called. Subsequent calls will destroy the
    // views that the regions are showing and then reset the `el`
    // for the regions to the newly rendered DOM elements.
    render: function() {
      this._ensureViewIsIntact();
  
      if (this._firstRender) {
        // if this is the first render, don't do anything to
        // reset the regions
        this._firstRender = false;
      } else {
        // If this is not the first render call, then we need to
        // re-initialize the `el` for each region
        this._reInitializeRegions();
      }
  
      return Marionette.ItemView.prototype.render.apply(this, arguments);
    },
  
    // Handle destroying regions, and then destroy the view itself.
    destroy: function() {
      if (this.isDestroyed) { return; }
  
      this.regionManager.destroy();
      Marionette.ItemView.prototype.destroy.apply(this, arguments);
    },
  
    // Add a single region, by name, to the layoutView
    addRegion: function(name, definition) {
      this.triggerMethod('before:region:add', name);
      var regions = {};
      regions[name] = definition;
      return this._buildRegions(regions)[name];
    },
  
    // Add multiple regions as a {name: definition, name2: def2} object literal
    addRegions: function(regions) {
      this.regions = _.extend({}, this.regions, regions);
      return this._buildRegions(regions);
    },
  
    // Remove a single region from the LayoutView, by name
    removeRegion: function(name) {
      this.triggerMethod('before:region:remove', name);
      delete this.regions[name];
      return this.regionManager.removeRegion(name);
    },
  
    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this.regionManager.get(region);
    },
  
    // Get all regions
    getRegions: function(){
      return this.regionManager.getRegions();
    },
  
    // internal method to build regions
    _buildRegions: function(regions) {
      var that = this;
  
      var defaults = {
        regionClass: this.getOption('regionClass'),
        parentEl: function() { return that.$el; }
      };
  
      return this.regionManager.addRegions(regions, defaults);
    },
  
    // Internal method to initialize the regions that have been defined in a
    // `regions` attribute on this layoutView.
    _initializeRegions: function(options) {
      var regions;
      this._initRegionManager();
  
      if (_.isFunction(this.regions)) {
        regions = this.regions(options);
      } else {
        regions = this.regions || {};
      }
  
      // Enable users to define `regions` as instance options.
      var regionOptions = this.getOption.call(options, 'regions');
  
      // enable region options to be a function
      if (_.isFunction(regionOptions)) {
        regionOptions = regionOptions.call(this, options);
      }
  
      _.extend(regions, regionOptions);
  
      this.addRegions(regions);
    },
  
    // Internal method to re-initialize all of the regions by updating the `el` that
    // they point to
    _reInitializeRegions: function() {
      this.regionManager.emptyRegions();
      this.regionManager.each(function(region) {
        region.reset();
      });
    },
  
    // Enable easy overiding of the default `RegionManager`
    // for customized region interactions and buisness specific
    // view logic for better control over single regions.
    getRegionManager: function() {
      return new Marionette.RegionManager();
    },
  
    // Internal method to initialize the region manager
    // and all regions in it
    _initRegionManager: function() {
      this.regionManager = this.getRegionManager();
  
      this.listenTo(this.regionManager, 'before:add:region', function(name) {
        this.triggerMethod('before:add:region', name);
      });
  
      this.listenTo(this.regionManager, 'add:region', function(name, region) {
        this[name] = region;
        this.triggerMethod('add:region', name, region);
      });
  
      this.listenTo(this.regionManager, 'before:remove:region', function(name) {
        this.triggerMethod('before:remove:region', name);
      });
  
      this.listenTo(this.regionManager, 'remove:region', function(name, region) {
        delete this[name];
        this.triggerMethod('remove:region', name, region);
      });
    }
  });
  

  // Behavior
  // -----------
  
  // A Behavior is an isolated set of DOM /
  // user interactions that can be mixed into any View.
  // Behaviors allow you to blackbox View specific interactions
  // into portable logical chunks, keeping your views simple and your code DRY.
  
  Marionette.Behavior = (function(_, Backbone) {
    function Behavior(options, view) {
      // Setup reference to the view.
      // this comes in handle when a behavior
      // wants to directly talk up the chain
      // to the view.
      this.view = view;
      this.defaults = _.result(this, 'defaults') || {};
      this.options  = _.extend({}, this.defaults, options);
  
      // proxy behavior $ method to the view
      // this is useful for doing jquery DOM lookups
      // scoped to behaviors view.
      this.$ = function() {
        return this.view.$.apply(this.view, arguments);
      };
  
      // Call the initialize method passing
      // the arguments from the instance constructor
      this.initialize.apply(this, arguments);
    }
  
    _.extend(Behavior.prototype, Backbone.Events, {
      initialize: function() {},
  
      // stopListening to behavior `onListen` events.
      destroy: function() {
        this.stopListening();
      },
  
      // import the `triggerMethod` to trigger events with corresponding
      // methods if the method exists
      triggerMethod: Marionette.triggerMethod,
  
      // Proxy `getOption` to enable getting options from this or this.options by name.
      getOption: Marionette.proxyGetOption,
  
      // Proxy `unbindEntityEvents` to enable binding view's events from another entity.
      bindEntityEvents: Marionette.proxyBindEntityEvents,
  
      // Proxy `unbindEntityEvents` to enable unbinding view's events from another entity.
      unbindEntityEvents: Marionette.proxyUnbindEntityEvents
    });
  
    // Borrow Backbones extend implementation
    // this allows us to setup a proper
    // inheritence pattern that follow in suite
    // with the rest of Marionette views.
    Behavior.extend = Marionette.extend;
  
    return Behavior;
  })(_, Backbone);
  
  /* jshint maxlen: 143, nonew: false */
  // Marionette.Behaviors
  // --------
  
  // Behaviors is a utility class that takes care of
  // glueing your behavior instances to their given View.
  // The most important part of this class is that you
  // **MUST** override the class level behaviorsLookup
  // method for things to work properly.
  
  Marionette.Behaviors = (function(Marionette, _) {
  
    function Behaviors(view, behaviors) {
      // Behaviors defined on a view can be a flat object literal
      // or it can be a function that returns an object.
      behaviors = Behaviors.parseBehaviors(view, behaviors || _.result(view, 'behaviors'));
  
      // Wraps several of the view's methods
      // calling the methods first on each behavior
      // and then eventually calling the method on the view.
      Behaviors.wrap(view, behaviors, [
        'bindUIElements', 'unbindUIElements',
        'delegateEvents', 'undelegateEvents',
        'behaviorEvents', 'triggerMethod',
        'setElement', 'destroy'
      ]);
    }
  
    var methods = {
      setElement: function(setElement, behaviors) {
        setElement.apply(this, _.tail(arguments, 2));
  
        // proxy behavior $el to the view's $el.
        // This is needed because a view's $el proxy
        // is not set until after setElement is called.
        _.each(behaviors, function(b) {
          b.$el = this.$el;
        }, this);
      },
  
      destroy: function(destroy, behaviors) {
        var args = _.tail(arguments, 2);
        destroy.apply(this, args);
  
        // Call destroy on each behavior after
        // destroying the view.
        // This unbinds event listeners
        // that behaviors have registerd for.
        _.invoke(behaviors, 'destroy', args);
      },
  
      bindUIElements: function(bindUIElements, behaviors) {
        bindUIElements.apply(this);
        _.invoke(behaviors, bindUIElements);
      },
  
      unbindUIElements: function(unbindUIElements, behaviors) {
        unbindUIElements.apply(this);
        _.invoke(behaviors, unbindUIElements);
      },
  
      triggerMethod: function(triggerMethod, behaviors) {
        var args = _.tail(arguments, 2);
        triggerMethod.apply(this, args);
  
        _.each(behaviors, function(b) {
          triggerMethod.apply(b, args);
        });
      },
  
      delegateEvents: function(delegateEvents, behaviors) {
        var args = _.tail(arguments, 2);
        delegateEvents.apply(this, args);
  
        _.each(behaviors, function(b) {
          Marionette.bindEntityEvents(b, this.model, Marionette.getOption(b, 'modelEvents'));
          Marionette.bindEntityEvents(b, this.collection, Marionette.getOption(b, 'collectionEvents'));
        }, this);
      },
  
      undelegateEvents: function(undelegateEvents, behaviors) {
        var args = _.tail(arguments, 2);
        undelegateEvents.apply(this, args);
  
        _.each(behaviors, function(b) {
          Marionette.unbindEntityEvents(b, this.model, Marionette.getOption(b, 'modelEvents'));
          Marionette.unbindEntityEvents(b, this.collection, Marionette.getOption(b, 'collectionEvents'));
        }, this);
      },
  
      behaviorEvents: function(behaviorEvents, behaviors) {
        var _behaviorsEvents = {};
        var viewUI = _.result(this, 'ui');
  
        _.each(behaviors, function(b, i) {
          var _events = {};
          var behaviorEvents = _.clone(_.result(b, 'events')) || {};
          var behaviorUI = _.result(b, 'ui');
  
          // Construct an internal UI hash first using
          // the views UI hash and then the behaviors UI hash.
          // This allows the user to use UI hash elements
          // defined in the parent view as well as those
          // defined in the given behavior.
          var ui = _.extend({}, viewUI, behaviorUI);
  
          // Normalize behavior events hash to allow
          // a user to use the @ui. syntax.
          behaviorEvents = Marionette.normalizeUIKeys(behaviorEvents, ui);
  
          _.each(_.keys(behaviorEvents), function(key) {
            // Append white-space at the end of each key to prevent behavior key collisions.
            // This is relying on the fact that backbone events considers "click .foo" the same as
            // "click .foo ".
  
            // +2 is used because new Array(1) or 0 is "" and not " "
            var whitespace = (new Array(i + 2)).join(' ');
            var eventKey   = key + whitespace;
            var handler    = _.isFunction(behaviorEvents[key]) ? behaviorEvents[key] : b[behaviorEvents[key]];
  
            _events[eventKey] = _.bind(handler, b);
          });
  
          _behaviorsEvents = _.extend(_behaviorsEvents, _events);
        });
  
        return _behaviorsEvents;
      }
    };
  
    _.extend(Behaviors, {
  
      // Placeholder method to be extended by the user.
      // The method should define the object that stores the behaviors.
      // i.e.
      //
      // ```js
      // Marionette.Behaviors.behaviorsLookup: function() {
      //   return App.Behaviors
      // }
      // ```
      behaviorsLookup: function() {
        throw new Error('You must define where your behaviors are stored.' +
          'See https://github.com/marionettejs/backbone.marionette' +
          '/blob/master/docs/marionette.behaviors.md#behaviorslookup');
      },
  
      // Takes care of getting the behavior class
      // given options and a key.
      // If a user passes in options.behaviorClass
      // default to using that. Otherwise delegate
      // the lookup to the users `behaviorsLookup` implementation.
      getBehaviorClass: function(options, key) {
        if (options.behaviorClass) {
          return options.behaviorClass;
        }
  
        // Get behavior class can be either a flat object or a method
        return _.isFunction(Behaviors.behaviorsLookup) ? Behaviors.behaviorsLookup.apply(this, arguments)[key] : Behaviors.behaviorsLookup[key];
      },
  
      // Iterate over the behaviors object, for each behavior
      // instantiate it and get its grouped behaviors.
      parseBehaviors: function(view, behaviors) {
        return _.chain(behaviors).map(function(options, key) {
          var BehaviorClass = Behaviors.getBehaviorClass(options, key);
  
          var behavior = new BehaviorClass(options, view);
          var nestedBehaviors = Behaviors.parseBehaviors(view, _.result(behavior, 'behaviors'));
  
          return [behavior].concat(nestedBehaviors);
        }).flatten().value();
      },
  
      // Wrap view internal methods so that they delegate to behaviors. For example,
      // `onDestroy` should trigger destroy on all of the behaviors and then destroy itself.
      // i.e.
      //
      // `view.delegateEvents = _.partial(methods.delegateEvents, view.delegateEvents, behaviors);`
      wrap: function(view, behaviors, methodNames) {
        _.each(methodNames, function(methodName) {
          view[methodName] = _.partial(methods[methodName], view[methodName], behaviors);
        });
      }
    });
  
    return Behaviors;
  
  })(Marionette, _);
  

  // AppRouter
  // ---------
  
  // Reduce the boilerplate code of handling route events
  // and then calling a single method on another object.
  // Have your routers configured to call the method on
  // your object, directly.
  //
  // Configure an AppRouter with `appRoutes`.
  //
  // App routers can only take one `controller` object.
  // It is recommended that you divide your controller
  // objects in to smaller pieces of related functionality
  // and have multiple routers / controllers, instead of
  // just one giant router and controller.
  //
  // You can also add standard routes to an AppRouter.
  
  Marionette.AppRouter = Backbone.Router.extend({
  
    constructor: function(options) {
      Backbone.Router.apply(this, arguments);
  
      this.options = options || {};
  
      var appRoutes = this.getOption('appRoutes');
      var controller = this._getController();
      this.processAppRoutes(controller, appRoutes);
      this.on('route', this._processOnRoute, this);
    },
  
    // Similar to route method on a Backbone Router but
    // method is called on the controller
    appRoute: function(route, methodName) {
      var controller = this._getController();
      this._addAppRoute(controller, route, methodName);
    },
  
    // process the route event and trigger the onRoute
    // method call, if it exists
    _processOnRoute: function(routeName, routeArgs) {
      // find the path that matched
      var routePath = _.invert(this.appRoutes)[routeName];
  
      // make sure an onRoute is there, and call it
      if (_.isFunction(this.onRoute)) {
        this.onRoute(routeName, routePath, routeArgs);
      }
    },
  
    // Internal method to process the `appRoutes` for the
    // router, and turn them in to routes that trigger the
    // specified method on the specified `controller`.
    processAppRoutes: function(controller, appRoutes) {
      if (!appRoutes) { return; }
  
      var routeNames = _.keys(appRoutes).reverse(); // Backbone requires reverted order of routes
  
      _.each(routeNames, function(route) {
        this._addAppRoute(controller, route, appRoutes[route]);
      }, this);
    },
  
    _getController: function() {
      return this.getOption('controller');
    },
  
    _addAppRoute: function(controller, route, methodName) {
      var method = controller[methodName];
  
      if (!method) {
        throwError('Method "' + methodName + '" was not found on the controller');
      }
  
      this.route(route, methodName, _.bind(method, controller));
    },
  
    // Proxy `getOption` to enable getting options from this or this.options by name.
    getOption: Marionette.proxyGetOption
  });
  
  // Application
  // -----------
  
  // Contain and manage the composite application as a whole.
  // Stores and starts up `Region` objects, includes an
  // event aggregator as `app.vent`
  Marionette.Application = function(options) {
    this._initRegionManager();
    this._initCallbacks = new Marionette.Callbacks();
    var globalCh = Backbone.Wreqr.radio.channel('global');
    this.vent = globalCh.vent;
    this.commands = globalCh.commands;
    this.reqres = globalCh.reqres;
    this.submodules = {};
  
    _.extend(this, options);
  };
  
  _.extend(Marionette.Application.prototype, Backbone.Events, {
    // Command execution, facilitated by Backbone.Wreqr.Commands
    execute: function() {
      this.commands.execute.apply(this.commands, arguments);
    },
  
    // Request/response, facilitated by Backbone.Wreqr.RequestResponse
    request: function() {
      return this.reqres.request.apply(this.reqres, arguments);
    },
  
    // Add an initializer that is either run at when the `start`
    // method is called, or run immediately if added after `start`
    // has already been called.
    addInitializer: function(initializer) {
      this._initCallbacks.add(initializer);
    },
  
    // kick off all of the application's processes.
    // initializes all of the regions that have been added
    // to the app, and runs all of the initializer functions
    start: function(options) {
      this.triggerMethod('before:start', options);
      this._initCallbacks.run(options, this);
      this.triggerMethod('start', options);
    },
  
    // Add regions to your app.
    // Accepts a hash of named strings or Region objects
    // addRegions({something: "#someRegion"})
    // addRegions({something: Region.extend({el: "#someRegion"}) });
    addRegions: function(regions) {
      return this._regionManager.addRegions(regions);
    },
  
    // Empty all regions in the app, without removing them
    emptyRegions: function() {
      this._regionManager.emptyRegions();
    },
  
    // Removes a region from your app, by name
    // Accepts the regions name
    // removeRegion('myRegion')
    removeRegion: function(region) {
      this._regionManager.removeRegion(region);
    },
  
    // Provides alternative access to regions
    // Accepts the region name
    // getRegion('main')
    getRegion: function(region) {
      return this._regionManager.get(region);
    },
  
    // Get all the regions from the region manager
    getRegions: function(){
      return this._regionManager.getRegions();
    },
  
    // Create a module, attached to the application
    module: function(moduleNames, moduleDefinition) {
  
      // Overwrite the module class if the user specifies one
      var ModuleClass = Marionette.Module.getClass(moduleDefinition);
  
      // slice the args, and add this application object as the
      // first argument of the array
      var args = slice.call(arguments);
      args.unshift(this);
  
      // see the Marionette.Module object for more information
      return ModuleClass.create.apply(ModuleClass, args);
    },
  
    // Internal method to set up the region manager
    _initRegionManager: function() {
      this._regionManager = new Marionette.RegionManager();
  
      this.listenTo(this._regionManager, 'before:add:region', function(name) {
        this.triggerMethod('before:add:region', name);
      });
  
      this.listenTo(this._regionManager, 'add:region', function(name, region) {
        this[name] = region;
        this.triggerMethod('add:region', name, region);
      });
  
      this.listenTo(this._regionManager, 'before:remove:region', function(name) {
        this.triggerMethod('before:remove:region', name);
      });
  
      this.listenTo(this._regionManager, 'remove:region', function(name, region) {
        delete this[name];
        this.triggerMethod('remove:region', name, region);
      });
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod
  });
  
  // Copy the `extend` function used by Backbone's classes
  Marionette.Application.extend = Marionette.extend;
  
  /* jshint maxparams: 9 */
  
  // Module
  // ------
  
  // A simple module system, used to create privacy and encapsulation in
  // Marionette applications
  Marionette.Module = function(moduleName, app, options) {
    this.moduleName = moduleName;
    this.options = _.extend({}, this.options, options);
    // Allow for a user to overide the initialize
    // for a given module instance.
    this.initialize = options.initialize || this.initialize;
  
    // Set up an internal store for sub-modules.
    this.submodules = {};
  
    this._setupInitializersAndFinalizers();
  
    // Set an internal reference to the app
    // within a module.
    this.app = app;
  
    // By default modules start with their parents.
    this.startWithParent = true;
  
    if (_.isFunction(this.initialize)) {
      this.initialize(moduleName, app, this.options);
    }
  };
  
  Marionette.Module.extend = Marionette.extend;
  
  // Extend the Module prototype with events / listenTo, so that the module
  // can be used as an event aggregator or pub/sub.
  _.extend(Marionette.Module.prototype, Backbone.Events, {
  
    // Initialize is an empty function by default. Override it with your own
    // initialization logic when extending Marionette.Module.
    initialize: function() {},
  
    // Initializer for a specific module. Initializers are run when the
    // module's `start` method is called.
    addInitializer: function(callback) {
      this._initializerCallbacks.add(callback);
    },
  
    // Finalizers are run when a module is stopped. They are used to teardown
    // and finalize any variables, references, events and other code that the
    // module had set up.
    addFinalizer: function(callback) {
      this._finalizerCallbacks.add(callback);
    },
  
    // Start the module, and run all of its initializers
    start: function(options) {
      // Prevent re-starting a module that is already started
      if (this._isInitialized) { return; }
  
      // start the sub-modules (depth-first hierarchy)
      _.each(this.submodules, function(mod) {
        // check to see if we should start the sub-module with this parent
        if (mod.startWithParent) {
          mod.start(options);
        }
      });
  
      // run the callbacks to "start" the current module
      this.triggerMethod('before:start', options);
  
      this._initializerCallbacks.run(options, this);
      this._isInitialized = true;
  
      this.triggerMethod('start', options);
    },
  
    // Stop this module by running its finalizers and then stop all of
    // the sub-modules for this module
    stop: function() {
      // if we are not initialized, don't bother finalizing
      if (!this._isInitialized) { return; }
      this._isInitialized = false;
  
      this.triggerMethod('before:stop');
  
      // stop the sub-modules; depth-first, to make sure the
      // sub-modules are stopped / finalized before parents
      _.each(this.submodules, function(mod) { mod.stop(); });
  
      // run the finalizers
      this._finalizerCallbacks.run(undefined, this);
  
      // reset the initializers and finalizers
      this._initializerCallbacks.reset();
      this._finalizerCallbacks.reset();
  
      this.triggerMethod('stop');
    },
  
    // Configure the module with a definition function and any custom args
    // that are to be passed in to the definition function
    addDefinition: function(moduleDefinition, customArgs) {
      this._runModuleDefinition(moduleDefinition, customArgs);
    },
  
    // Internal method: run the module definition function with the correct
    // arguments
    _runModuleDefinition: function(definition, customArgs) {
      // If there is no definition short circut the method.
      if (!definition) { return; }
  
      // build the correct list of arguments for the module definition
      var args = _.flatten([
        this,
        this.app,
        Backbone,
        Marionette,
        Backbone.$, _,
        customArgs
      ]);
  
      definition.apply(this, args);
    },
  
    // Internal method: set up new copies of initializers and finalizers.
    // Calling this method will wipe out all existing initializers and
    // finalizers.
    _setupInitializersAndFinalizers: function() {
      this._initializerCallbacks = new Marionette.Callbacks();
      this._finalizerCallbacks = new Marionette.Callbacks();
    },
  
    // import the `triggerMethod` to trigger events with corresponding
    // methods if the method exists
    triggerMethod: Marionette.triggerMethod
  });
  
  // Class methods to create modules
  _.extend(Marionette.Module, {
  
    // Create a module, hanging off the app parameter as the parent object.
    create: function(app, moduleNames, moduleDefinition) {
      var module = app;
  
      // get the custom args passed in after the module definition and
      // get rid of the module name and definition function
      var customArgs = slice.call(arguments);
      customArgs.splice(0, 3);
  
      // Split the module names and get the number of submodules.
      // i.e. an example module name of `Doge.Wow.Amaze` would
      // then have the potential for 3 module definitions.
      moduleNames = moduleNames.split('.');
      var length = moduleNames.length;
  
      // store the module definition for the last module in the chain
      var moduleDefinitions = [];
      moduleDefinitions[length - 1] = moduleDefinition;
  
      // Loop through all the parts of the module definition
      _.each(moduleNames, function(moduleName, i) {
        var parentModule = module;
        module = this._getModule(parentModule, moduleName, app, moduleDefinition);
        this._addModuleDefinition(parentModule, module, moduleDefinitions[i], customArgs);
      }, this);
  
      // Return the last module in the definition chain
      return module;
    },
  
    _getModule: function(parentModule, moduleName, app, def, args) {
      var options = _.extend({}, def);
      var ModuleClass = this.getClass(def);
  
      // Get an existing module of this name if we have one
      var module = parentModule[moduleName];
  
      if (!module) {
        // Create a new module if we don't have one
        module = new ModuleClass(moduleName, app, options);
        parentModule[moduleName] = module;
        // store the module on the parent
        parentModule.submodules[moduleName] = module;
      }
  
      return module;
    },
  
    // ## Module Classes
    //
    // Module classes can be used as an alternative to the define pattern.
    // The extend function of a Module is identical to the extend functions
    // on other Backbone and Marionette classes.
    // This allows module lifecyle events like `onStart` and `onStop` to be called directly.
    getClass: function(moduleDefinition) {
      var ModuleClass = Marionette.Module;
  
      if (!moduleDefinition) {
        return ModuleClass;
      }
  
      // If all of the module's functionality is defined inside its class,
      // then the class can be passed in directly. `MyApp.module("Foo", FooModule)`.
      if (moduleDefinition.prototype instanceof ModuleClass) {
        return moduleDefinition;
      }
  
      return moduleDefinition.moduleClass || ModuleClass;
    },
  
    // Add the module definition and add a startWithParent initializer function.
    // This is complicated because module definitions are heavily overloaded
    // and support an anonymous function, module class, or options object
    _addModuleDefinition: function(parentModule, module, def, args) {
      var fn = this._getDefine(def);
      var startWithParent = this._getStartWithParent(def, module);
  
      if (fn) {
        module.addDefinition(fn, args);
      }
  
      this._addStartWithParent(parentModule, module, startWithParent);
    },
  
    _getStartWithParent: function(def, module) {
      var swp;
  
      if (_.isFunction(def) && (def.prototype instanceof Marionette.Module)) {
        swp = module.constructor.prototype.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }
  
      if (_.isObject(def)) {
        swp = def.startWithParent;
        return _.isUndefined(swp) ? true : swp;
      }
  
      return true;
    },
  
    _getDefine: function(def) {
      if (_.isFunction(def) && !(def.prototype instanceof Marionette.Module)) {
        return def;
      }
  
      if (_.isObject(def)) {
        return def.define;
      }
  
      return null;
    },
  
    _addStartWithParent: function(parentModule, module, startWithParent) {
      module.startWithParent = module.startWithParent && startWithParent;
  
      if (!module.startWithParent || !!module.startWithParentIsConfigured) {
        return;
      }
  
      module.startWithParentIsConfigured = true;
  
      parentModule.addInitializer(function(options) {
        if (module.startWithParent) {
          module.start(options);
        }
      });
    }
  });
  

  return Marionette;
}));

/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */

/*global define: false*/

(function (root, factory) {
  if (typeof exports === "object" && exports) {
    factory(exports); // CommonJS
  } else {
    var mustache = {};
    factory(mustache);
    if (typeof define === "function" && define.amd) {
      define('mustache',mustache); // AMD
    } else {
      root.Mustache = mustache; // <script>
    }
  }
}(this, function (mustache) {

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  var RegExp_test = RegExp.prototype.test;
  function testRegExp(re, string) {
    return RegExp_test.call(re, string);
  }

  var nonSpaceRe = /\S/;
  function isWhitespace(string) {
    return !testRegExp(nonSpaceRe, string);
  }

  var Object_toString = Object.prototype.toString;
  var isArray = Array.isArray || function (object) {
    return Object_toString.call(object) === '[object Array]';
  };

  function isFunction(object) {
    return typeof object === 'function';
  }

  function escapeRegExp(string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
  }

  var entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };

  function escapeHtml(string) {
    return String(string).replace(/[&<>"'\/]/g, function (s) {
      return entityMap[s];
    });
  }

  function escapeTags(tags) {
    if (!isArray(tags) || tags.length !== 2) {
      throw new Error('Invalid tags: ' + tags);
    }

    return [
      new RegExp(escapeRegExp(tags[0]) + "\\s*"),
      new RegExp("\\s*" + escapeRegExp(tags[1]))
    ];
  }

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var equalsRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  /**
   * Breaks up the given `template` string into a tree of tokens. If the `tags`
   * argument is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
   * course, the default is to use mustaches (i.e. mustache.tags).
   *
   * A token is an array with at least 4 elements. The first element is the
   * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
   * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
   * all text that appears outside a symbol this element is "text".
   *
   * The second element of a token is its "value". For mustache tags this is
   * whatever else was inside the tag besides the opening symbol. For text tokens
   * this is the text itself.
   *
   * The third and fourth elements of the token are the start and end indices,
   * respectively, of the token in the original template.
   *
   * Tokens that are the root node of a subtree contain two more elements: 1) an
   * array of tokens in the subtree and 2) the index in the original template at
   * which the closing tag for that section begins.
   */
  function parseTemplate(template, tags) {
    tags = tags || mustache.tags;
    template = template || '';

    if (typeof tags === 'string') {
      tags = tags.split(spaceRe);
    }

    var tagRes = escapeTags(tags);
    var scanner = new Scanner(template);

    var sections = [];     // Stack to hold section tokens
    var tokens = [];       // Buffer to hold the tokens
    var spaces = [];       // Indices of whitespace tokens on the current line
    var hasTag = false;    // Is there a {{tag}} on the current line?
    var nonSpace = false;  // Is there a non-space char on the current line?

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    function stripSpace() {
      if (hasTag && !nonSpace) {
        while (spaces.length) {
          delete tokens[spaces.pop()];
        }
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    }

    var start, type, value, chr, token, openSection;
    while (!scanner.eos()) {
      start = scanner.pos;

      // Match any text between tags.
      value = scanner.scanUntil(tagRes[0]);
      if (value) {
        for (var i = 0, len = value.length; i < len; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
          } else {
            nonSpace = true;
          }

          tokens.push(['text', chr, start, start + 1]);
          start += 1;

          // Check for whitespace on the current line.
          if (chr === '\n') {
            stripSpace();
          }
        }
      }

      // Match the opening tag.
      if (!scanner.scan(tagRes[0])) break;
      hasTag = true;

      // Get the tag type.
      type = scanner.scan(tagRe) || 'name';
      scanner.scan(whiteRe);

      // Get the tag value.
      if (type === '=') {
        value = scanner.scanUntil(equalsRe);
        scanner.scan(equalsRe);
        scanner.scanUntil(tagRes[1]);
      } else if (type === '{') {
        value = scanner.scanUntil(new RegExp('\\s*' + escapeRegExp('}' + tags[1])));
        scanner.scan(curlyRe);
        scanner.scanUntil(tagRes[1]);
        type = '&';
      } else {
        value = scanner.scanUntil(tagRes[1]);
      }

      // Match the closing tag.
      if (!scanner.scan(tagRes[1])) {
        throw new Error('Unclosed tag at ' + scanner.pos);
      }

      token = [ type, value, start, scanner.pos ];
      tokens.push(token);

      if (type === '#' || type === '^') {
        sections.push(token);
      } else if (type === '/') {
        // Check section nesting.
        openSection = sections.pop();

        if (!openSection) {
          throw new Error('Unopened section "' + value + '" at ' + start);
        }
        if (openSection[1] !== value) {
          throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
        }
      } else if (type === 'name' || type === '{' || type === '&') {
        nonSpace = true;
      } else if (type === '=') {
        // Set the tags for the next time around.
        tagRes = escapeTags(tags = value.split(spaceRe));
      }
    }

    // Make sure there are no open sections when we're done.
    openSection = sections.pop();
    if (openSection) {
      throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);
    }

    return nestTokens(squashTokens(tokens));
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens(tokens) {
    var squashedTokens = [];

    var token, lastToken;
    for (var i = 0, len = tokens.length; i < len; ++i) {
      token = tokens[i];

      if (token) {
        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
          lastToken[1] += token[1];
          lastToken[3] = token[3];
        } else {
          squashedTokens.push(token);
          lastToken = token;
        }
      }
    }

    return squashedTokens;
  }

  /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have two additional items: 1) an array of
   * all tokens that appear in that section and 2) the index in the original
   * template that represents the end of that section.
   */
  function nestTokens(tokens) {
    var nestedTokens = [];
    var collector = nestedTokens;
    var sections = [];

    var token, section;
    for (var i = 0, len = tokens.length; i < len; ++i) {
      token = tokens[i];

      switch (token[0]) {
      case '#':
      case '^':
        collector.push(token);
        sections.push(token);
        collector = token[4] = [];
        break;
      case '/':
        section = sections.pop();
        section[5] = token[2];
        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
        break;
      default:
        collector.push(token);
      }
    }

    return nestedTokens;
  }

  /**
   * A simple string scanner that is used by the template parser to find
   * tokens in template strings.
   */
  function Scanner(string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function () {
    return this.tail === "";
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function (re) {
    var match = this.tail.match(re);

    if (match && match.index === 0) {
      var string = match[0];
      this.tail = this.tail.substring(string.length);
      this.pos += string.length;
      return string;
    }

    return "";
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function (re) {
    var index = this.tail.search(re), match;

    switch (index) {
    case -1:
      match = this.tail;
      this.tail = "";
      break;
    case 0:
      match = "";
      break;
    default:
      match = this.tail.substring(0, index);
      this.tail = this.tail.substring(index);
    }

    this.pos += match.length;

    return match;
  };

  /**
   * Represents a rendering context by wrapping a view object and
   * maintaining a reference to the parent context.
   */
  function Context(view, parentContext) {
    this.view = view == null ? {} : view;
    this.cache = { '.': this.view };
    this.parent = parentContext;
  }

  /**
   * Creates a new context using the given view with this context
   * as the parent.
   */
  Context.prototype.push = function (view) {
    return new Context(view, this);
  };

  /**
   * Returns the value of the given name in this context, traversing
   * up the context hierarchy if the value is absent in this context's view.
   */
  Context.prototype.lookup = function (name) {
    var value;
    if (name in this.cache) {
      value = this.cache[name];
    } else {
      var context = this;

      while (context) {
        if (name.indexOf('.') > 0) {
          value = context.view;

          var names = name.split('.'), i = 0;
          while (value != null && i < names.length) {
            value = value[names[i++]];
          }
        } else {
          value = context.view[name];
        }

        if (value != null) break;

        context = context.parent;
      }

      this.cache[name] = value;
    }

    if (isFunction(value)) {
      value = value.call(this.view);
    }

    return value;
  };

  /**
   * A Writer knows how to take a stream of tokens and render them to a
   * string, given a context. It also maintains a cache of templates to
   * avoid the need to parse the same template twice.
   */
  function Writer() {
    this.cache = {};
  }

  /**
   * Clears all cached templates in this writer.
   */
  Writer.prototype.clearCache = function () {
    this.cache = {};
  };

  /**
   * Parses and caches the given `template` and returns the array of tokens
   * that is generated from the parse.
   */
  Writer.prototype.parse = function (template, tags) {
    var cache = this.cache;
    var tokens = cache[template];

    if (tokens == null) {
      tokens = cache[template] = parseTemplate(template, tags);
    }

    return tokens;
  };

  /**
   * High-level method that is used to render the given `template` with
   * the given `view`.
   *
   * The optional `partials` argument may be an object that contains the
   * names and templates of partials that are used in the template. It may
   * also be a function that is used to load partial templates on the fly
   * that takes a single argument: the name of the partial.
   */
  Writer.prototype.render = function (template, view, partials) {
    var tokens = this.parse(template);
    var context = (view instanceof Context) ? view : new Context(view);
    return this.renderTokens(tokens, context, partials, template);
  };

  /**
   * Low-level method that renders the given array of `tokens` using
   * the given `context` and `partials`.
   *
   * Note: The `originalTemplate` is only ever used to extract the portion
   * of the original template that was contained in a higher-order section.
   * If the template doesn't use higher-order sections, this argument may
   * be omitted.
   */
  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {
    var buffer = '';

    // This function is used to render an arbitrary template
    // in the current context by higher-order sections.
    var self = this;
    function subRender(template) {
      return self.render(template, context, partials);
    }

    var token, value;
    for (var i = 0, len = tokens.length; i < len; ++i) {
      token = tokens[i];

      switch (token[0]) {
      case '#':
        value = context.lookup(token[1]);
        if (!value) continue;

        if (isArray(value)) {
          for (var j = 0, jlen = value.length; j < jlen; ++j) {
            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
          }
        } else if (typeof value === 'object' || typeof value === 'string') {
          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);
        } else if (isFunction(value)) {
          if (typeof originalTemplate !== 'string') {
            throw new Error('Cannot use higher-order sections without the original template');
          }

          // Extract the portion of the original template that the section contains.
          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

          if (value != null) buffer += value;
        } else {
          buffer += this.renderTokens(token[4], context, partials, originalTemplate);
        }

        break;
      case '^':
        value = context.lookup(token[1]);

        // Use JavaScript's definition of falsy. Include empty arrays.
        // See https://github.com/janl/mustache.js/issues/186
        if (!value || (isArray(value) && value.length === 0)) {
          buffer += this.renderTokens(token[4], context, partials, originalTemplate);
        }

        break;
      case '>':
        if (!partials) continue;
        value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
        if (value != null) buffer += this.renderTokens(this.parse(value), context, partials, value);
        break;
      case '&':
        value = context.lookup(token[1]);
        if (value != null) buffer += value;
        break;
      case 'name':
        value = context.lookup(token[1]);
        if (value != null) buffer += mustache.escape(value);
        break;
      case 'text':
        buffer += token[1];
        break;
      }
    }

    return buffer;
  };

  mustache.name = "mustache.js";
  mustache.version = "0.8.1";
  mustache.tags = [ "{{", "}}" ];

  // All high-level mustache.* functions use this writer.
  var defaultWriter = new Writer();

  /**
   * Clears all cached templates in the default writer.
   */
  mustache.clearCache = function () {
    return defaultWriter.clearCache();
  };

  /**
   * Parses and caches the given template in the default writer and returns the
   * array of tokens it contains. Doing this ahead of time avoids the need to
   * parse templates on the fly as they are rendered.
   */
  mustache.parse = function (template, tags) {
    return defaultWriter.parse(template, tags);
  };

  /**
   * Renders the `template` with the given `view` and `partials` using the
   * default writer.
   */
  mustache.render = function (template, view, partials) {
    return defaultWriter.render(template, view, partials);
  };

  // This is here for backwards compatibility with 0.4.x.
  mustache.to_html = function (template, view, partials, send) {
    var result = mustache.render(template, view, partials);

    if (isFunction(send)) {
      send(result);
    } else {
      return result;
    }
  };

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  mustache.escape = escapeHtml;

  // Export these mainly for testing, but also for advanced usage.
  mustache.Scanner = Scanner;
  mustache.Context = Context;
  mustache.Writer = Writer;

}));

/*!
 * async
 * https://github.com/caolan/async
 *
 * Copyright 2010-2014 Caolan McMahon
 * Released under the MIT license
 */
/*jshint onevar: false, indent:4 */
/*global setImmediate: false, setTimeout: false, console: false */
(function () {

    var async = {};

    // global on the server, window in the browser
    var root, previous_async;

    root = this;
    if (root != null) {
      previous_async = root.async;
    }

    async.noConflict = function () {
        root.async = previous_async;
        return async;
    };

    function only_once(fn) {
        var called = false;
        return function() {
            if (called) throw new Error("Callback was already called.");
            called = true;
            fn.apply(root, arguments);
        }
    }

    //// cross-browser compatiblity functions ////

    var _toString = Object.prototype.toString;

    var _isArray = Array.isArray || function (obj) {
        return _toString.call(obj) === '[object Array]';
    };

    var _each = function (arr, iterator) {
        if (arr.forEach) {
            return arr.forEach(iterator);
        }
        for (var i = 0; i < arr.length; i += 1) {
            iterator(arr[i], i, arr);
        }
    };

    var _map = function (arr, iterator) {
        if (arr.map) {
            return arr.map(iterator);
        }
        var results = [];
        _each(arr, function (x, i, a) {
            results.push(iterator(x, i, a));
        });
        return results;
    };

    var _reduce = function (arr, iterator, memo) {
        if (arr.reduce) {
            return arr.reduce(iterator, memo);
        }
        _each(arr, function (x, i, a) {
            memo = iterator(memo, x, i, a);
        });
        return memo;
    };

    var _keys = function (obj) {
        if (Object.keys) {
            return Object.keys(obj);
        }
        var keys = [];
        for (var k in obj) {
            if (obj.hasOwnProperty(k)) {
                keys.push(k);
            }
        }
        return keys;
    };

    //// exported async module functions ////

    //// nextTick implementation with browser-compatible fallback ////
    if (typeof process === 'undefined' || !(process.nextTick)) {
        if (typeof setImmediate === 'function') {
            async.nextTick = function (fn) {
                // not a direct alias for IE10 compatibility
                setImmediate(fn);
            };
            async.setImmediate = async.nextTick;
        }
        else {
            async.nextTick = function (fn) {
                setTimeout(fn, 0);
            };
            async.setImmediate = async.nextTick;
        }
    }
    else {
        async.nextTick = process.nextTick;
        if (typeof setImmediate !== 'undefined') {
            async.setImmediate = function (fn) {
              // not a direct alias for IE10 compatibility
              setImmediate(fn);
            };
        }
        else {
            async.setImmediate = async.nextTick;
        }
    }

    async.each = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        _each(arr, function (x) {
            iterator(x, only_once(done) );
        });
        function done(err) {
          if (err) {
              callback(err);
              callback = function () {};
          }
          else {
              completed += 1;
              if (completed >= arr.length) {
                  callback();
              }
          }
        }
    };
    async.forEach = async.each;

    async.eachSeries = function (arr, iterator, callback) {
        callback = callback || function () {};
        if (!arr.length) {
            return callback();
        }
        var completed = 0;
        var iterate = function () {
            iterator(arr[completed], function (err) {
                if (err) {
                    callback(err);
                    callback = function () {};
                }
                else {
                    completed += 1;
                    if (completed >= arr.length) {
                        callback();
                    }
                    else {
                        iterate();
                    }
                }
            });
        };
        iterate();
    };
    async.forEachSeries = async.eachSeries;

    async.eachLimit = function (arr, limit, iterator, callback) {
        var fn = _eachLimit(limit);
        fn.apply(null, [arr, iterator, callback]);
    };
    async.forEachLimit = async.eachLimit;

    var _eachLimit = function (limit) {

        return function (arr, iterator, callback) {
            callback = callback || function () {};
            if (!arr.length || limit <= 0) {
                return callback();
            }
            var completed = 0;
            var started = 0;
            var running = 0;

            (function replenish () {
                if (completed >= arr.length) {
                    return callback();
                }

                while (running < limit && started < arr.length) {
                    started += 1;
                    running += 1;
                    iterator(arr[started - 1], function (err) {
                        if (err) {
                            callback(err);
                            callback = function () {};
                        }
                        else {
                            completed += 1;
                            running -= 1;
                            if (completed >= arr.length) {
                                callback();
                            }
                            else {
                                replenish();
                            }
                        }
                    });
                }
            })();
        };
    };


    var doParallel = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.each].concat(args));
        };
    };
    var doParallelLimit = function(limit, fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [_eachLimit(limit)].concat(args));
        };
    };
    var doSeries = function (fn) {
        return function () {
            var args = Array.prototype.slice.call(arguments);
            return fn.apply(null, [async.eachSeries].concat(args));
        };
    };


    var _asyncMap = function (eachfn, arr, iterator, callback) {
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        if (!callback) {
            eachfn(arr, function (x, callback) {
                iterator(x.value, function (err) {
                    callback(err);
                });
            });
        } else {
            var results = [];
            eachfn(arr, function (x, callback) {
                iterator(x.value, function (err, v) {
                    results[x.index] = v;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };
    async.map = doParallel(_asyncMap);
    async.mapSeries = doSeries(_asyncMap);
    async.mapLimit = function (arr, limit, iterator, callback) {
        return _mapLimit(limit)(arr, iterator, callback);
    };

    var _mapLimit = function(limit) {
        return doParallelLimit(limit, _asyncMap);
    };

    // reduce only has a series version, as doing reduce in parallel won't
    // work in many situations.
    async.reduce = function (arr, memo, iterator, callback) {
        async.eachSeries(arr, function (x, callback) {
            iterator(memo, x, function (err, v) {
                memo = v;
                callback(err);
            });
        }, function (err) {
            callback(err, memo);
        });
    };
    // inject alias
    async.inject = async.reduce;
    // foldl alias
    async.foldl = async.reduce;

    async.reduceRight = function (arr, memo, iterator, callback) {
        var reversed = _map(arr, function (x) {
            return x;
        }).reverse();
        async.reduce(reversed, memo, iterator, callback);
    };
    // foldr alias
    async.foldr = async.reduceRight;

    var _filter = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.filter = doParallel(_filter);
    async.filterSeries = doSeries(_filter);
    // select alias
    async.select = async.filter;
    async.selectSeries = async.filterSeries;

    var _reject = function (eachfn, arr, iterator, callback) {
        var results = [];
        arr = _map(arr, function (x, i) {
            return {index: i, value: x};
        });
        eachfn(arr, function (x, callback) {
            iterator(x.value, function (v) {
                if (!v) {
                    results.push(x);
                }
                callback();
            });
        }, function (err) {
            callback(_map(results.sort(function (a, b) {
                return a.index - b.index;
            }), function (x) {
                return x.value;
            }));
        });
    };
    async.reject = doParallel(_reject);
    async.rejectSeries = doSeries(_reject);

    var _detect = function (eachfn, arr, iterator, main_callback) {
        eachfn(arr, function (x, callback) {
            iterator(x, function (result) {
                if (result) {
                    main_callback(x);
                    main_callback = function () {};
                }
                else {
                    callback();
                }
            });
        }, function (err) {
            main_callback();
        });
    };
    async.detect = doParallel(_detect);
    async.detectSeries = doSeries(_detect);

    async.some = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (v) {
                    main_callback(true);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(false);
        });
    };
    // any alias
    async.any = async.some;

    async.every = function (arr, iterator, main_callback) {
        async.each(arr, function (x, callback) {
            iterator(x, function (v) {
                if (!v) {
                    main_callback(false);
                    main_callback = function () {};
                }
                callback();
            });
        }, function (err) {
            main_callback(true);
        });
    };
    // all alias
    async.all = async.every;

    async.sortBy = function (arr, iterator, callback) {
        async.map(arr, function (x, callback) {
            iterator(x, function (err, criteria) {
                if (err) {
                    callback(err);
                }
                else {
                    callback(null, {value: x, criteria: criteria});
                }
            });
        }, function (err, results) {
            if (err) {
                return callback(err);
            }
            else {
                var fn = function (left, right) {
                    var a = left.criteria, b = right.criteria;
                    return a < b ? -1 : a > b ? 1 : 0;
                };
                callback(null, _map(results.sort(fn), function (x) {
                    return x.value;
                }));
            }
        });
    };

    async.auto = function (tasks, callback) {
        callback = callback || function () {};
        var keys = _keys(tasks);
        var remainingTasks = keys.length
        if (!remainingTasks) {
            return callback();
        }

        var results = {};

        var listeners = [];
        var addListener = function (fn) {
            listeners.unshift(fn);
        };
        var removeListener = function (fn) {
            for (var i = 0; i < listeners.length; i += 1) {
                if (listeners[i] === fn) {
                    listeners.splice(i, 1);
                    return;
                }
            }
        };
        var taskComplete = function () {
            remainingTasks--
            _each(listeners.slice(0), function (fn) {
                fn();
            });
        };

        addListener(function () {
            if (!remainingTasks) {
                var theCallback = callback;
                // prevent final callback from calling itself if it errors
                callback = function () {};

                theCallback(null, results);
            }
        });

        _each(keys, function (k) {
            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
            var taskCallback = function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                if (err) {
                    var safeResults = {};
                    _each(_keys(results), function(rkey) {
                        safeResults[rkey] = results[rkey];
                    });
                    safeResults[k] = args;
                    callback(err, safeResults);
                    // stop subsequent errors hitting callback multiple times
                    callback = function () {};
                }
                else {
                    results[k] = args;
                    async.setImmediate(taskComplete);
                }
            };
            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
            var ready = function () {
                return _reduce(requires, function (a, x) {
                    return (a && results.hasOwnProperty(x));
                }, true) && !results.hasOwnProperty(k);
            };
            if (ready()) {
                task[task.length - 1](taskCallback, results);
            }
            else {
                var listener = function () {
                    if (ready()) {
                        removeListener(listener);
                        task[task.length - 1](taskCallback, results);
                    }
                };
                addListener(listener);
            }
        });
    };

    async.retry = function(times, task, callback) {
        var DEFAULT_TIMES = 5;
        var attempts = [];
        // Use defaults if times not passed
        if (typeof times === 'function') {
            callback = task;
            task = times;
            times = DEFAULT_TIMES;
        }
        // Make sure times is a number
        times = parseInt(times, 10) || DEFAULT_TIMES;
        var wrappedTask = function(wrappedCallback, wrappedResults) {
            var retryAttempt = function(task, finalAttempt) {
                return function(seriesCallback) {
                    task(function(err, result){
                        seriesCallback(!err || finalAttempt, {err: err, result: result});
                    }, wrappedResults);
                };
            };
            while (times) {
                attempts.push(retryAttempt(task, !(times-=1)));
            }
            async.series(attempts, function(done, data){
                data = data[data.length - 1];
                (wrappedCallback || callback)(data.err, data.result);
            });
        }
        // If a callback is passed, run this as a controll flow
        return callback ? wrappedTask() : wrappedTask
    };

    async.waterfall = function (tasks, callback) {
        callback = callback || function () {};
        if (!_isArray(tasks)) {
          var err = new Error('First argument to waterfall must be an array of functions');
          return callback(err);
        }
        if (!tasks.length) {
            return callback();
        }
        var wrapIterator = function (iterator) {
            return function (err) {
                if (err) {
                    callback.apply(null, arguments);
                    callback = function () {};
                }
                else {
                    var args = Array.prototype.slice.call(arguments, 1);
                    var next = iterator.next();
                    if (next) {
                        args.push(wrapIterator(next));
                    }
                    else {
                        args.push(callback);
                    }
                    async.setImmediate(function () {
                        iterator.apply(null, args);
                    });
                }
            };
        };
        wrapIterator(async.iterator(tasks))();
    };

    var _parallel = function(eachfn, tasks, callback) {
        callback = callback || function () {};
        if (_isArray(tasks)) {
            eachfn.map(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            eachfn.each(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.parallel = function (tasks, callback) {
        _parallel({ map: async.map, each: async.each }, tasks, callback);
    };

    async.parallelLimit = function(tasks, limit, callback) {
        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
    };

    async.series = function (tasks, callback) {
        callback = callback || function () {};
        if (_isArray(tasks)) {
            async.mapSeries(tasks, function (fn, callback) {
                if (fn) {
                    fn(function (err) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length <= 1) {
                            args = args[0];
                        }
                        callback.call(null, err, args);
                    });
                }
            }, callback);
        }
        else {
            var results = {};
            async.eachSeries(_keys(tasks), function (k, callback) {
                tasks[k](function (err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    results[k] = args;
                    callback(err);
                });
            }, function (err) {
                callback(err, results);
            });
        }
    };

    async.iterator = function (tasks) {
        var makeCallback = function (index) {
            var fn = function () {
                if (tasks.length) {
                    tasks[index].apply(null, arguments);
                }
                return fn.next();
            };
            fn.next = function () {
                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
            };
            return fn;
        };
        return makeCallback(0);
    };

    async.apply = function (fn) {
        var args = Array.prototype.slice.call(arguments, 1);
        return function () {
            return fn.apply(
                null, args.concat(Array.prototype.slice.call(arguments))
            );
        };
    };

    var _concat = function (eachfn, arr, fn, callback) {
        var r = [];
        eachfn(arr, function (x, cb) {
            fn(x, function (err, y) {
                r = r.concat(y || []);
                cb(err);
            });
        }, function (err) {
            callback(err, r);
        });
    };
    async.concat = doParallel(_concat);
    async.concatSeries = doSeries(_concat);

    async.whilst = function (test, iterator, callback) {
        if (test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.whilst(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doWhilst = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            var args = Array.prototype.slice.call(arguments, 1);
            if (test.apply(null, args)) {
                async.doWhilst(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.until = function (test, iterator, callback) {
        if (!test()) {
            iterator(function (err) {
                if (err) {
                    return callback(err);
                }
                async.until(test, iterator, callback);
            });
        }
        else {
            callback();
        }
    };

    async.doUntil = function (iterator, test, callback) {
        iterator(function (err) {
            if (err) {
                return callback(err);
            }
            var args = Array.prototype.slice.call(arguments, 1);
            if (!test.apply(null, args)) {
                async.doUntil(iterator, test, callback);
            }
            else {
                callback();
            }
        });
    };

    async.queue = function (worker, concurrency) {
        if (concurrency === undefined) {
            concurrency = 1;
        }
        function _insert(q, data, pos, callback) {
          if (!q.started){
            q.started = true;
          }
          if (!_isArray(data)) {
              data = [data];
          }
          if(data.length == 0) {
             // call drain immediately if there are no tasks
             return async.setImmediate(function() {
                 if (q.drain) {
                     q.drain();
                 }
             });
          }
          _each(data, function(task) {
              var item = {
                  data: task,
                  callback: typeof callback === 'function' ? callback : null
              };

              if (pos) {
                q.tasks.unshift(item);
              } else {
                q.tasks.push(item);
              }

              if (q.saturated && q.tasks.length === q.concurrency) {
                  q.saturated();
              }
              async.setImmediate(q.process);
          });
        }

        var workers = 0;
        var q = {
            tasks: [],
            concurrency: concurrency,
            saturated: null,
            empty: null,
            drain: null,
            started: false,
            paused: false,
            push: function (data, callback) {
              _insert(q, data, false, callback);
            },
            kill: function () {
              q.drain = null;
              q.tasks = [];
            },
            unshift: function (data, callback) {
              _insert(q, data, true, callback);
            },
            process: function () {
                if (!q.paused && workers < q.concurrency && q.tasks.length) {
                    var task = q.tasks.shift();
                    if (q.empty && q.tasks.length === 0) {
                        q.empty();
                    }
                    workers += 1;
                    var next = function () {
                        workers -= 1;
                        if (task.callback) {
                            task.callback.apply(task, arguments);
                        }
                        if (q.drain && q.tasks.length + workers === 0) {
                            q.drain();
                        }
                        q.process();
                    };
                    var cb = only_once(next);
                    worker(task.data, cb);
                }
            },
            length: function () {
                return q.tasks.length;
            },
            running: function () {
                return workers;
            },
            idle: function() {
                return q.tasks.length + workers === 0;
            },
            pause: function () {
                if (q.paused === true) { return; }
                q.paused = true;
                q.process();
            },
            resume: function () {
                if (q.paused === false) { return; }
                q.paused = false;
                q.process();
            }
        };
        return q;
    };
    
    async.priorityQueue = function (worker, concurrency) {
        
        function _compareTasks(a, b){
          return a.priority - b.priority;
        };
        
        function _binarySearch(sequence, item, compare) {
          var beg = -1,
              end = sequence.length - 1;
          while (beg < end) {
            var mid = beg + ((end - beg + 1) >>> 1);
            if (compare(item, sequence[mid]) >= 0) {
              beg = mid;
            } else {
              end = mid - 1;
            }
          }
          return beg;
        }
        
        function _insert(q, data, priority, callback) {
          if (!q.started){
            q.started = true;
          }
          if (!_isArray(data)) {
              data = [data];
          }
          if(data.length == 0) {
             // call drain immediately if there are no tasks
             return async.setImmediate(function() {
                 if (q.drain) {
                     q.drain();
                 }
             });
          }
          _each(data, function(task) {
              var item = {
                  data: task,
                  priority: priority,
                  callback: typeof callback === 'function' ? callback : null
              };
              
              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);

              if (q.saturated && q.tasks.length === q.concurrency) {
                  q.saturated();
              }
              async.setImmediate(q.process);
          });
        }
        
        // Start with a normal queue
        var q = async.queue(worker, concurrency);
        
        // Override push to accept second parameter representing priority
        q.push = function (data, priority, callback) {
          _insert(q, data, priority, callback);
        };
        
        // Remove unshift function
        delete q.unshift;

        return q;
    };

    async.cargo = function (worker, payload) {
        var working     = false,
            tasks       = [];

        var cargo = {
            tasks: tasks,
            payload: payload,
            saturated: null,
            empty: null,
            drain: null,
            drained: true,
            push: function (data, callback) {
                if (!_isArray(data)) {
                    data = [data];
                }
                _each(data, function(task) {
                    tasks.push({
                        data: task,
                        callback: typeof callback === 'function' ? callback : null
                    });
                    cargo.drained = false;
                    if (cargo.saturated && tasks.length === payload) {
                        cargo.saturated();
                    }
                });
                async.setImmediate(cargo.process);
            },
            process: function process() {
                if (working) return;
                if (tasks.length === 0) {
                    if(cargo.drain && !cargo.drained) cargo.drain();
                    cargo.drained = true;
                    return;
                }

                var ts = typeof payload === 'number'
                            ? tasks.splice(0, payload)
                            : tasks.splice(0, tasks.length);

                var ds = _map(ts, function (task) {
                    return task.data;
                });

                if(cargo.empty) cargo.empty();
                working = true;
                worker(ds, function () {
                    working = false;

                    var args = arguments;
                    _each(ts, function (data) {
                        if (data.callback) {
                            data.callback.apply(null, args);
                        }
                    });

                    process();
                });
            },
            length: function () {
                return tasks.length;
            },
            running: function () {
                return working;
            }
        };
        return cargo;
    };

    var _console_fn = function (name) {
        return function (fn) {
            var args = Array.prototype.slice.call(arguments, 1);
            fn.apply(null, args.concat([function (err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (typeof console !== 'undefined') {
                    if (err) {
                        if (console.error) {
                            console.error(err);
                        }
                    }
                    else if (console[name]) {
                        _each(args, function (x) {
                            console[name](x);
                        });
                    }
                }
            }]));
        };
    };
    async.log = _console_fn('log');
    async.dir = _console_fn('dir');
    /*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

    async.memoize = function (fn, hasher) {
        var memo = {};
        var queues = {};
        hasher = hasher || function (x) {
            return x;
        };
        var memoized = function () {
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            var key = hasher.apply(null, args);
            if (key in memo) {
                async.nextTick(function () {
                    callback.apply(null, memo[key]);
                });
            }
            else if (key in queues) {
                queues[key].push(callback);
            }
            else {
                queues[key] = [callback];
                fn.apply(null, args.concat([function () {
                    memo[key] = arguments;
                    var q = queues[key];
                    delete queues[key];
                    for (var i = 0, l = q.length; i < l; i++) {
                      q[i].apply(null, arguments);
                    }
                }]));
            }
        };
        memoized.memo = memo;
        memoized.unmemoized = fn;
        return memoized;
    };

    async.unmemoize = function (fn) {
      return function () {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    };

    async.times = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.map(counter, iterator, callback);
    };

    async.timesSeries = function (count, iterator, callback) {
        var counter = [];
        for (var i = 0; i < count; i++) {
            counter.push(i);
        }
        return async.mapSeries(counter, iterator, callback);
    };

    async.seq = function (/* functions... */) {
        var fns = arguments;
        return function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            async.reduce(fns, args, function (newargs, fn, cb) {
                fn.apply(that, newargs.concat([function () {
                    var err = arguments[0];
                    var nextargs = Array.prototype.slice.call(arguments, 1);
                    cb(err, nextargs);
                }]))
            },
            function (err, results) {
                callback.apply(that, [err].concat(results));
            });
        };
    };

    async.compose = function (/* functions... */) {
      return async.seq.apply(null, Array.prototype.reverse.call(arguments));
    };

    var _applyEach = function (eachfn, fns /*args...*/) {
        var go = function () {
            var that = this;
            var args = Array.prototype.slice.call(arguments);
            var callback = args.pop();
            return eachfn(fns, function (fn, cb) {
                fn.apply(that, args.concat([cb]));
            },
            callback);
        };
        if (arguments.length > 2) {
            var args = Array.prototype.slice.call(arguments, 2);
            return go.apply(this, args);
        }
        else {
            return go;
        }
    };
    async.applyEach = doParallel(_applyEach);
    async.applyEachSeries = doSeries(_applyEach);

    async.forever = function (fn, callback) {
        function next(err) {
            if (err) {
                if (callback) {
                    return callback(err);
                }
                throw err;
            }
            fn(next);
        }
        next();
    };

    // Node.js
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = async;
    }
    // AMD / RequireJS
    else if (typeof define !== 'undefined' && define.amd) {
        define('async',[], function () {
            return async;
        });
    }
    // included directly via <script> tag
    else {
        root.async = async;
    }

}());

/*!
 * jQuery Validation Plugin v1.12.0
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2014 Jörn Zaefferer
 * Released under the MIT license
 */
(function($) {

$.extend($.fn, {
	// http://jqueryvalidation.org/validate/
	validate: function( options ) {

		// if nothing is selected, return nothing; can't chain anyway
		if ( !this.length ) {
			if ( options && options.debug && window.console ) {
				console.warn( "Nothing selected, can't validate, returning nothing." );
			}
			return;
		}

		// check if a validator for this form was already created
		var validator = $.data( this[0], "validator" );
		if ( validator ) {
			return validator;
		}

		// Add novalidate tag if HTML5.
		this.attr( "novalidate", "novalidate" );

		validator = new $.validator( options, this[0] );
		$.data( this[0], "validator", validator );

		if ( validator.settings.onsubmit ) {

			this.validateDelegate( ":submit", "click", function( event ) {
				if ( validator.settings.submitHandler ) {
					validator.submitButton = event.target;
				}
				// allow suppressing validation by adding a cancel class to the submit button
				if ( $(event.target).hasClass("cancel") ) {
					validator.cancelSubmit = true;
				}

				// allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
				if ( $(event.target).attr("formnovalidate") !== undefined ) {
					validator.cancelSubmit = true;
				}
			});

			// validate the form on submit
			this.submit( function( event ) {
				if ( validator.settings.debug ) {
					// prevent form submit to be able to see console output
					event.preventDefault();
				}
				function handle() {
					var hidden;
					if ( validator.settings.submitHandler ) {
						if ( validator.submitButton ) {
							// insert a hidden input as a replacement for the missing submit button
							hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val( $(validator.submitButton).val() ).appendTo(validator.currentForm);
						}
						validator.settings.submitHandler.call( validator, validator.currentForm, event );
						if ( validator.submitButton ) {
							// and clean up afterwards; thanks to no-block-scope, hidden can be referenced
							hidden.remove();
						}
						return false;
					}
					return true;
				}

				// prevent submit for invalid forms or custom submit handlers
				if ( validator.cancelSubmit ) {
					validator.cancelSubmit = false;
					return handle();
				}
				if ( validator.form() ) {
					if ( validator.pendingRequest ) {
						validator.formSubmitted = true;
						return false;
					}
					return handle();
				} else {
					validator.focusInvalid();
					return false;
				}
			});
		}

		return validator;
	},
	// http://jqueryvalidation.org/valid/
	valid: function() {
		var valid, validator;

		if ( $(this[0]).is("form")) {
			valid = this.validate().form();
		} else {
			valid = true;
			validator = $(this[0].form).validate();
			this.each(function() {
				valid = validator.element(this) && valid;
			});
		}
		return valid;
	},
	// attributes: space separated list of attributes to retrieve and remove
	removeAttrs: function( attributes ) {
		var result = {},
			$element = this;
		$.each(attributes.split(/\s/), function( index, value ) {
			result[value] = $element.attr(value);
			$element.removeAttr(value);
		});
		return result;
	},
	// http://jqueryvalidation.org/rules/
	rules: function( command, argument ) {
		var element = this[0],
			settings, staticRules, existingRules, data, param, filtered;

		if ( command ) {
			settings = $.data(element.form, "validator").settings;
			staticRules = settings.rules;
			existingRules = $.validator.staticRules(element);
			switch (command) {
			case "add":
				$.extend(existingRules, $.validator.normalizeRule(argument));
				// remove messages from rules, but allow them to be set separately
				delete existingRules.messages;
				staticRules[element.name] = existingRules;
				if ( argument.messages ) {
					settings.messages[element.name] = $.extend( settings.messages[element.name], argument.messages );
				}
				break;
			case "remove":
				if ( !argument ) {
					delete staticRules[element.name];
					return existingRules;
				}
				filtered = {};
				$.each(argument.split(/\s/), function( index, method ) {
					filtered[method] = existingRules[method];
					delete existingRules[method];
					if ( method === "required" ) {
						$(element).removeAttr("aria-required");
					}
				});
				return filtered;
			}
		}

		data = $.validator.normalizeRules(
		$.extend(
			{},
			$.validator.classRules(element),
			$.validator.attributeRules(element),
			$.validator.dataRules(element),
			$.validator.staticRules(element)
		), element);

		// make sure required is at front
		if ( data.required ) {
			param = data.required;
			delete data.required;
			data = $.extend({ required: param }, data );
			$(element).attr( "aria-required", "true" );
		}

		// make sure remote is at back
		if ( data.remote ) {
			param = data.remote;
			delete data.remote;
			data = $.extend( data, { remote: param });
		}

		return data;
	}
});

// Custom selectors
$.extend($.expr[":"], {
	// http://jqueryvalidation.org/blank-selector/
	blank: function( a ) { return !$.trim("" + $(a).val()); },
	// http://jqueryvalidation.org/filled-selector/
	filled: function( a ) { return !!$.trim("" + $(a).val()); },
	// http://jqueryvalidation.org/unchecked-selector/
	unchecked: function( a ) { return !$(a).prop("checked"); }
});

// constructor for validator
$.validator = function( options, form ) {
	this.settings = $.extend( true, {}, $.validator.defaults, options );
	this.currentForm = form;
	this.init();
};

// http://jqueryvalidation.org/jQuery.validator.format/
$.validator.format = function( source, params ) {
	if ( arguments.length === 1 ) {
		return function() {
			var args = $.makeArray(arguments);
			args.unshift(source);
			return $.validator.format.apply( this, args );
		};
	}
	if ( arguments.length > 2 && params.constructor !== Array  ) {
		params = $.makeArray(arguments).slice(1);
	}
	if ( params.constructor !== Array ) {
		params = [ params ];
	}
	$.each(params, function( i, n ) {
		source = source.replace( new RegExp("\\{" + i + "\\}", "g"), function() {
			return n;
		});
	});
	return source;
};

$.extend($.validator, {

	defaults: {
		messages: {},
		groups: {},
		rules: {},
		errorClass: "error",
		validClass: "valid",
		errorElement: "label",
		focusInvalid: true,
		errorContainer: $([]),
		errorLabelContainer: $([]),
		onsubmit: true,
		ignore: ":hidden",
		ignoreTitle: false,
		onfocusin: function( element ) {
			this.lastActive = element;

			// hide error label and remove error class on focus if enabled
			if ( this.settings.focusCleanup && !this.blockFocusCleanup ) {
				if ( this.settings.unhighlight ) {
					this.settings.unhighlight.call( this, element, this.settings.errorClass, this.settings.validClass );
				}
				this.addWrapper(this.errorsFor(element)).hide();
			}
		},
		onfocusout: function( element ) {
			if ( !this.checkable(element) && (element.name in this.submitted || !this.optional(element)) ) {
				this.element(element);
			}
		},
		onkeyup: function( element, event ) {
			if ( event.which === 9 && this.elementValue(element) === "" ) {
				return;
			} else if ( element.name in this.submitted || element === this.lastElement ) {
				this.element(element);
			}
		},
		onclick: function( element ) {
			// click on selects, radiobuttons and checkboxes
			if ( element.name in this.submitted ) {
				this.element(element);

			// or option elements, check parent select in that case
			} else if ( element.parentNode.name in this.submitted ) {
				this.element(element.parentNode);
			}
		},
		highlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName(element.name).addClass(errorClass).removeClass(validClass);
			} else {
				$(element).addClass(errorClass).removeClass(validClass);
			}
		},
		unhighlight: function( element, errorClass, validClass ) {
			if ( element.type === "radio" ) {
				this.findByName(element.name).removeClass(errorClass).addClass(validClass);
			} else {
				$(element).removeClass(errorClass).addClass(validClass);
			}
		}
	},

	// http://jqueryvalidation.org/jQuery.validator.setDefaults/
	setDefaults: function( settings ) {
		$.extend( $.validator.defaults, settings );
	},

	messages: {
		required: "This field is required.",
		remote: "Please fix this field.",
		email: "Please enter a valid email address.",
		url: "Please enter a valid URL.",
		date: "Please enter a valid date.",
		dateISO: "Please enter a valid date (ISO).",
		number: "Please enter a valid number.",
		digits: "Please enter only digits.",
		creditcard: "Please enter a valid credit card number.",
		equalTo: "Please enter the same value again.",
		maxlength: $.validator.format("Please enter no more than {0} characters."),
		minlength: $.validator.format("Please enter at least {0} characters."),
		rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
		range: $.validator.format("Please enter a value between {0} and {1}."),
		max: $.validator.format("Please enter a value less than or equal to {0}."),
		min: $.validator.format("Please enter a value greater than or equal to {0}.")
	},

	autoCreateRanges: false,

	prototype: {

		init: function() {
			this.labelContainer = $(this.settings.errorLabelContainer);
			this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
			this.containers = $(this.settings.errorContainer).add( this.settings.errorLabelContainer );
			this.submitted = {};
			this.valueCache = {};
			this.pendingRequest = 0;
			this.pending = {};
			this.invalid = {};
			this.reset();

			var groups = (this.groups = {}),
				rules;
			$.each(this.settings.groups, function( key, value ) {
				if ( typeof value === "string" ) {
					value = value.split(/\s/);
				}
				$.each(value, function( index, name ) {
					groups[name] = key;
				});
			});
			rules = this.settings.rules;
			$.each(rules, function( key, value ) {
				rules[key] = $.validator.normalizeRule(value);
			});

			function delegate(event) {
				var validator = $.data(this[0].form, "validator"),
					eventType = "on" + event.type.replace(/^validate/, ""),
					settings = validator.settings;
				if ( settings[eventType] && !this.is( settings.ignore ) ) {
					settings[eventType].call(validator, this[0], event);
				}
			}
			$(this.currentForm)
				.validateDelegate(":text, [type='password'], [type='file'], select, textarea, " +
					"[type='number'], [type='search'] ,[type='tel'], [type='url'], " +
					"[type='email'], [type='datetime'], [type='date'], [type='month'], " +
					"[type='week'], [type='time'], [type='datetime-local'], " +
					"[type='range'], [type='color'] ",
					"focusin focusout keyup", delegate)
				.validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", delegate);

			if ( this.settings.invalidHandler ) {
				$(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
			}

			// Add aria-required to any Static/Data/Class required fields before first validation
			// Screen readers require this attribute to be present before the initial submission http://www.w3.org/TR/WCAG-TECHS/ARIA2.html
			$(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");
		},

		// http://jqueryvalidation.org/Validator.form/
		form: function() {
			this.checkForm();
			$.extend(this.submitted, this.errorMap);
			this.invalid = $.extend({}, this.errorMap);
			if ( !this.valid() ) {
				$(this.currentForm).triggerHandler("invalid-form", [ this ]);
			}
			this.showErrors();
			return this.valid();
		},

		checkForm: function() {
			this.prepareForm();
			for ( var i = 0, elements = (this.currentElements = this.elements()); elements[i]; i++ ) {
				this.check( elements[i] );
			}
			return this.valid();
		},

		// http://jqueryvalidation.org/Validator.element/
		element: function( element ) {
			var cleanElement = this.clean( element ),
				checkElement = this.validationTargetFor( cleanElement ),
				result = true;

			this.lastElement = checkElement;

			if ( checkElement === undefined ) {
				delete this.invalid[ cleanElement.name ];
			} else {
				this.prepareElement( checkElement );
				this.currentElements = $( checkElement );

				result = this.check( checkElement ) !== false;
				if (result) {
					delete this.invalid[checkElement.name];
				} else {
					this.invalid[checkElement.name] = true;
				}
			}
			// Add aria-invalid status for screen readers
			$( element ).attr( "aria-invalid", !result );

			if ( !this.numberOfInvalids() ) {
				// Hide error containers on last error
				this.toHide = this.toHide.add( this.containers );
			}
			this.showErrors();
			return result;
		},

		// http://jqueryvalidation.org/Validator.showErrors/
		showErrors: function( errors ) {
			if ( errors ) {
				// add items to error list and map
				$.extend( this.errorMap, errors );
				this.errorList = [];
				for ( var name in errors ) {
					this.errorList.push({
						message: errors[name],
						element: this.findByName(name)[0]
					});
				}
				// remove items from success list
				this.successList = $.grep( this.successList, function( element ) {
					return !(element.name in errors);
				});
			}
			if ( this.settings.showErrors ) {
				this.settings.showErrors.call( this, this.errorMap, this.errorList );
			} else {
				this.defaultShowErrors();
			}
		},

		// http://jqueryvalidation.org/Validator.resetForm/
		resetForm: function() {
			if ( $.fn.resetForm ) {
				$(this.currentForm).resetForm();
			}
			this.submitted = {};
			this.lastElement = null;
			this.prepareForm();
			this.hideErrors();
			this.elements()
					.removeClass( this.settings.errorClass )
					.removeData( "previousValue" )
					.removeAttr( "aria-invalid" );
		},

		numberOfInvalids: function() {
			return this.objectLength(this.invalid);
		},

		objectLength: function( obj ) {
			/* jshint unused: false */
			var count = 0,
				i;
			for ( i in obj ) {
				count++;
			}
			return count;
		},

		hideErrors: function() {
			this.addWrapper( this.toHide ).hide();
		},

		valid: function() {
			return this.size() === 0;
		},

		size: function() {
			return this.errorList.length;
		},

		focusInvalid: function() {
			if ( this.settings.focusInvalid ) {
				try {
					$(this.findLastActive() || this.errorList.length && this.errorList[0].element || [])
					.filter(":visible")
					.focus()
					// manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
					.trigger("focusin");
				} catch(e) {
					// ignore IE throwing errors when focusing hidden elements
				}
			}
		},

		findLastActive: function() {
			var lastActive = this.lastActive;
			return lastActive && $.grep(this.errorList, function( n ) {
				return n.element.name === lastActive.name;
			}).length === 1 && lastActive;
		},

		elements: function() {
			var validator = this,
				rulesCache = {};

			// select all valid inputs inside the form (no submit or reset buttons)
			return $(this.currentForm)
			.find("input, select, textarea")
			.not(":submit, :reset, :image, [disabled]")
			.not( this.settings.ignore )
			.filter(function() {
				if ( !this.name && validator.settings.debug && window.console ) {
					console.error( "%o has no name assigned", this);
				}

				// select only the first element for each name, and only those with rules specified
				if ( this.name in rulesCache || !validator.objectLength($(this).rules()) ) {
					return false;
				}

				rulesCache[this.name] = true;
				return true;
			});
		},

		clean: function( selector ) {
			return $(selector)[0];
		},

		errors: function() {
			var errorClass = this.settings.errorClass.split(" ").join(".");
			return $(this.settings.errorElement + "." + errorClass, this.errorContext);
		},

		reset: function() {
			this.successList = [];
			this.errorList = [];
			this.errorMap = {};
			this.toShow = $([]);
			this.toHide = $([]);
			this.currentElements = $([]);
		},

		prepareForm: function() {
			this.reset();
			this.toHide = this.errors().add( this.containers );
		},

		prepareElement: function( element ) {
			this.reset();
			this.toHide = this.errorsFor(element);
		},

		elementValue: function( element ) {
			var val,
				$element = $(element),
				type = $element.attr("type");

			if ( type === "radio" || type === "checkbox" ) {
				return $("input[name='" + $element.attr("name") + "']:checked").val();
			}

			val = $element.val();
			if ( typeof val === "string" ) {
				return val.replace(/\r/g, "");
			}
			return val;
		},

		check: function( element ) {
			element = this.validationTargetFor( this.clean( element ) );

			var rules = $(element).rules(),
				rulesCount = $.map( rules, function(n, i) {
					return i;
				}).length,
				dependencyMismatch = false,
				val = this.elementValue(element),
				result, method, rule;

			for (method in rules ) {
				rule = { method: method, parameters: rules[method] };
				try {

					result = $.validator.methods[method].call( this, val, element, rule.parameters );

					// if a method indicates that the field is optional and therefore valid,
					// don't mark it as valid when there are no other rules
					if ( result === "dependency-mismatch" && rulesCount === 1 ) {
						dependencyMismatch = true;
						continue;
					}
					dependencyMismatch = false;

					if ( result === "pending" ) {
						this.toHide = this.toHide.not( this.errorsFor(element) );
						return;
					}

					if ( !result ) {
						this.formatAndAdd( element, rule );
						return false;
					}
				} catch(e) {
					if ( this.settings.debug && window.console ) {
						console.log( "Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e );
					}
					throw e;
				}
			}
			if ( dependencyMismatch ) {
				return;
			}
			if ( this.objectLength(rules) ) {
				this.successList.push(element);
			}
			return true;
		},

		// return the custom message for the given element and validation method
		// specified in the element's HTML5 data attribute
		// return the generic message if present and no method specific message is present
		customDataMessage: function( element, method ) {
			return $( element ).data( "msg" + method[ 0 ].toUpperCase() +
				method.substring( 1 ).toLowerCase() ) || $( element ).data("msg");
		},

		// return the custom message for the given element name and validation method
		customMessage: function( name, method ) {
			var m = this.settings.messages[name];
			return m && (m.constructor === String ? m : m[method]);
		},

		// return the first defined argument, allowing empty strings
		findDefined: function() {
			for (var i = 0; i < arguments.length; i++) {
				if ( arguments[i] !== undefined ) {
					return arguments[i];
				}
			}
			return undefined;
		},

		defaultMessage: function( element, method ) {
			return this.findDefined(
				this.customMessage( element.name, method ),
				this.customDataMessage( element, method ),
				// title is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle && element.title || undefined,
				$.validator.messages[method],
				"<strong>Warning: No message defined for " + element.name + "</strong>"
			);
		},

		formatAndAdd: function( element, rule ) {
			var message = this.defaultMessage( element, rule.method ),
				theregex = /\$?\{(\d+)\}/g;
			if ( typeof message === "function" ) {
				message = message.call(this, rule.parameters, element);
			} else if (theregex.test(message)) {
				message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);
			}
			this.errorList.push({
				message: message,
				element: element,
				method: rule.method
			});

			this.errorMap[element.name] = message;
			this.submitted[element.name] = message;
		},

		addWrapper: function( toToggle ) {
			if ( this.settings.wrapper ) {
				toToggle = toToggle.add( toToggle.parent( this.settings.wrapper ) );
			}
			return toToggle;
		},

		defaultShowErrors: function() {
			var i, elements, error;
			for ( i = 0; this.errorList[i]; i++ ) {
				error = this.errorList[i];
				if ( this.settings.highlight ) {
					this.settings.highlight.call( this, error.element, this.settings.errorClass, this.settings.validClass );
				}
				this.showLabel( error.element, error.message );
			}
			if ( this.errorList.length ) {
				this.toShow = this.toShow.add( this.containers );
			}
			if ( this.settings.success ) {
				for ( i = 0; this.successList[i]; i++ ) {
					this.showLabel( this.successList[i] );
				}
			}
			if ( this.settings.unhighlight ) {
				for ( i = 0, elements = this.validElements(); elements[i]; i++ ) {
					this.settings.unhighlight.call( this, elements[i], this.settings.errorClass, this.settings.validClass );
				}
			}
			this.toHide = this.toHide.not( this.toShow );
			this.hideErrors();
			this.addWrapper( this.toShow ).show();
		},

		validElements: function() {
			return this.currentElements.not(this.invalidElements());
		},

		invalidElements: function() {
			return $(this.errorList).map(function() {
				return this.element;
			});
		},

		showLabel: function( element, message ) {
			var label = this.errorsFor( element );
			if ( label.length ) {
				// refresh error/success class
				label.removeClass( this.settings.validClass ).addClass( this.settings.errorClass );
				// replace message on existing label
				label.html(message);
			} else {
				// create label
				label = $("<" + this.settings.errorElement + ">")
					.attr("for", this.idOrName(element))
					.addClass(this.settings.errorClass)
					.html(message || "");
				if ( this.settings.wrapper ) {
					// make sure the element is visible, even in IE
					// actually showing the wrapped element is handled elsewhere
					label = label.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
				}
				if ( !this.labelContainer.append(label).length ) {
					if ( this.settings.errorPlacement ) {
						this.settings.errorPlacement(label, $(element) );
					} else {
						label.insertAfter(element);
					}
				}
			}
			if ( !message && this.settings.success ) {
				label.text("");
				if ( typeof this.settings.success === "string" ) {
					label.addClass( this.settings.success );
				} else {
					this.settings.success( label, element );
				}
			}
			this.toShow = this.toShow.add(label);
		},

		errorsFor: function( element ) {
			var name = this.idOrName(element);
			return this.errors().filter(function() {
				return $(this).attr("for") === name;
			});
		},

		idOrName: function( element ) {
			return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
		},

		validationTargetFor: function( element ) {
			// if radio/checkbox, validate first element in group instead
			if ( this.checkable(element) ) {
				element = this.findByName( element.name ).not(this.settings.ignore)[0];
			}
			return element;
		},

		checkable: function( element ) {
			return (/radio|checkbox/i).test(element.type);
		},

		findByName: function( name ) {
			return $(this.currentForm).find("[name='" + name + "']");
		},

		getLength: function( value, element ) {
			switch ( element.nodeName.toLowerCase() ) {
			case "select":
				return $("option:selected", element).length;
			case "input":
				if ( this.checkable( element) ) {
					return this.findByName(element.name).filter(":checked").length;
				}
			}
			return value.length;
		},

		depend: function( param, element ) {
			return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
		},

		dependTypes: {
			"boolean": function( param ) {
				return param;
			},
			"string": function( param, element ) {
				return !!$(param, element.form).length;
			},
			"function": function( param, element ) {
				return param(element);
			}
		},

		optional: function( element ) {
			var val = this.elementValue(element);
			return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
		},

		startRequest: function( element ) {
			if ( !this.pending[element.name] ) {
				this.pendingRequest++;
				this.pending[element.name] = true;
			}
		},

		stopRequest: function( element, valid ) {
			this.pendingRequest--;
			// sometimes synchronization fails, make sure pendingRequest is never < 0
			if ( this.pendingRequest < 0 ) {
				this.pendingRequest = 0;
			}
			delete this.pending[element.name];
			if ( valid && this.pendingRequest === 0 && this.formSubmitted && this.form() ) {
				$(this.currentForm).submit();
				this.formSubmitted = false;
			} else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
				$(this.currentForm).triggerHandler("invalid-form", [ this ]);
				this.formSubmitted = false;
			}
		},

		previousValue: function( element ) {
			return $.data(element, "previousValue") || $.data(element, "previousValue", {
				old: null,
				valid: true,
				message: this.defaultMessage( element, "remote" )
			});
		}

	},

	classRuleSettings: {
		required: { required: true },
		email: { email: true },
		url: { url: true },
		date: { date: true },
		dateISO: { dateISO: true },
		number: { number: true },
		digits: { digits: true },
		creditcard: { creditcard: true }
	},

	addClassRules: function( className, rules ) {
		if ( className.constructor === String ) {
			this.classRuleSettings[className] = rules;
		} else {
			$.extend(this.classRuleSettings, className);
		}
	},

	classRules: function( element ) {
		var rules = {},
			classes = $(element).attr("class");

		if ( classes ) {
			$.each(classes.split(" "), function() {
				if ( this in $.validator.classRuleSettings ) {
					$.extend(rules, $.validator.classRuleSettings[this]);
				}
			});
		}
		return rules;
	},

	attributeRules: function( element ) {
		var rules = {},
			$element = $(element),
			type = element.getAttribute("type"),
			method, value;

		for (method in $.validator.methods) {

			// support for <input required> in both html5 and older browsers
			if ( method === "required" ) {
				value = element.getAttribute(method);
				// Some browsers return an empty string for the required attribute
				// and non-HTML5 browsers might have required="" markup
				if ( value === "" ) {
					value = true;
				}
				// force non-HTML5 browsers to return bool
				value = !!value;
			} else {
				value = $element.attr(method);
			}

			// convert the value to a number for number inputs, and for text for backwards compability
			// allows type="date" and others to be compared as strings
			if ( /min|max/.test( method ) && ( type === null || /number|range|text/.test( type ) ) ) {
				value = Number(value);
			}

			if ( value || value === 0 ) {
				rules[method] = value;
			} else if ( type === method && type !== "range" ) {
				// exception: the jquery validate 'range' method
				// does not test for the html5 'range' type
				rules[method] = true;
			}
		}

		// maxlength may be returned as -1, 2147483647 (IE) and 524288 (safari) for text inputs
		if ( rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength) ) {
			delete rules.maxlength;
		}

		return rules;
	},

	dataRules: function( element ) {
		var method, value,
			rules = {}, $element = $( element );
		for ( method in $.validator.methods ) {
			value = $element.data( "rule" + method[ 0 ].toUpperCase() + method.substring( 1 ).toLowerCase() );
			if ( value !== undefined ) {
				rules[ method ] = value;
			}
		}
		return rules;
	},

	staticRules: function( element ) {
		var rules = {},
			validator = $.data(element.form, "validator");

		if ( validator.settings.rules ) {
			rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
		}
		return rules;
	},

	normalizeRules: function( rules, element ) {
		// handle dependency check
		$.each(rules, function( prop, val ) {
			// ignore rule when param is explicitly false, eg. required:false
			if ( val === false ) {
				delete rules[prop];
				return;
			}
			if ( val.param || val.depends ) {
				var keepRule = true;
				switch (typeof val.depends) {
				case "string":
					keepRule = !!$(val.depends, element.form).length;
					break;
				case "function":
					keepRule = val.depends.call(element, element);
					break;
				}
				if ( keepRule ) {
					rules[prop] = val.param !== undefined ? val.param : true;
				} else {
					delete rules[prop];
				}
			}
		});

		// evaluate parameters
		$.each(rules, function( rule, parameter ) {
			rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
		});

		// clean number parameters
		$.each([ "minlength", "maxlength" ], function() {
			if ( rules[this] ) {
				rules[this] = Number(rules[this]);
			}
		});
		$.each([ "rangelength", "range" ], function() {
			var parts;
			if ( rules[this] ) {
				if ( $.isArray(rules[this]) ) {
					rules[this] = [ Number(rules[this][0]), Number(rules[this][1]) ];
				} else if ( typeof rules[this] === "string" ) {
					parts = rules[this].split(/[\s,]+/);
					rules[this] = [ Number(parts[0]), Number(parts[1]) ];
				}
			}
		});

		if ( $.validator.autoCreateRanges ) {
			// auto-create ranges
			if ( rules.min && rules.max ) {
				rules.range = [ rules.min, rules.max ];
				delete rules.min;
				delete rules.max;
			}
			if ( rules.minlength && rules.maxlength ) {
				rules.rangelength = [ rules.minlength, rules.maxlength ];
				delete rules.minlength;
				delete rules.maxlength;
			}
		}

		return rules;
	},

	// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
	normalizeRule: function( data ) {
		if ( typeof data === "string" ) {
			var transformed = {};
			$.each(data.split(/\s/), function() {
				transformed[this] = true;
			});
			data = transformed;
		}
		return data;
	},

	// http://jqueryvalidation.org/jQuery.validator.addMethod/
	addMethod: function( name, method, message ) {
		$.validator.methods[name] = method;
		$.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];
		if ( method.length < 3 ) {
			$.validator.addClassRules(name, $.validator.normalizeRule(name));
		}
	},

	methods: {

		// http://jqueryvalidation.org/required-method/
		required: function( value, element, param ) {
			// check if dependency is met
			if ( !this.depend(param, element) ) {
				return "dependency-mismatch";
			}
			if ( element.nodeName.toLowerCase() === "select" ) {
				// could be an array for select-multiple or a string, both are fine this way
				var val = $(element).val();
				return val && val.length > 0;
			}
			if ( this.checkable(element) ) {
				return this.getLength(value, element) > 0;
			}
			return $.trim(value).length > 0;
		},

		// http://jqueryvalidation.org/email-method/
		email: function( value, element ) {
			// From http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#e-mail-state-%28type=email%29
			// Retrieved 2014-01-14
			// If you have a problem with this implementation, report a bug against the above spec
			// Or use custom methods to implement your own email validation
			return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
		},

		// http://jqueryvalidation.org/url-method/
		url: function( value, element ) {
			// contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
			return this.optional(element) || /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
		},

		// http://jqueryvalidation.org/date-method/
		date: function( value, element ) {
			return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
		},

		// http://jqueryvalidation.org/dateISO-method/
		dateISO: function( value, element ) {
			return this.optional(element) || /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(value);
		},

		// http://jqueryvalidation.org/number-method/
		number: function( value, element ) {
			return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
		},

		// http://jqueryvalidation.org/digits-method/
		digits: function( value, element ) {
			return this.optional(element) || /^\d+$/.test(value);
		},

		// http://jqueryvalidation.org/creditcard-method/
		// based on http://en.wikipedia.org/wiki/Luhn/
		creditcard: function( value, element ) {
			if ( this.optional(element) ) {
				return "dependency-mismatch";
			}
			// accept only spaces, digits and dashes
			if ( /[^0-9 \-]+/.test(value) ) {
				return false;
			}
			var nCheck = 0,
				nDigit = 0,
				bEven = false,
				n, cDigit;

			value = value.replace(/\D/g, "");

			// Basing min and max length on
			// http://developer.ean.com/general_info/Valid_Credit_Card_Types
			if ( value.length < 13 || value.length > 19 ) {
				return false;
			}

			for ( n = value.length - 1; n >= 0; n--) {
				cDigit = value.charAt(n);
				nDigit = parseInt(cDigit, 10);
				if ( bEven ) {
					if ( (nDigit *= 2) > 9 ) {
						nDigit -= 9;
					}
				}
				nCheck += nDigit;
				bEven = !bEven;
			}

			return (nCheck % 10) === 0;
		},

		// http://jqueryvalidation.org/minlength-method/
		minlength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength($.trim(value), element);
			return this.optional(element) || length >= param;
		},

		// http://jqueryvalidation.org/maxlength-method/
		maxlength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength($.trim(value), element);
			return this.optional(element) || length <= param;
		},

		// http://jqueryvalidation.org/rangelength-method/
		rangelength: function( value, element, param ) {
			var length = $.isArray( value ) ? value.length : this.getLength($.trim(value), element);
			return this.optional(element) || ( length >= param[0] && length <= param[1] );
		},

		// http://jqueryvalidation.org/min-method/
		min: function( value, element, param ) {
			return this.optional(element) || value >= param;
		},

		// http://jqueryvalidation.org/max-method/
		max: function( value, element, param ) {
			return this.optional(element) || value <= param;
		},

		// http://jqueryvalidation.org/range-method/
		range: function( value, element, param ) {
			return this.optional(element) || ( value >= param[0] && value <= param[1] );
		},

		// http://jqueryvalidation.org/equalTo-method/
		equalTo: function( value, element, param ) {
			// bind to the blur event of the target in order to revalidate whenever the target field is updated
			// TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
			var target = $(param);
			if ( this.settings.onfocusout ) {
				target.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
					$(element).valid();
				});
			}
			return value === target.val();
		},

		// http://jqueryvalidation.org/remote-method/
		remote: function( value, element, param ) {
			if ( this.optional(element) ) {
				return "dependency-mismatch";
			}

			var previous = this.previousValue(element),
				validator, data;

			if (!this.settings.messages[element.name] ) {
				this.settings.messages[element.name] = {};
			}
			previous.originalMessage = this.settings.messages[element.name].remote;
			this.settings.messages[element.name].remote = previous.message;

			param = typeof param === "string" && { url: param } || param;

			if ( previous.old === value ) {
				return previous.valid;
			}

			previous.old = value;
			validator = this;
			this.startRequest(element);
			data = {};
			data[element.name] = value;
			$.ajax($.extend(true, {
				url: param,
				mode: "abort",
				port: "validate" + element.name,
				dataType: "json",
				data: data,
				context: validator.currentForm,
				success: function( response ) {
					var valid = response === true || response === "true",
						errors, message, submitted;

					validator.settings.messages[element.name].remote = previous.originalMessage;
					if ( valid ) {
						submitted = validator.formSubmitted;
						validator.prepareElement(element);
						validator.formSubmitted = submitted;
						validator.successList.push(element);
						delete validator.invalid[element.name];
						validator.showErrors();
					} else {
						errors = {};
						message = response || validator.defaultMessage( element, "remote" );
						errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
						validator.invalid[element.name] = true;
						validator.showErrors(errors);
					}
					previous.valid = valid;
					validator.stopRequest(element, valid);
				}
			}, param));
			return "pending";
		}

	}

});

$.format = function deprecated() {
	throw "$.format has been deprecated. Please use $.validator.format instead.";
};

}(jQuery));

// ajax mode: abort
// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
(function($) {
	var pendingRequests = {},
		ajax;
	// Use a prefilter if available (1.5+)
	if ( $.ajaxPrefilter ) {
		$.ajaxPrefilter(function( settings, _, xhr ) {
			var port = settings.port;
			if ( settings.mode === "abort" ) {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = xhr;
			}
		});
	} else {
		// Proxy ajax
		ajax = $.ajax;
		$.ajax = function( settings ) {
			var mode = ( "mode" in settings ? settings : $.ajaxSettings ).mode,
				port = ( "port" in settings ? settings : $.ajaxSettings ).port;
			if ( mode === "abort" ) {
				if ( pendingRequests[port] ) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = ajax.apply(this, arguments);
				return pendingRequests[port];
			}
			return ajax.apply(this, arguments);
		};
	}
}(jQuery));

// provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
// handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target
(function($) {
	$.extend($.fn, {
		validateDelegate: function( delegate, type, handler ) {
			return this.bind(type, function( event ) {
				var target = $(event.target);
				if ( target.is(delegate) ) {
					return handler.apply(target, arguments);
				}
			});
		}
	});
}(jQuery));

define("jqueryvalidate", function(){});

(function ( root, factory ) {

    var babysitter, backbone, underscore, wreqr;

    if (typeof exports === "object") {

        underscore = require( "underscore" );
        backbone = require( "backbone" );
        wreqr = require( "backbone.wreqr" );
        babysitter = require( "backbone.babysitter" );

        return module.exports = factory( underscore, backbone, wreqr, babysitter );

    } else if (typeof define === "function" && define.amd) {
        return define( 'extm',["underscore",
                        "backbone",
                        "marionette",
                        "mustache",
                        "async",
                        "jqueryvalidate"], factory );
    }

})( this, function ( _, Backbone, Marionette, Mustache, async ) {

    
    var Extm;
    
    Extm = (function ( global, Backbone, _ , Marionette, Mustache, async) {
    
        
    
        Extm = {};
        Extm.$ = Backbone.$;
    
        // Generated by CoffeeScript 1.7.1
        _.extend(Backbone.Model.prototype, {
          sync: function(method, model, options) {
            var allData, idAttr, onlyChanged, params, xhr, _action, _ref, _ref1;
            if (!this.name) {
              throw new Error("'name' property not set for the model");
            }
            params = {
              type: "POST",
              dataType: "json",
              data: {}
            };
            params.url = AJAXURL;
            _action = "" + method + "-" + this.name;
            params.data['action'] = _action;
            switch (method) {
              case 'read':
                params.type = 'GET';
                idAttr = model['idAttribute'];
                params.data[idAttr] = model.get(idAttr);
                break;
              case 'create':
                params.data = _.defaults(model.toJSON(), params.data);
                break;
              case 'update':
                onlyChanged = (_ref = options.onlyChanged) != null ? _ref : false;
                idAttr = model['idAttribute'];
                if (onlyChanged) {
                  params.data[idAttr] = model.get(idAttr);
                  if (model.hasChanged()) {
                    params.data.changes = {};
                    _.each(model.changed, function(changeAttributeValue, changeAttributeName) {
                      return params.data.changes[changeAttributeName] = changeAttributeValue;
                    }, this);
                  }
                } else {
                  params.data = _.defaults(model.toJSON(), params.data);
                }
                break;
              case 'delete':
                allData = (_ref1 = options.allData) != null ? _ref1 : true;
                if (allData) {
                  params.data = _.defaults(model.toJSON(), params.data);
                } else {
                  idAttr = model['idAttribute'];
                  params.data[idAttr] = model.get(idAttr);
                }
            }
            xhr = options.xhr = Backbone.ajax(_.extend(params, options));
            model.trigger("" + method + ":request", model, xhr, options);
            model["_" + method] = xhr;
            return xhr;
          }
        });
        
    
        // Generated by CoffeeScript 1.7.1
        var _Controllers;
        
        Extm._Controllers = _Controllers = {};
        
    
        // Generated by CoffeeScript 1.7.1
        var AppLauncher;
        
        AppLauncher = (function() {
          AppLauncher.prototype.region = null;
        
          AppLauncher.prototype.options = {};
        
          AppLauncher.prototype.appName = '';
        
          function AppLauncher(appName) {
            this.appName = appName;
          }
        
          AppLauncher.prototype.insideRegion = function(region) {
            this.region = region;
            return this;
          };
        
          AppLauncher.prototype.withOptions = function(options) {
            this.options = _.defaults({
              region: this.region
            }, options);
            return this._launch();
          };
        
          AppLauncher.prototype._launch = function() {
            var Controller;
            Controller = this._getControllerClass();
            new Controller(this.options);
            return this._deleteReference();
          };
        
          AppLauncher.prototype._getControllerClass = function() {
            if (_.isUndefined(_Controllers[this.appName])) {
              throw new Error('No such controller registered');
            }
            return _Controllers[this.appName];
          };
        
          AppLauncher.prototype._deleteReference = function() {
            delete this.region;
            delete this.options;
            return delete this.appName;
          };
        
          return AppLauncher;
        
        })();
        
        // Generated by CoffeeScript 1.7.1
        Extm.Store = (function() {
          function Store() {}
        
          Store.prototype.models = {};
        
          Store.prototype.find = function(name, args) {
            var collection, model, models, _models;
            if (args == null) {
              args = null;
            }
            _models = this.models;
            if (_.isUndefined(this.models[name])) {
              this.models[name] = new Backbone.Collection;
            }
            if (_.isNull(args)) {
              this.models[name].url = "" + AJAXURL;
              return $.Deferred(function(deferred) {
                if (_models[name].length === 0) {
                  return _models[name].fetch({
                    data: {
                      action: "fetch-" + name + "s"
                    },
                    success: function(collection) {
                      return deferred.resolve(collection);
                    },
                    error: function(error) {
                      return deferred.reject(error);
                    }
                  });
                } else {
                  return deferred.resolve(_models[name]);
                }
              }).promise();
            }
            if (_.isNumber(args)) {
              model = this.models[name].get(args);
              if (!model) {
                model = new Backbone.Model;
                model.name = name;
                model.set('id', args);
                return $.Deferred(function(deferred) {
                  return model.fetch({
                    success: function(model) {
                      _models[name].add(model);
                      return deferred.resolve(model);
                    },
                    error: function(error) {
                      return deferred.reject(error);
                    }
                  });
                }).promise();
              }
              return $.Deferred(function(deferred) {
                return deferred.resolve(model);
              }).promise();
            }
            if (_.isObject(args)) {
              models = this.models[name].where(args);
              collection = new Backbone.Collection(models);
              if (collection.length === 0) {
                collection.url = "" + AJAXURL;
                return $.Deferred(function(deferred) {
                  return collection.fetch({
                    data: {
                      action: "fetch-" + name + "s",
                      filters: args
                    },
                    success: function(collection) {
                      _models[name].add(collection.models);
                      return deferred.resolve(collection);
                    },
                    error: function(error) {
                      return deferred.reject(error);
                    }
                  });
                }).promise();
              }
              return $.Deferred(function(deferred) {
                return deferred.resolve(collection);
              }).promise();
            }
          };
        
          Store.prototype.push = function(name, value) {
            var model;
            if (_.isUndefined(this.models[name])) {
              this.models[name] = new Backbone.Collection;
            }
            if (_.isArray(value)) {
              return _.each(value, (function(_this) {
                return function(attr, index) {
                  var model;
                  model = new Backbone.Model(attr);
                  model.name = name;
                  return _this.models[name].add(model);
                };
              })(this));
            } else if (_.isObject(value)) {
              model = new Backbone.Model(attr);
              model.name = name;
              return this.models[name].add(model);
            }
          };
        
          Store.prototype._findAll = function() {};
        
          Store.prototype._query = function() {};
        
          return Store;
        
        })();
        
        // Generated by CoffeeScript 1.7.1
        window.msgbus = Backbone.Wreqr.radio.channel("global");
        
        msgbus.request = function() {
          return msgbus.reqres.request.apply(msgbus.reqres, arguments);
        };
        
        msgbus.execute = function() {
          return msgbus.commands.request.apply(msgbus.commands, arguments);
        };
        
        msgbus.registerController = function(name, controller) {
          return _Controllers[name] = controller;
        };
        
        msgbus.registerModel = function(name, model) {
          return _Models[name] = model;
        };
        
        msgbus.showApp = function(appName) {
          var appLauncher;
          appLauncher = new AppLauncher(appName);
          return appLauncher;
        };
        
        msgbus._store = new Extm.Store;
        
    
        // Generated by CoffeeScript 1.7.1
        var __hasProp = {}.hasOwnProperty,
          __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
        
        Extm.Application = (function(_super) {
          __extends(Application, _super);
        
          Application.prototype._staticApps = [];
        
          Application.prototype.histroyStarted = false;
        
          Application.prototype.defaultRoute = '';
        
          function Application(options) {
            if (options == null) {
              options = {};
            }
            this.store = msgbus._store;
            Application.__super__.constructor.call(this, options);
          }
        
          Application.prototype.start = function(options) {
            if (options == null) {
              options = {};
            }
            if (_.size(this.getRegions()) === 0) {
              throw new Error('application regions not specified');
            }
            Application.__super__.start.call(this, options);
            return this.startHistory();
          };
        
          Application.prototype._setUpRegions = function(regions) {
            return this.addRegions(regions);
          };
        
          Application.prototype.startHistory = function() {
            if (!this.histroyStarted) {
              Backbone.history.start();
              if (this.getCurrentRoute() === '') {
                this.navigate(this.defaultRoute, {
                  trigger: true
                });
              }
              this.histroyStarted = true;
              if (this._hasStaticApps()) {
                return this._startStaticApps();
              }
            }
          };
        
          Application.prototype.navigate = function(route, options) {
            return Backbone.history.navigate(route, options);
          };
        
          Application.prototype.setDefaultRoute = function(route) {
            if (route == null) {
              route = '';
            }
            return this.defaultRoute = route;
          };
        
          Application.prototype.getCurrentRoute = function() {
            var frag;
            frag = Backbone.history.fragment;
            if (_.isEmpty(frag)) {
              return '';
            } else {
              return frag;
            }
          };
        
          Application.prototype.addStaticApps = function(apps) {
            return this._staticApps = apps;
          };
        
          Application.prototype._hasStaticApps = function() {
            return _.size(this._staticApps) > 0;
          };
        
          Application.prototype._startStaticApps = function() {
            return _.each(this._staticApps, function(app, index) {
              return msgbus.showApp(app[0]).insideRegion(app[1]).withOptions(_.isUndefined(app[2]) ? {} : app[2]);
            });
          };
        
          return Application;
        
        })(Marionette.Application);
        
        // Generated by CoffeeScript 1.7.1
        var __hasProp = {}.hasOwnProperty,
          __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
          __slice = [].slice;
        
        Extm.RegionController = (function(_super) {
          __extends(RegionController, _super);
        
          function RegionController(options) {
            if (options == null) {
              options = {};
            }
            this.region = false;
            this.currentView = false;
            this._promises = [];
            if (!options.region) {
              throw new Error('Region is not specified for the controller');
            }
            this._assignRegion(options.region);
            this.instanceId = _.uniqueId('region-controller-');
            msgbus.commands.execute('register:controller', this.instanceId, this);
            RegionController.__super__.constructor.call(this, options);
          }
        
          RegionController.prototype._assignRegion = function(region) {
            return this.region = region;
          };
        
          RegionController.prototype.store = function() {
            return this;
          };
        
          RegionController.prototype.find = function(name, args) {
            var promise;
            promise = msgbus._store.find(name, args);
            this._promises.push(promise);
            return promise;
          };
        
          RegionController.prototype.wait = function() {
            return $.when.apply($, this._promises).done((function(_this) {
              return function() {
                var resolved;
                resolved = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
                resolved.unshift('complete');
                return _this.triggerMethod.apply(_this, resolved);
              };
            })(this));
          };
        
          RegionController.prototype.destroy = function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            delete this.region;
            delete this.currentView;
            delete this.options;
            msgbus.commands.execute("unregister:controller", this.instanceId, this);
            return RegionController.__super__.destroy.call(this, args);
          };
        
          RegionController.prototype.show = function(view) {
            this.currentView = view;
            return this.region.show(view);
          };
        
          return RegionController;
        
        })(Marionette.Controller);
        
        // Generated by CoffeeScript 1.7.1
        Marionette.Renderer.render = function(template, data) {
          if (data == null) {
            data = {};
          }
          if (!template) {
            template = '';
          }
          return Mustache.to_html(template, data);
        };
        
    
        // Generated by CoffeeScript 1.7.1
        var __hasProp = {}.hasOwnProperty,
          __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
        
        Extm.FormView = (function(_super) {
          __extends(FormView, _super);
        
          function FormView() {
            return FormView.__super__.constructor.apply(this, arguments);
          }
        
          FormView.prototype.tagName = 'form';
        
          FormView.prototype.className = 'extm-form-view';
        
          FormView.prototype.onShow = function() {
            return this.$el.validate();
          };
        
          return FormView;
        
        })(Marionette.ItemView);
        
        // Generated by CoffeeScript 1.7.1
        var __hasProp = {}.hasOwnProperty,
          __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };
        
        Extm.FormLayoutView = (function(_super) {
          __extends(FormLayoutView, _super);
        
          function FormLayoutView() {
            return FormLayoutView.__super__.constructor.apply(this, arguments);
          }
        
          FormLayoutView.prototype.tagName = 'form';
        
          FormLayoutView.prototype.className = 'extm-form-layout-view';
        
          FormLayoutView.prototype.onShow = function() {
            return this.$el.validate();
          };
        
          return FormLayoutView;
        
        })(Marionette.LayoutView);
        
    
        return Extm;
    
    })( this, Backbone, _, Marionette, Mustache, async );

    Marionette.Extm = Extm;

    return Extm;
} );

define('src/classes/ap-store',['underscore', 'extm', 'async'], function(_, Extm, async) {
  return _.extend(Extm.Store.prototype, {
    getUnits: function(unittypeid) {
      var Collection, Model, buildingArray, unitColl;
      unittypeid = parseInt(unittypeid);
      buildingArray = Array();
      unitColl = Array();
      Model = Backbone.Model.extend({});
      Collection = Backbone.Collection.extend({
        model: Model
      });
      return App.store.find('unit', {
        unitType: unittypeid,
        status: 'Available'
      }).then(function(result) {
        var itemcoll, units;
        units = result;
        itemcoll = result;
        units.each(function(item) {
          var maxcoll;
          maxcoll = Array();
          if (buildingArray.indexOf(item.get('building')) === -1) {
            return buildingArray.push(item.get('building'));
          }
        });
        $.each(buildingArray, function(index, value) {
          var buildingid, highArray, high_max_val, high_min_val, itemCollection, lowArray, low_max_val, low_min_val, mainArray, mediumArray, medium_max_val, medium_min_val, newunits;
          itemCollection = new Collection();
          buildingid = value;
          console.log(value);
          newunits = units.where({
            'building': value
          });
          console.log(newunits);
          lowArray = Array();
          mediumArray = Array();
          highArray = Array();
          mainArray = Array();
          $.each(newunits, function(index1, value1) {
            App.store.find('low').then(function(result) {
              var lowcount;
              console.log(result);
              return lowcount = result.filter(function(x) {
                if (x.get('id') === value1.get('floor')) {
                  return lowArray.push(value1.get('id'));
                }
              });
            });
            App.store.find('medium').then(function(result) {
              var mediumcount;
              console.log(result);
              return mediumcount = result.filter(function(x) {
                if (x.get('id') === value1.get('floor')) {
                  return mediumArray.push(value1.get('id'));
                }
              });
            });
            return App.store.find('high').then(function(result) {
              var highcount;
              console.log(result);
              return highcount = result.filter(function(x) {
                if (x.get('id') === value1.get('floor')) {
                  return highArray.push(value1.get('id'));
                }
              });
            });
          });
          console.log(lowArray.length);
          console.log(mediumArray.length);
          console.log(highArray.length);
          low_max_val = 0;
          low_min_val = 0;
          medium_max_val = 0;
          medium_min_val = 0;
          high_min_val = 0;
          high_max_val = 0;
          $.each(lowArray, function(index2, value2) {
            console.log(value2);
            return App.store.find('unit', value2).then(function(result) {
              return App.store.find('unit_type', result.get('unitType')).then(function(result) {}, App.store.find('unit', {
                unitType: result.get('id'),
                status: 'Available'
              }).then(function(result) {
                var max_coll;
                max_coll = Array();
                result.each(function(unit) {
                  return App.store.find('unit_variant', unit.get('unitVariant')).then(function(result) {
                    return max_coll.push(result.get('sellablearea'));
                  });
                });
                console.log(low_max_val = Math.max.apply(Math, max_coll));
                return console.log(low_min_val = Math.min.apply(Math, max_coll));
              }));
            });
          });
          $.each(mediumArray, function(index2, value2) {
            console.log(value2);
            return App.store.find('unit', value2).then(function(result) {
              return App.store.find('unit_type', result.get('unitType')).then(function(result) {
                return App.store.find('unit', {
                  unitType: result.get('id'),
                  status: 'Available'
                }).then(function(result) {
                  var max_coll;
                  max_coll = Array();
                  result.each(function(unit) {
                    return App.store.find('unit_variant', unit.get('unitVariant')).then(function(result) {
                      return max_coll.push(result.get('sellablearea'));
                    });
                  });
                  console.log(medium_max_val = Math.max.apply(Math, max_coll));
                  return console.log(medium_min_val = Math.min.apply(Math, max_coll));
                });
              });
            });
          });
          $.each(highArray, function(index2, value2) {
            console.log(value2);
            return App.store.find('unit', value2).then(function(result) {
              return App.store.find('unit_type', result.get('unitType')).then(function(result) {
                return App.store.find('unit', {
                  unitType: result.get('id'),
                  status: 'Available'
                }).then(function(result) {
                  var max_coll;
                  max_coll = Array();
                  result.each(function(unit) {
                    return App.store.find('unit_variant', unit.get('unitVariant')).then(function(result) {
                      return max_coll.push(result.get('sellablearea'));
                    });
                  });
                  console.log(high_max_val = Math.max.apply(Math, max_coll));
                  return console.log(high_min_val = Math.min.apply(Math, max_coll));
                });
              });
            });
          });
          console.log(buildingid);
          mainArray.push({
            name: lowArray.length,
            low_max_val: low_max_val,
            low_min_val: low_min_val,
            range: 'low',
            unitType: unittypeid,
            buildingid: buildingid
          });
          mainArray.push({
            name: mediumArray.length,
            low_max_val: medium_max_val,
            low_min_val: medium_min_val,
            range: 'medium',
            unitType: unittypeid,
            buildingid: buildingid
          });
          mainArray.push({
            name: highArray.length,
            low_max_val: high_max_val,
            low_min_val: high_min_val,
            range: 'high',
            unitType: unittypeid,
            buildingid: buildingid
          });
          itemCollection.reset(mainArray);
          console.log(itemCollection);
          return App.store.find('building', value).then(function(result) {
            console.log({
              buildingname: result.get('name'),
              units: itemCollection,
              unitType: unittypeid,
              buildingid: result.get('id')
            });
            return unitColl.push({
              buildingname: result.get('name'),
              units: itemCollection,
              unitType: unittypeid,
              buildingid: result.get('id')
            });
          });
        });
        units.reset();
        units.add(unitColl);
        console.log(units);
        return units;
      });
    },
    getAllUnits: function(buildingid, unittypeid, range) {
      var Collection, Model;
      console.log(buildingid);
      console.log(unittypeid);
      Model = Backbone.Model.extend({});
      Collection = Backbone.Collection.extend({
        model: Model
      });
      return App.store.find('unit', {
        unitType: parseInt(unittypeid),
        building: parseInt(buildingid)
      }).then(function(result) {
        var floorArray, unitcollection;
        unitcollection = result;
        floorArray = Array();
        App.store.find(range).then(function(result) {
          return result.each(function(item) {
            var collection, unitArray;
            collection = new Collection();
            unitArray = Array();
            unitcollection.each(function(unit) {
              console.log(item.get('id'));
              console.log(unit.get('floor'));
              if (parseInt(item.get('id')) === parseInt(unit.get('floor'))) {
                App.store.find('unit_variant', unit.get('unitVariant')).then(function(result) {
                  unit.set('size', result.get('sellablearea'));
                  return App.store.find('view', unit.get('view')).then(function(result) {
                    unit.set('view_name', result.get('  '));
                    return unit.set('range', range);
                  });
                });
                return unitArray.push(unit);
              }
            });
            collection.add(unitArray);
            return floorArray.push({
              floorid: item.get('id'),
              units: collection
            });
          });
        });
        console.log(floorArray);
        unitcollection.reset();
        console.log(unitcollection);
        unitcollection.add(floorArray);
        console.log(unitcollection);
        return unitcollection;
      });
    },
    getSingleUnit: function(unit) {
      return App.store.find('unit', parseInt(unit)).then(function(result) {
        unit = result;
        return App.store.find('unit_variant', unit.get('unitVariant')).then(function(result) {
          unit.set('unit_variant_name', result.get('sellablearea'));
          return App.store.find('unit_type', unit.get('unitType')).then(function(result) {
            unit.set('unit_type_name', result.get('name'));
            return App.store.find('view', unit.get('view')).then(function(result) {
              unit.set('view_name', result.get('name'));
              return unit;
            });
          });
        });
      });
    },
    getHeaderView: function(opt) {
      var Model, count, modelnew;
      if (opt == null) {
        opt = {};
      }
      console.log(opt);
      Model = Backbone.Model.extend({});
      modelnew = new Model();
      count = Object.keys(opt).length;
      return modelnew;
    }
  });
});

// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/router',['marionette'], function(Marionette) {
  var ApartmentSelector, RouterAPI;
  ApartmentSelector = (function(_super) {
    __extends(ApartmentSelector, _super);

    function ApartmentSelector() {
      return ApartmentSelector.__super__.constructor.apply(this, arguments);
    }

    ApartmentSelector.prototype.appRoutes = {
      'wishList': 'showpopup',
      'screen-four': 'showSelectedUnit',
      'screen-three': 'showUnits',
      'screen-two': 'show',
      'screen-one': 'showValues',
      ':params': 'showValues',
      'screen-two/:params': 'show',
      'screen-three/:params': 'showUnits',
      'screen-four/:params': 'showSelectedUnit'
    };

    return ApartmentSelector;

  })(Marionette.AppRouter);
  RouterAPI = {
    showValues: function(params) {
      var element, key, screentwoArray, _i, _len;
      if (params == null) {
        params = {};
      }
      msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
      App.backFilter['screen2'] = [];
      App.backFilter['screen3'] = [];
      App.layout.screenThreeRegion.el.innerHTML = "";
      App.layout.screenTwoRegion.el.innerHTML = "";
      App.layout.screenFourRegion.el.innerHTML = "";
      $('#screen-two-region').removeClass('section');
      $('#screen-three-region').removeClass('section');
      $('#screen-four-region').removeClass('section');
      screentwoArray = App.backFilter['screen1'];
      for (_i = 0, _len = screentwoArray.length; _i < _len; _i++) {
        element = screentwoArray[_i];
        key = App.defaults.hasOwnProperty(element);
        if (key === true) {
          App.defaults[element] = 'All';
        }
      }
      App.currentStore.unit.reset(UNITS);
      App.currentStore.building.reset(BUILDINGS);
      App.currentStore.unit_type.reset(UNITTYPES);
      App.currentStore.unit_variant.reset(UNITVARIANTS);
      App.filter(params);
      return msgbus.showApp('screen:one').insideRegion(App.layout.screenOneRegion).withOptions();
    },
    show: function(params) {
      var element, flag, key, screentwoArray, _i, _len;
      if (params == null) {
        params = {};
      }
      flag = 0;
      $.map(App.defaults, function(value, index) {
        if (value !== 'All') {
          return flag = 1;
        }
      });
      if (flag === 0) {
        msgbus.showApp('main:app').insideRegion(App.mainRegion).withOptions();
        msgbus.showApp('screen:one').insideRegion(App.layout.screenOneRegion).withOptions();
      } else {
        App.layout.screenThreeRegion.el.innerHTML = "";
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-three-region').removeClass('section');
        $('#screen-four-region').removeClass('section');
        App.backFilter['screen3'] = [];
        screentwoArray = App.backFilter['screen2'];
        for (_i = 0, _len = screentwoArray.length; _i < _len; _i++) {
          element = screentwoArray[_i];
          key = App.defaults.hasOwnProperty(element);
          if (key === true) {
            App.defaults[element] = 'All';
          }
        }
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.filter(params);
        setTimeout(function(x) {
          return msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
        }, 1000);
      }
      return msgbus.showApp('screen:two').insideRegion(App.layout.screenTwoRegion).withOptions();
    },
    showUnits: function(params) {
      var flag;
      if (params == null) {
        params = {};
      }
      flag = 0;
      $.map(App.defaults, function(value, index) {
        if (value !== 'All') {
          return flag = 1;
        }
      });
      if (flag === 0) {
        msgbus.showApp('main:app').insideRegion(App.mainRegion).withOptions();
        msgbus.showApp('screen:one').insideRegion(App.layout.screenOneRegion).withOptions();
        msgbus.showApp('screen:two').insideRegion(App.layout.screenTwoRegion).withOptions();
      } else {
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-four-region').removeClass('section');
        App.layout.screenFourRegion.el.innerHTML = "";
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.filter(params = {});
        setTimeout(function(x) {
          return msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
        }, 1000);
      }
      return msgbus.showApp('screen:three').insideRegion(App.layout.screenThreeRegion).withOptions();
    },
    showSelectedUnit: function(params) {
      var flag;
      if (params == null) {
        params = {};
      }
      App.filter(params = {});
      flag = 0;
      $.map(App.defaults, function(value, index) {
        if (value !== 'All') {
          return flag = 1;
        }
      });
      if (flag === 0) {
        msgbus.showApp('main:app').insideRegion(App.mainRegion).withOptions();
        msgbus.showApp('screen:one').insideRegion(App.layout.screenOneRegion).withOptions();
        msgbus.showApp('screen:two').insideRegion(App.layout.screenTwoRegion).withOptions();
        msgbus.showApp('screen:three').insideRegion(App.layout.screenThreeRegion).withOptions();
      } else {
        setTimeout(function(x) {
          return msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
        }, 1000);
      }
      return msgbus.showApp('screen:four').insideRegion(App.layout.screenFourRegion).withOptions();
    },
    showpopup: function() {
      msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
      return msgbus.showApp('popup').insideRegion(App.mainRegion).withOptions();
    }
  };
  return new ApartmentSelector({
    controller: RouterAPI
  });
});

var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/footer/footer-view',['marionette'], function(Mariontte) {
  var FooterView;
  return FooterView = (function(_super) {
    __extends(FooterView, _super);

    function FooterView() {
      return FooterView.__super__.constructor.apply(this, arguments);
    }

    FooterView.prototype.template = 'Footer view';

    return FooterView;

  })(Marionette.ItemView);
});

var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/footer/footer-controller',['extm', 'src/apps/footer/footer-view'], function(Extm, FooterView) {
  var FooterController;
  FooterController = (function(_super) {
    __extends(FooterController, _super);

    function FooterController() {
      return FooterController.__super__.constructor.apply(this, arguments);
    }

    FooterController.prototype.initialize = function() {
      return this.wait();
    };

    FooterController.prototype.onComplete = function() {
      return this.show(new FooterView);
    };

    return FooterController;

  })(Extm.RegionController);
  return msgbus.registerController('footer', FooterController);
});

// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/header/header-view',['marionette'], function(Mariontte) {
  var HeaderView;
  return HeaderView = (function(_super) {
    __extends(HeaderView, _super);

    function HeaderView() {
      return HeaderView.__super__.constructor.apply(this, arguments);
    }

    HeaderView.prototype.template = '<div class="backBtn {{textClass}}"> <a  class="back text-white"><span class="glyphicon glyphicon-chevron-left "></span></a> </div> <div class="rightBtns  {{btnClass}}"> <a  id="showTop" class="text-white hidden"><span class="glyphicon glyphicon-filter"></span></a> <a id="showRightPush" class="text-white hidden "><span class="glyphicon glyphicon-user"></span></a> </div> <div class="text-center"> <h3 class="m-t-15 light"><span class="slctnTxt">Your selection</span> <span id="textstring"></span> </h3> </div>';

    HeaderView.prototype.className = "header navbar navbar-inverse";

    HeaderView.prototype.events = {
      'click .back': function(e) {
        var element, key, myArray, params, screenoneArray, screenthreeArray, screentwoArray, _i, _j, _k, _len, _len1, _len2;
        if (window.location.href.indexOf('screen-three') > -1) {
          App.backFilter['screen3'] = [];
          screentwoArray = App.backFilter['screen2'];
          for (_i = 0, _len = screentwoArray.length; _i < _len; _i++) {
            element = screentwoArray[_i];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          App.defaults['view'] = 'All';
          App.defaults['facing'] = 'All';
          App.defaults['terrace'] = 'All';
          App.defaults['unitVariant'] = 'All';
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          key = App.defaults.hasOwnProperty(App.screenOneFilter['key']);
          if (key === true) {
            App.defaults[App.screenOneFilter['key']] = App.screenOneFilter['value'];
          }
          e.preventDefault();
          App.filter(params = {});
          App.layout.screenThreeRegion.el.innerHTML = "";
          $('#screen-three-region').removeClass('section');
          return App.navigate("screen-two", {
            trigger: true
          });
        } else if (window.location.href.indexOf('screen-four') > -1) {
          screenthreeArray = App.backFilter['screen3'];
          for (_j = 0, _len1 = screenthreeArray.length; _j < _len1; _j++) {
            element = screenthreeArray[_j];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = App.defaults['floor'];
            }
          }
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          e.preventDefault();
          App.filter(params = {});
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-four-region').removeClass('section');
          return App.navigate("screen-three", {
            trigger: true
          });
        } else {
          $('.specialFilter').empty();
          $('.specialFilter').addClass('hidden');
          $('.b-modal').addClass('hidden');
          App.backFilter['screen2'] = [];
          screenoneArray = App.backFilter['screen1'];
          myArray = [];
          $.map(App.defaults, function(value, index) {
            if (value !== 'All') {
              return myArray.push({
                key: index,
                value: value
              });
            }
          });
          for (_k = 0, _len2 = myArray.length; _k < _len2; _k++) {
            element = myArray[_k];
            App.defaults[element.key] = 'All';
          }
          App.defaults['view'] = 'All';
          App.defaults['facing'] = 'All';
          App.defaults['terrace'] = 'All';
          App.defaults['unitVariant'] = 'All';
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          e.preventDefault();
          App.filter(params = {});
          App.layout.screenTwoRegion.el.innerHTML = "";
          $('#screen-two-region').removeClass('section');
          App.navigate("screen-one", {
            trigger: true
          });
          return App.navigate("");
        }
      }
    };

    HeaderView.prototype.onShow = function() {
      var body, cookieOldValue, disableOther, flag, menuRight, menuTop, showRightPush, textString;
      textString = Marionette.getOption(this, 'textString');
      $('#textstring').html(textString);
      flag = 0;
      if (window.location.href.indexOf('wishList') > -1) {
        flag = 1;
      }
      $(window).scroll(function() {
        var height;
        flag = 0;
        height = $(window).scrollTop();
        if (height === 0 && flag === 0) {
          $('.backBtn').addClass('hidden');
          return $('h3').addClass('step1');
        }
      });
      disableOther = function(button) {
        if (button !== "showRightPush") {
          classie.toggle(showRightPush, "disabled");
        }
      };
      menuRight = document.getElementById("cbp-spmenu-s2");
      menuTop = document.getElementById("cbp-spmenu-s3");
      showRightPush = document.getElementById("showRightPush");
      body = document.body;
      showTop.onclick = function() {
        classie.toggle(this, "active");
        classie.toggle(menuTop, "cbp-spmenu-open");
        disableOther("showTop");
      };
      showRightPush.onclick = function() {
        classie.toggle(this, "active");
        classie.toggle(body, "cbp-spmenu-push-toleft");
        classie.toggle(menuRight, "cbp-spmenu-open");
        disableOther("showRightPush");
      };
      if (window.location.href.indexOf('screen-two') > -1 || window.location.href.indexOf('screen-three') > -1 || window.location.href.indexOf('screen-four') > -1) {
        true;
      } else if (window.location.href.indexOf('wishList') > -1) {
        $('#showRightPush').addClass('hidden');
        $('.backBtn').addClass('hidden');
        $('.slctnTxt').addClass('hidden');
        $('h3').addClass('step1');
      } else {
        $('.backBtn').addClass('hidden');
        $('.slctnTxt').addClass('hidden');
        $('h3').addClass('step1');
      }
      cookieOldValue = localStorage.getItem("cookievalue");
      if (cookieOldValue === void 0 || cookieOldValue === "") {
        cookieOldValue = [];
      } else {
        cookieOldValue = cookieOldValue.split(',').map(function(item) {
          return parseInt(item);
        });
      }
      if (cookieOldValue.length >= 1) {
        return $("#showRightPush").removeClass("hidden");
      }
    };

    return HeaderView;

  })(Marionette.ItemView);
});

// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/header/header-controller',['extm', 'src/apps/header/header-view'], function(Extm, HeaderView) {
  var HeaderController;
  HeaderController = (function(_super) {
    __extends(HeaderController, _super);

    function HeaderController() {
      return HeaderController.__super__.constructor.apply(this, arguments);
    }

    HeaderController.prototype.initialize = function(opt) {
      var view;
      if (opt == null) {
        opt = {};
      }
      this.model = this._getHeader();
      this.view = view = this._getHeaderView(this.model);
      return this.show(view);
    };

    HeaderController.prototype._getHeaderView = function(model) {
      return new HeaderView({
        textString: model[0],
        templateHelpers: {
          textString: model[0],
          textClass: model[1]
        }
      });
    };

    HeaderController.prototype._getHeader = function() {
      var btnClass, buildingModel, f, first, flag, floorriserange, myArray, param, paramkey, range, templateArr, templateString, textClass, track, trackArray, units;
      templateArr = [];
      flag = 0;
      myArray = [];
      param = {};
      paramkey = {};
      flag = 0;
      track = 0;
      f = 1;
      trackArray = [];
      units = App.master.unit;
      $.map(App.defaults, function(value, index) {
        if (value !== 'All') {
          return myArray.push({
            key: index,
            value: value
          });
        }
      });
      $.each(myArray, function(index, value) {
        var budget_Val, element, key, string_val, valuearr, _i, _len, _results;
        if (value.value !== 'All') {
          param[value.key] = value.value;
          string_val = _.isString(value.value);
          valuearr = "";
          if (string_val === true) {
            valuearr = value.value.split(',');
          }
          if (valuearr.length > 1) {
            _results = [];
            for (_i = 0, _len = valuearr.length; _i < _len; _i++) {
              element = valuearr[_i];
              if (value.key === 'unitType') {
                key = App.master.unit_type.findWhere({
                  id: parseInt(element)
                });
                templateArr.push('<span>' + key.get('name') + '</span>');
              }
              if (value.key === 'budget') {
                budget_Val = value + 'lakhs';
                templateArr.push('<span>' + budget_Val + '</span>');
              }
              if (value.key === 'building') {
                key = App.master.building.findWhere({
                  id: parseInt(element)
                });
                templateArr.push('<span>' + key.get('name') + '</span>');
              }
              if (value.key === 'floor') {
                if (track === 0) {
                  trackArray.push(value.value);
                }
                flag = 1;
                _results.push(track = 1);
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } else {
            if (value.key === 'unitType') {
              key = App.master.unit_type.findWhere({
                id: parseInt(value.value)
              });
              templateArr.push('<span>' + key.get('name') + '</span>');
            }
            if (value.key === 'budget') {
              budget_Val = value.value;
              templateArr.push('<span>' + budget_Val + '</span>');
            }
            if (value.key === 'building') {
              key = App.master.building.findWhere({
                id: parseInt(value.value)
              });
              templateArr.push('<span>' + key.get('name') + '</span>');
            }
            if (value.key === 'floor') {
              if (track === 0) {
                trackArray.push(value.value);
              }
              flag = 1;
              return track = 1;
            }
          }
        }
      });
      if (templateArr.length === 0) {
        templateArr.push('<span>All</span>');
      }
      if (flag === 1) {
        buildingModel = App.master.building.findWhere({
          id: App.defaults['building']
        });
        floorriserange = buildingModel.get('floorriserange');
        first = _.first(trackArray);
        if (parseInt(first) >= parseInt(floorriserange[0].start) && parseInt(first) <= parseInt(floorriserange[0].end)) {
          range = 'Lowrise';
          templateArr.push('<span>' + range + '</span>');
        }
        if (parseInt(first) >= parseInt(floorriserange[1].start) && parseInt(first) <= parseInt(floorriserange[1].end)) {
          range = 'Midrise';
          templateArr.push('<span>' + range + '</span>');
        }
        if (parseInt(first) >= parseInt(floorriserange[2].start) && parseInt(first) <= parseInt(floorriserange[2].end)) {
          range = 'Highrise';
          templateArr.push('<span>' + range + '</span>');
        }
        templateString = templateArr;
      } else {
        templateString = templateArr;
      }
      textClass = "hidden";
      btnClass = "";
      if (window.location.href.indexOf('screen-two') > -1 || window.location.href.indexOf('screen-three') > -1 || window.location.href.indexOf('screen-four') > -1) {
        textClass = "";
      } else if (window.location.href.indexOf('wishList') > -1) {
        templateString = "<span>WishList Comparison</span>";
        textClass = "";
        btnClass = "hidden";
      } else {
        templateString = "<span>Apartment Selector</span>";
      }
      $('#textstring').text("");
      return [templateString, textClass];
    };

    return HeaderController;

  })(Extm.RegionController);
  return msgbus.registerController('header', HeaderController);
});

// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/screen-one/screen-one-view',['marionette'], function(Marionette) {
  var ScreenOneView, UnitTypeView, m, object, unitType;
  unitType = [];
  object = "";
  m = "";
  UnitTypeView = (function(_super) {
    __extends(UnitTypeView, _super);

    function UnitTypeView() {
      return UnitTypeView.__super__.constructor.apply(this, arguments);
    }

    UnitTypeView.prototype.className = "grid-block-1";

    UnitTypeView.prototype.template = '<a class="grid-link"> <div class="grid-text-wrap"> <span class="grid-main-title">{{name}}</span> <span class="grid-sub-title">{{min_value}}  {{to}}  {{max_value}} {{sqft}} </span> <input type="hidden" name="check{{id}}"   id="check{{id}}"       value="0" /> </div> </a>';

    UnitTypeView.prototype.events = {
      'click ': 'unitTypeSelected',
      'click #checknopreferences': function() {}
    };

    UnitTypeView.prototype.initialize = function() {
      return this.$el.prop("id", 'unittype' + this.model.get("id"));
    };

    UnitTypeView.prototype.unitTypeSelected = function(evt) {
      var buildings, element, index, masterbuilding, newColl, newUnits, status, uniqBuildings, unitTypeModel, unitTypeString, _i, _j, _len, _len1;
      if (this.model.get('id') === 'nopreferences') {
        if (parseInt($("#check" + this.model.get('id')).val()) === 0) {
          $('#unittype' + this.model.get("id") + ' a').addClass('selected');
          App.defaults['unitType'] = 'All';
          for (index = _i = 0, _len = unitType.length; _i < _len; index = ++_i) {
            element = unitType[index];
            $("#check" + element).val('0');
            $('#unittype' + element + ' a').removeClass('selected');
            App.backFilter['screen1'] = [];
          }
          $('#showbudget').removeClass('hidden');
          masterbuilding = App.master.building;
          masterbuilding.each(function(index) {
            return $("#hglighttower" + index.get('id')).attr('class', 'overlay');
          });
          $("#check" + this.model.get('id')).val("1");
          this.showBuildings();
        } else {
          App.backFilter['screen1'] = [];
          $('#showbudget').addClass('hidden');
          $("#check" + this.model.get('id')).val("0");
          masterbuilding = App.master.building;
          masterbuilding.each(function(index) {
            return $("#hglighttower" + index.get('id')).attr('class', 'overlay');
          });
          $('#unittype' + this.model.get("id") + ' a').removeClass('selected');
          $("#finalButton").addClass('disabled btn-default');
          $("#finalButton").removeClass('btn-primary');
        }
        unitType = [];
        return false;
      }
      $.map(App.backFilter, function(value, index) {
        var key, screenArray, _j, _len1, _results;
        screenArray = App.backFilter[index];
        _results = [];
        for (_j = 0, _len1 = screenArray.length; _j < _len1; _j++) {
          element = screenArray[_j];
          key = App.defaults.hasOwnProperty(element);
          if (key === true) {
            _results.push(App.defaults[element] = 'All');
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      $('#showbudget').addClass('hidden');
      App.layout.screenTwoRegion.el.innerHTML = "";
      App.layout.screenThreeRegion.el.innerHTML = "";
      App.layout.screenFourRegion.el.innerHTML = "";
      App.navigate("");
      App.defaults['view'] = 'All';
      App.defaults['facing'] = 'All';
      App.defaults['terrace'] = 'All';
      App.defaults['unitVariant'] = 'All';
      App.currentStore.unit.reset(UNITS);
      App.currentStore.building.reset(BUILDINGS);
      App.currentStore.unit_type.reset(UNITTYPES);
      App.currentStore.unit_variant.reset(UNITVARIANTS);
      App.currentStore.terrace.reset(TERRACEOPTIONS);
      App.currentStore.view.reset(VIEWS);
      App.currentStore.facings.reset(FACINGS);
      evt.preventDefault();
      msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
      $("#checknopreferences").val("0");
      $('a').removeClass('selected');
      for (index = _j = 0, _len1 = unitType.length; _j < _len1; index = ++_j) {
        element = unitType[index];
        if (parseInt(element) === parseInt(this.model.get('id'))) {
          $("#check" + this.model.get('id')).val('1');
        } else {
          $("#check" + element).val('0');
          unitType = [];
          App.backFilter['screen1'] = [];
        }
      }
      if (parseInt($("#check" + this.model.get('id')).val()) === 0) {
        unitType.push(this.model.get('id'));
        App.backFilter['screen1'].push('unitType');
        $('#unittype' + this.model.get("id") + ' a').addClass('selected');
        $("#check" + this.model.get('id')).val("1");
      } else {
        this.unHighlightedTowers();
        unitType = [];
        App.backFilter['screen1'] = [];
        $("#check" + this.model.get('id')).val("0");
      }
      if (parseInt($("#check" + this.model.get('id')).val()) === 0) {
        $("#finalButton").addClass('disabled btn-default');
        $("#finalButton").removeClass('btn-primary');
        $("#finalButton").text("Show Apartments");
        $('#screen-two-region').removeClass('section');
        $('#screen-three-region').removeClass('section');
        $('#screen-four-region').removeClass('section');
        return false;
      }
      unitTypeString = unitType.join(',');
      App.defaults['unitType'] = unitTypeString;
      $('#screen-two-region').removeClass('section');
      $('#screen-three-region').removeClass('section');
      $('#screen-four-region').removeClass('section');
      App.screenOneFilter['value'] = unitTypeString;
      App.screenOneFilter['key'] = 'unitType';
      $("#finalButton").removeClass('disabled btn-default');
      $("#finalButton").addClass('btn-primary');
      unitTypeModel = App.master.unit_type.findWhere({
        id: parseInt(App.defaults['unitType'])
      });
      $("#finalButton").text("Show " + unitTypeModel.get('name') + " Apartments");
      status = App.currentStore.status.findWhere({
        'name': 'Available'
      });
      newUnits = App.currentStore.unit.where({
        unitType: parseInt(App.defaults['unitType']),
        status: status.get('id')
      });
      newColl = new Backbone.Collection(newUnits);
      buildings = newColl.pluck("building");
      uniqBuildings = _.uniq(buildings);
      return this.showHighlightedTowers(uniqBuildings);
    };

    object = UnitTypeView;

    UnitTypeView.prototype.showHighlightedTowers = function(uniqBuildings) {
      var building, masterbuilding;
      masterbuilding = App.master.building;
      masterbuilding.each(function(index) {
        return $("#hglighttower" + index.get('id')).attr('class', 'overlay');
      });
      building = uniqBuildings;
      return $.each(uniqBuildings, function(index, value) {
        var buidlingValue;
        buidlingValue = App.master.building.findWhere({
          id: parseInt(value)
        });
        return $("#hglighttower" + buidlingValue.get('id')).attr('class', 'overlay highlight');
      });
    };

    UnitTypeView.prototype.unHighlightedTowers = function() {
      var masterbuilding;
      masterbuilding = App.master.building;
      return masterbuilding.each(function(index) {
        return $("#hglighttower" + index.get('id')).attr('class', 'overlay');
      });
    };

    UnitTypeView.prototype.showBuildings = function(e) {
      var budget_price, budget_val, buildings, newColl, newUnits, uniqBuildings;
      $.map(App.backFilter, function(value, index) {
        var element, key, screenArray, _i, _len, _results;
        screenArray = App.backFilter[index];
        _results = [];
        for (_i = 0, _len = screenArray.length; _i < _len; _i++) {
          element = screenArray[_i];
          key = App.defaults.hasOwnProperty(element);
          if (key === true) {
            _results.push(App.defaults[element] = 'All');
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      });
      if ($(".cs-placeholder").text() !== 'Choose a budget') {
        budget_val = $(".cs-selected").text().split(' ');
        if (budget_val[1] === 'lakhs') {
          budget_price = budget_val[0].split('-');
          budget_price[0] = budget_price[0] + '00000';
          budget_price[1] = budget_price[1] + '00000';
          budget_price = budget_price.join('-');
        }
        App.defaults['budget'] = $(".cs-selected").text();
        App.backFilter['screen1'].push('budget');
        App.screenOneFilter['value'] = $(".cs-selected").text();
        App.screenOneFilter['key'] = 'budget';
      } else {
        App.defaults['budget'] = 'All';
      }
      $('#screen-two-region').removeClass('section');
      $('#screen-three-region').removeClass('section');
      $('#screen-four-region').removeClass('section');
      App.layout.screenTwoRegion.el.innerHTML = "";
      App.layout.screenThreeRegion.el.innerHTML = "";
      App.layout.screenFourRegion.el.innerHTML = "";
      App.navigate("");
      App.defaults['view'] = 'All';
      App.defaults['facing'] = 'All';
      App.defaults['terrace'] = 'All';
      App.defaults['unitVariant'] = 'All';
      App.currentStore.unit.reset(UNITS);
      App.currentStore.building.reset(BUILDINGS);
      App.currentStore.unit_type.reset(UNITTYPES);
      App.currentStore.unit_variant.reset(UNITVARIANTS);
      App.currentStore.terrace.reset(TERRACEOPTIONS);
      App.currentStore.view.reset(VIEWS);
      App.currentStore.facings.reset(FACINGS);
      msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
      App.defaults['unitType'] = 'All';
      $("#finalButton").removeClass('disabled btn-default');
      $("#finalButton").addClass('btn-primary');
      $("#finalButton").text("Show Apartments in my Budget");
      budget_val = $(".cs-selected").text().split(' ');
      newUnits = App.getBudget(budget_val[0]);
      newColl = new Backbone.Collection(newUnits);
      buildings = newColl.pluck("building");
      uniqBuildings = _.uniq(buildings);
      return this.showHighlightedTowers(uniqBuildings);
    };

    return UnitTypeView;

  })(Marionette.ItemView);
  return ScreenOneView = (function(_super) {
    __extends(ScreenOneView, _super);

    function ScreenOneView() {
      return ScreenOneView.__super__.constructor.apply(this, arguments);
    }

    ScreenOneView.prototype.template = '<h3 class="light text-center m-t-0">3 STEPS TO FINDING YOUR APARTMENT</h3> <h4 class="text-center introTxt">We at Skyi have built a unique apartment selector for you.<br>Of the hundreds of apartments available you can now find the one that best fits your requirements.</h4> <!--<div class="text-center introTxt">The apartment selector helps you find your ideal home. Browse through available apartments and find the location, size, budget and layout that best suit you.</div> <div class="introTxt text-center">To get started, either:</div>--> <div class="row m-l-0 m-r-0 bgClass"> <div class="col-md-5 col-lg-4"> <div class="text-center subTxt">Choose a preference</div> <div class="grid-container"></div> <!--<h5 class="text-center m-t-20 m-b-20 bold">OR</h5>--> <div id="showbudget" class="hidden"><!--<div class="text-center subTxt">Choose a budget</div>--> <section> <select class="cs-select cs-skin-underline" id="budgetValue"> {{#priceArray}} <option value="{{id}}" {{class}}>{{name}}</option> {{/priceArray}} </select> </section></div> <div class="h-align-middle m-t-50 m-b-20"> <a href="#screen-two-region" class="btn btn-default btn-lg disabled" id="finalButton">Show Apartments</a> </div> </div> <div class="col-md-7 col-lg-8 b-grey b-l visible-md visible-lg"> <div id="mapplic_new1" class="towersMap center-block"></div> </div><input type="hidden" name="currency" id="currency" class="demo" data-a-sign="Rs. " data-m-dec=""  data-d-group="2" > </div>';

    ScreenOneView.prototype.className = 'page-container row-fluid';

    ScreenOneView.prototype.childView = UnitTypeView;

    ScreenOneView.prototype.childViewContainer = '.grid-container';

    ScreenOneView.prototype.events = {
      'click #finalButton': function(e) {
        var budget_price, budget_val;
        if (App.defaults['unitType'] === 'All') {
          budget_val = $(".cs-selected").text().split(' ');
          if (budget_val[1] === 'lakhs') {
            budget_price = budget_val[0].split('-');
            budget_price[0] = budget_price[0] + '00000';
            budget_price[1] = budget_price[1] + '00000';
            budget_price = budget_price.join('-');
          }
          App.defaults['budget'] = $(".cs-selected").text();
          App.backFilter['screen1'].push('budget');
          App.screenOneFilter['value'] = $(".cs-selected").text();
          App.screenOneFilter['key'] = 'budget';
        } else {
          App.defaults['budget'] = 'All';
        }
        $('#screen-two-region').addClass('section');
        return this.trigger('unit:type:clicked');
      },
      'click .cs-selected': function(e) {
        var budget_price, budget_val, buildings, element, newColl, newUnits, uniqBuildings, _i, _len;
        $.map(App.backFilter, function(value, index) {
          var element, key, screenArray, _i, _len, _results;
          screenArray = App.backFilter[index];
          _results = [];
          for (_i = 0, _len = screenArray.length; _i < _len; _i++) {
            element = screenArray[_i];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              _results.push(App.defaults[element] = 'All');
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        });
        if ($(".cs-placeholder").text() !== 'Choose a budget') {
          budget_val = $(".cs-selected").text().split(' ');
          if (budget_val[1] === 'lakhs') {
            budget_price = budget_val[0].split('-');
            budget_price[0] = budget_price[0] + '00000';
            budget_price[1] = budget_price[1] + '00000';
            budget_price = budget_price.join('-');
          }
          App.defaults['budget'] = $(".cs-selected").text();
          App.backFilter['screen1'].push('budget');
          App.screenOneFilter['value'] = $(".cs-selected").text();
          App.screenOneFilter['key'] = 'budget';
        } else {
          App.defaults['budget'] = 'All';
        }
        $('#screen-two-region').removeClass('section');
        $('#screen-three-region').removeClass('section');
        $('#screen-four-region').removeClass('section');
        App.layout.screenTwoRegion.el.innerHTML = "";
        App.layout.screenThreeRegion.el.innerHTML = "";
        App.layout.screenFourRegion.el.innerHTML = "";
        App.navigate("");
        App.defaults['view'] = 'All';
        App.defaults['facing'] = 'All';
        App.defaults['terrace'] = 'All';
        App.defaults['unitVariant'] = 'All';
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
        for (_i = 0, _len = unitType.length; _i < _len; _i++) {
          element = unitType[_i];
          $('a').removeClass('selected');
          $("#check" + element).val("0");
        }
        unitType = [];
        App.defaults['unitType'] = 'All';
        $("#finalButton").removeClass('disabled btn-default');
        $("#finalButton").addClass('btn-primary');
        $("#finalButton").text("Show Apartments in my Budget");
        budget_val = $(".cs-selected").text().split(' ');
        newUnits = App.getBudget(budget_val[0]);
        newColl = new Backbone.Collection(newUnits);
        buildings = newColl.pluck("building");
        uniqBuildings = _.uniq(buildings);
        return this.showHighlightedTowers(uniqBuildings);
      },
      'click a': function(e) {
        return e.preventDefault();
      },
      'mouseover a': function(e) {
        var id, locationData;
        id = e.target.id;
        return locationData = m.getLocationData(id);
      },
      'click .tower-over': function(e) {
        var id;
        e.preventDefault();
        id = e.target.id;
        return m.showLocation(id, 800);
      },
      'mouseout .tower-over': function(e) {
        return $('.im-tooltip').hide();
      },
      'mouseover .tower-over': function(e) {
        var buildigmodel, countunits, currency, element, floorCollunits, floorUnitsArray, floorarray, id, key, locationData, mainnewarr, mainunique, mainunitTypeArray1, min, minmodel, myArray, screenonearray, selectorname, status, str1, text, units, units1, unitslen, unittypemodel, unittypetext, _i, _len;
        e.preventDefault();
        id = e.target.id;
        str1 = id.replace(/[^\d.]/g, '');
        buildigmodel = App.master.building.findWhere({
          id: parseInt(str1)
        });
        if (buildigmodel === void 0 || buildigmodel === "") {
          return false;
        }
        floorUnitsArray = [];
        myArray = [];
        screenonearray = App.backFilter['screen1'];
        for (_i = 0, _len = screenonearray.length; _i < _len; _i++) {
          element = screenonearray[_i];
          if (App.defaults[element] !== 'All') {
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              myArray.push({
                key: element,
                value: App.defaults[element]
              });
            }
          }
        }
        status = App.master.status.findWhere({
          'name': 'Available'
        });
        unitslen = App.master.unit.where({
          'status': status.get('id')
        });
        floorCollunits = [];
        $.each(unitslen, function(index, value1) {
          var flag;
          flag = 0;
          $.each(myArray, function(index, value) {
            var budget_arr, budget_price, buildingModel, floorRise, floorRiseValue, initvariant, paramKey, temp, tempstring, unitPrice, unitVariantmodel, _j, _len1, _results;
            paramKey = {};
            paramKey[value.key] = value.value;
            if (value.key === 'budget') {
              buildingModel = App.master.building.findWhere({
                'id': value1.get('building')
              });
              floorRise = buildingModel.get('floorrise');
              floorRiseValue = floorRise[value1.get('floor')];
              unitVariantmodel = App.master.unit_variant.findWhere({
                'id': value1.get('unitVariant')
              });
              unitPrice = value1.get('unitPrice');
              budget_arr = value.value.split(' ');
              budget_price = budget_arr[0].split('-');
              budget_price[0] = budget_price[0] + '00000';
              budget_price[1] = budget_price[1] + '00000';
              if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
                return flag++;
              }
            } else if (value.key !== 'floor') {
              if (value.key === 'unittypeback') {
                value.key = 'unitVariant';
              }
              temp = [];
              temp.push(value.value);
              tempstring = temp.join(',');
              initvariant = tempstring.split(',');
              if (initvariant.length > 1) {
                _results = [];
                for (_j = 0, _len1 = initvariant.length; _j < _len1; _j++) {
                  element = initvariant[_j];
                  if (value1.get(value.key) === parseInt(element)) {
                    _results.push(flag++);
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              } else {
                if (value1.get(value.key) === parseInt(value.value)) {
                  return flag++;
                }
              }
            }
          });
          if (flag === myArray.length) {
            if (value1.get('unitType') !== 14 && value1.get('unitType') !== 16) {
              return floorCollunits.push(value1);
            }
          }
        });
        mainnewarr = [];
        mainunique = {};
        floorarray = [];
        if (myArray.length === 0) {
          $.each(floorCollunits, function(ind, val) {
            if (val.get('unitType') !== 14 && val.get('unitType') !== 16) {
              return floorarray.push(val);
            }
          });
          floorCollunits = floorarray;
        }
        units = new Backbone.Collection(floorCollunits);
        mainunitTypeArray1 = [];
        units1 = App.master.unit.where({
          'status': status.get('id')
        });
        $.each(units1, function(index, value) {
          var unitTypemodel;
          unitTypemodel = App.master.unit_type.findWhere({
            id: value.get('unitType')
          });
          return mainunitTypeArray1.push({
            id: unitTypemodel.get('id'),
            name: unitTypemodel.get('name')
          });
        });
        $.each(mainunitTypeArray1, function(key, item) {
          var classname, count;
          if (!mainunique[item.id]) {
            if (item.id !== 14 && item.id !== 16) {
              status = App.master.status.findWhere({
                'name': 'Available'
              });
              count = units.where({
                unitType: item.id,
                'status': status.get('id'),
                'building': parseInt(str1)
              });
              if (parseInt(item.id) === 9) {
                classname = 'twoBHK';
              } else {
                classname = 'threeBHK';
              }
              mainnewarr.push({
                id: item.id,
                name: item.name,
                classname: classname,
                count: count
              });
              return mainunique[item.id] = item;
            }
          }
        });
        unittypetext = "";
        countunits = units.where({
          building: parseInt(str1)
        });
        buildigmodel = App.master.building.findWhere({
          id: parseInt(str1)
        });
        if (buildigmodel === void 0 || buildigmodel === "") {
          text = "Not Launched";
        } else {
          min = "";
          text = "<span></span>";
          if (countunits.length > 0) {
            minmodel = _.min(countunits, function(model) {
              if (model.get('unitType') !== 14 && model.get('unitType') !== 16) {
                return model.get('unitPrice');
              }
            });
            $('#currency').autoNumeric('init');
            $('#currency').autoNumeric('set', minmodel.get('unitPrice'));
            currency = $('#currency').val();
            if (App.defaults['unitType'] !== 'All') {
              selectorname = App.defaults['unitType'];
              unittypemodel = App.master.unit_type.findWhere({
                id: parseInt(App.defaults['unitType'])
              });
              selectorname = unittypemodel.get('name');
              text = selectorname + ' apartments - </span>' + countunits.length + '<br/><span>Starting Price - </span>' + currency;
            } else if (App.defaults['budget'] !== "All") {
              selectorname = App.defaults['budget'];
              $.each(mainnewarr, function(index, value) {
                return unittypetext += '<span>' + value.name + ' :</span><span>' + value.count.length + '</span></br>';
              });
              text = '<span>Apartments within ' + selectorname + ' - </span>' + countunits.length + '<br/>' + unittypetext + '<br/><span>Starting Price - </span>' + currency;
            } else if (App.defaults['unitType'] === 'All' && App.defaults['budget'] === "All") {
              selectorname = "";
              $.each(mainnewarr, function(index, value) {
                return unittypetext += '<span>' + value.name + ' :</span><span>' + value.count.length + '</span></br>';
              });
              text = '<span>No. of ' + selectorname + ' apartments - </span>' + countunits.length + '<br/>' + unittypetext + '<br/><span>Starting Price - </span>' + currency;
            }
          } else {
            if (App.defaults['unitType'] !== 'All') {
              selectorname = App.defaults['unitType'];
              unittypemodel = App.master.unit_type.findWhere({
                id: parseInt(App.defaults['unitType'])
              });
              selectorname = unittypemodel.get('name');
              text = selectorname + ' apartments - </span>' + countunits.length + '<br/><span>';
            } else if (App.defaults['budget'] !== "All") {
              selectorname = App.defaults['budget'];
              text = '<span>Apartments within ' + selectorname + ' - </span>' + countunits.length;
            }
          }
        }
        locationData = m.getLocationData(id);
        return m.showTooltip(locationData, text);
      }
    };

    ScreenOneView.prototype.showHighlightedTowers = function(uniqBuildings) {
      var building, masterbuilding;
      masterbuilding = App.master.building;
      masterbuilding.each(function(index) {
        return $("#hglighttower" + index.get('id')).attr('class', 'overlay');
      });
      building = uniqBuildings;
      return $.each(uniqBuildings, function(index, value) {
        var buidlingValue;
        buidlingValue = App.master.building.findWhere({
          id: parseInt(value)
        });
        return $("#hglighttower" + buidlingValue.get('id')).attr('class', 'overlay highlight');
      });
    };

    ScreenOneView.prototype.onShow = function() {
      var ajaxurl, i, params, selector;
      $('#finalButton').on('click', function() {
        return new jBox('Notice', {
          content: 'Finding available apartments matching your selection...',
          autoClose: 2000,
          addClass: 'notifyBox',
          position: {
            x: 'center',
            y: 'top'
          },
          animation: {
            open: 'slide:top',
            close: 'slide:top'
          }
        });
      });
      [].slice.call(document.querySelectorAll('select.cs-select')).forEach(function(el) {
        return new SelectFx(el);
      });
      $(".grid-link").click(function() {
        return $(this).toggleClass("selected");
      });
      unitType = [];
      i = 1;
      while (window['mapplic_new' + i] !== void 0) {
        params = window['mapplic_new' + i];
        selector = '#mapplic_new' + i;
        ajaxurl = AJAXURL;
        $(selector).mapplic_new({
          'id': 6,
          'width': params.width,
          'height': params.height
        });
        i++;
      }
      return m = $('#mapplic_new1').data('mapplic_new');
    };

    return ScreenOneView;

  })(Marionette.CompositeView);
});

// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/screen-one/screen-one-controller',['extm', 'src/apps/screen-one/screen-one-view'], function(Extm, ScreenOneView) {
  var ScreenOneController;
  ScreenOneController = (function(_super) {
    __extends(ScreenOneController, _super);

    function ScreenOneController() {
      this._unitTypeClicked = __bind(this._unitTypeClicked, this);
      return ScreenOneController.__super__.constructor.apply(this, arguments);
    }

    ScreenOneController.prototype.initialize = function() {
      var view;
      this.unitTypeCollection = this._getUnitTypeCollection();
      this.view = view = this._getUnitTypesView(this.unitTypeCollection[0]);
      this.listenTo(view, "unit:type:clicked", this._unitTypeClicked);
      return this.show(view);
    };

    ScreenOneController.prototype._getUnitTypesView = function(unitTypeCollection) {
      return new ScreenOneView({
        collection: unitTypeCollection,
        templateHelpers: {
          priceArray: this.unitTypeCollection[1]
        }
      });
    };

    ScreenOneController.prototype._unitTypeClicked = function() {
      return App.navigate("screen-two", {
        trigger: true
      });
    };

    ScreenOneController.prototype._getUnitTypeCollection = function() {
      var Model, UnitsCollection, classname, collection, element, i, modelArray, newUnits, noPrefereceModel, priceArray, priceRange, priceUnits, rangeArray, status, units, _i, _len;
      Model = Backbone.Model.extend({});
      UnitsCollection = Backbone.Collection.extend({
        model: Model
      });
      modelArray = Array();
      collection = new UnitsCollection();
      status = App.currentStore.status.findWhere({
        'name': 'Available'
      });
      units = App.currentStore.unit.where({
        'status': status.get('id')
      });
      priceUnits = App.currentStore.unit;
      priceUnits.each(function(item) {
        var buildingModel, floorRise, floorRiseValue, unitPrice, unitVariantmodel;
        buildingModel = App.currentStore.building.findWhere({
          'id': item.get('building')
        });
        floorRise = buildingModel.get('floorrise');
        floorRiseValue = floorRise[item.get('floor')];
        unitVariantmodel = App.currentStore.unit_variant.findWhere({
          'id': item.get('unitVariant')
        });
        unitPrice = item.get('unitPrice');
        return item.set({
          'unitPrice': 'unitPrice',
          unitPrice: unitPrice
        });
      });
      priceRange = ['10-35 lakhs ', '35-45 lakhs ', '45-55 lakhs ', '55-65 lakhs '];
      priceArray = [];
      rangeArray = [];
      units = App.currentStore.unit.where({
        'status': status.get('id')
      });
      $.each(units, function(index, value) {
        var NewUnitCollection, budget_price, element, elementArray, max_coll, max_val, min_val, unitTypemodel, _i, _len;
        unitTypemodel = App.currentStore.unit_type.findWhere({
          'id': value.get('unitType')
        });
        if (unitTypemodel.get('id') !== 14 && unitTypemodel.get('id') !== 16) {
          NewUnitCollection = App.currentStore.unit.where({
            unitType: unitTypemodel.get('id')
          });
          max_coll = Array();
          for (_i = 0, _len = priceRange.length; _i < _len; _i++) {
            element = priceRange[_i];
            elementArray = element.split(' ');
            budget_price = elementArray[0].split('-');
            budget_price[0] = budget_price[0] + '00000';
            budget_price[1] = budget_price[1] + '00000';
            if (parseInt(value.get('unitPrice')) >= parseInt(budget_price[0]) && parseInt(value.get('unitPrice')) <= parseInt(budget_price[1])) {
              priceArray.push(element);
            }
          }
          $.each(NewUnitCollection, function(index, value) {
            var Variant;
            Variant = App.currentStore.unit_variant.findWhere({
              'id': value.get('unitVariant')
            });
            return max_coll.push(Variant.get('sellablearea'));
          });
          max_val = Math.max.apply(Math, max_coll);
          min_val = Math.min.apply(Math, max_coll);
          unitTypemodel.set({
            'max_value': max_val,
            'min_value': min_val
          });
          unitTypemodel.set('sqft', '(sq. ft.)');
          unitTypemodel.set('to', 'to');
          return modelArray.push(unitTypemodel);
        }
      });
      noPrefereceModel = new Backbone.Model;
      noPrefereceModel.set('id', 'nopreferences');
      noPrefereceModel.set('name', 'BUDGET');
      modelArray.push(noPrefereceModel);
      priceArray.sort(function(a, b) {
        var budget_pricea, budget_priceb;
        a = a.split(' ');
        budget_pricea = a[0].split('-');
        b = b.split(' ');
        budget_priceb = b[0].split('-');
        return budget_pricea[0] - budget_priceb[0];
      });
      priceArray = _.uniq(priceArray);
      i = 0;
      for (_i = 0, _len = priceArray.length; _i < _len; _i++) {
        element = priceArray[_i];
        if (i === 0) {
          classname = 'selected';
        } else {
          classname = "";
        }
        rangeArray.push({
          id: element,
          name: element,
          "class": classname
        });
        i++;
      }
      collection.add(modelArray);
      newUnits = App.currentStore.unit.where();
      return [collection, rangeArray];
    };

    return ScreenOneController;

  })(Extm.RegionController);
  return msgbus.registerController('screen:one', ScreenOneController);
});

// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/screen-two/screen-two-view',['extm', 'marionette'], function(Extm, Marionette) {
  var BuildingView, ScreenTwoLayout, UnitTypeChildView, UnitTypeView, UnitView, UnitViewChildView, cloneunitVariantArrayColl, count, entrancetagsArray, firstElement, globalUnitArrayInt, m, object, rangeArray, tagsArray, terracetagsArray, unitVariantArray, unitVariantIdArray, unitVariantString, unitVariants, viewtagsArray;
  m = "";
  unitVariantArray = '';
  unitVariantIdArray = [];
  unitVariantString = '';
  globalUnitArrayInt = [];
  firstElement = '';
  rangeArray = [];
  tagsArray = [];
  count = 0;
  unitVariants = [];
  cloneunitVariantArrayColl = "";
  viewtagsArray = [];
  entrancetagsArray = [];
  terracetagsArray = [];
  object = 'this';
  ScreenTwoLayout = (function(_super) {
    __extends(ScreenTwoLayout, _super);

    function ScreenTwoLayout() {
      return ScreenTwoLayout.__super__.constructor.apply(this, arguments);
    }

    ScreenTwoLayout.prototype.template = '<div class=""> <h3 class="text-center light m-t-0 m-b-20 unittype hidden animated pulse">We found <span class="bold text-primary"> {{unitsCount }} </span> apartments that matched your selection</h3> <h3 class="text-center light m-t-0 m-b-20 budget hidden animated pulse">We found <span class="bold text-primary"> {{unitsCount }} </span>  apartments in your budget of <strong>{{selection}}</strong></h3> <h3 class="text-center light m-t-0 m-b-20 refresh hidden animated pulse">You are now seeing <span class="bold text-primary">All</span> apartments across all the towers.</h3> <!--<div class="text-center introTxt m-b-10">These apartments are spread over different towers. Each tower has three floor blocks. The number in the boxes indicate the number of apartments of your selection. Select one for more details.</div>--> <div class="introTxt text-center">You are seeing <div id="tagslist" class="taglist"> <ul></ul> </div> <span class="text-primary variantToggle1"> </span>variants of your apartment selection </div> <div class="variantBox1"> <div class="grid-container"> <div class="pull-left m-l-15"> <input type="checkbox" name="selectall" id="selectall" class="checkbox" value="0" checked/> <label for="selectall">Select/Unselect All</label> </div> <div class="text-right m-b-20"> <span class="variantClose1 glyphicon glyphicon-remove text-grey"></span> </div> {{#unitVariants}} <div class="grid-block-3 {{classname}}" > <a class="grid-link {{selected}}" href="#" id="grid{{id}}" data-id="{{id}}" data-count = "{{count}}"> {{sellablearea}} Sq.ft.<input type="hidden" name="check{{id}}"   id="check{{id}}"   value="1" /> <h5><span> {{filter}} : </span> {{count}}</h5> </a> </div> {{/unitVariants}} <div class="variantAction m-t-5 m-b-20"> <a class="btn btn-primary m-r-10 done">DONE</a> <a class="btn btn-default cancel">CANCEL</a> </div> </div> </div> <div class="special introTxt text-center hidden"> <div> Click <a class="special bold hidden" id="filterModal">here</a> to set <span class="bold"> Additional Filters</span> </div> View: <div id="viewtaglist" class="special taglist2 hidden"> <ul></ul> </div> Entrance: <div id="entrancetaglist" class="special taglist2 hidden"> <ul></ul> </div> Terrace: <div id="terracetaglist" class="special taglist2 hidden"> <ul></ul> </div> </div> </div> <div class="row m-l-0 m-r-0 m-t-20 bgClass"> <div class="col-md-5 col-lg-4"> <div class="legend text-center m-b-20"> {{#unittypes}} <span class={{classname}}>.</span>{{name}} {{/unittypes}} </div> <div class="towerTable"> <div class="tableBody"> <div id="vs-container2" class="vs-container vs-triplelayout"> <header class="vs-header" id="building-region"></header> <div id="unit-region"></div> </div> </div> </div> <div class="h-align-middle m-t-20 m-b-20"> <a href="#screen-three-region" class="btn btn-default btn-lg disabled" id="screen-two-button">Show Apartments</a> </div> </div> <div class="col-md-7 col-lg-8 b-grey b-l visible-md visible-lg"> <div class="m-t-10 text-center"> <!--<h4 class="bold m-t-0">Where is this tower located in the project?</h4> <p class="light">This is a map of the entire project that shows the location of the tower selected (on the left).</p>--> <div id="loadmap"><div id="mapplic1" class="towersMap center-block"></div></div> </div> </div><input type="hidden" name="currency1" id="currency1" class="demo" data-a-sign="Rs. "  data-m-dec=""  data-d-group="2"> </div> <div class="specialFilter"> <div class="bgClass"> <h3 class="text-center light">Choose from the options below to filter your selection</h3> <div class="pull-left m-l-15"> <input type="checkbox" name="selectview" id="selectview" class="checkbox" value="0" checked/> <label for="selectview">Select/Unselect All</label> </div> <div class="clearfix"></div> <div class="row m-l-0 m-r-0 filterBlock"> <div class="col-sm-5 b-r b-grey"> <h4 class="bold blockTitle">View</h4> {{#views}} <div class="filterBox {{classname}}"> <input type="checkbox" {{disabled}} name="view{{id}}" data-name="{{name}}" id="view{{id}}" {{checked}} class="checkbox viewname" value="{{id}}"> <label for="view{{id}}">{{name}}</label> </div> {{/views}} <div class="clearfix"></div> </div> <div class="col-sm-3 b-r b-grey"> <h4 class="bold blockTitle">Entrance</h4> {{#facings}} <div class="filterBox {{classname}}"> <input type="checkbox" {{disabled}} name="facing{{id}}" data-name="{{name}}" id="facing{{id}}" {{checked}} class="checkbox facing" value="{{id}}"> <label for="facing{{id}}">{{name}}</label> </div> {{/facings}} <div class="clearfix"></div> </div> <div class="col-sm-4"> <h4 class="bold blockTitle">Terrace</h4> {{#terrace}} <div class="filterBox {{classname}}"> <input type="checkbox" {{disabled}} name="terrace{{id}}" data-name="{{name}}" id="terrace{{id}}" {{checked}} class="checkbox terrace" value="{{id}}"> <label for="terrace{{id}}">{{name}}</label> </div> {{/terrace}} </div> </div> <div id="filtermsg" class="alrtMsg animated pulse"></div> <h4 id="unittypecount" class="text-center"></h4> <div class="text-center m-t-10 m-b-10"> <a id="donepopup" class="btn btn-primary btn-sm b-close">DONE</a> <!-- <a id="cancelpopup" class="btn btn-primary btn-sm b-close">CANCEL</a>--> </div> </div> </div>';

    ScreenTwoLayout.prototype.className = 'page-container row-fluid';

    ScreenTwoLayout.prototype.regions = {
      buildingRegion: '#building-region',
      unitRegion: '#unit-region'
    };

    ScreenTwoLayout.prototype.events = {
      'click #filterModal': function(e) {
        if (App.defaults['view'] === 'All' && App.defaults['facing'] === 'All' && App.defaults['terrace'] === 'All') {
          $('#selectview').prop('checked', true);
        } else {
          $('#selectview').prop('checked', false);
        }
        return $('.specialFilter').bPopup();
      },
      'mouseout .im-pin': function(e) {
        return $('.im-tooltip').hide();
      },
      'mouseout .tower-link': function(e) {
        return $('.im-tooltip').hide();
      },
      'mouseover a.tower-link': function(e) {
        var buildigmodel, countunits, currency, floorCollunits, floorUnitsArray, floorarray, id, locationData, mainnewarr, mainunique, mainunitTypeArray1, min, minmodel, myArray, selectorname, status, str1, text, units, units1, unitslen, unittypemodel, unittypetext;
        id = e.target.id;
        str1 = id.replace(/[^\d.]/g, '');
        floorUnitsArray = [];
        myArray = [];
        buildigmodel = App.master.building.findWhere({
          id: parseInt(str1)
        });
        if (buildigmodel === void 0 || buildigmodel === "") {
          return false;
        }
        $.map(App.defaults, function(value, index) {
          if (value !== 'All') {
            return myArray.push({
              key: index,
              value: value
            });
          }
        });
        status = App.master.status.findWhere({
          'name': 'Available'
        });
        unitslen = App.master.unit.where({
          'status': status.get('id')
        });
        floorCollunits = [];
        $.each(unitslen, function(index, value1) {
          var flag;
          flag = 0;
          $.each(myArray, function(index, value) {
            var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
            paramKey = {};
            paramKey[value.key] = value.value;
            if (value.key === 'budget') {
              buildingModel = App.master.building.findWhere({
                'id': value1.get('building')
              });
              floorRise = buildingModel.get('floorrise');
              floorRiseValue = floorRise[value1.get('floor')];
              unitVariantmodel = App.master.unit_variant.findWhere({
                'id': value1.get('unitVariant')
              });
              unitPrice = value1.get('unitPrice');
              budget_arr = value.value.split(' ');
              budget_price = budget_arr[0].split('-');
              budget_price[0] = budget_price[0] + '00000';
              budget_price[1] = budget_price[1] + '00000';
              if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
                return flag++;
              }
            } else {
              tempnew = [];
              if (value.key === 'view' || value.key === 'apartment_views') {
                tempnew = [];
                value.key = 'apartment_views';
                tempnew = value1.get(value.key);
                if (tempnew !== "") {
                  tempnew = tempnew.map(function(item) {
                    return parseInt(item);
                  });
                }
              } else if (value.key === 'facing') {
                tempnew = [];
                tempnew = value1.get(value.key);
                if (tempnew.length !== 0) {
                  tempnew = tempnew.map(function(item) {
                    return parseInt(item);
                  });
                }
              }
              temp = [];
              temp.push(value.value);
              tempstring = temp.join(',');
              initvariant = tempstring.split(',').map(function(item) {
                return parseInt(item);
              });
              if (initvariant.length >= 1) {
                _results = [];
                for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
                  element = initvariant[_i];
                  if (value1.get(value.key) === parseInt(element)) {
                    _results.push(flag++);
                  } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                    _results.push(flag++);
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              } else {
                if (value1.get(value.key) === parseInt(value.value)) {
                  return flag++;
                }
              }
            }
          });
          if (flag >= myArray.length) {
            return floorCollunits.push(value1);
          }
        });
        mainnewarr = [];
        mainunique = {};
        floorarray = [];
        if (myArray.length === 0) {
          $.each(floorCollunits, function(ind, val) {
            if (val.get('unitType') !== 14 && val.get('unitType') !== 16) {
              return floorarray.push(val);
            }
          });
          floorCollunits = floorarray;
        }
        units = new Backbone.Collection(floorCollunits);
        mainunitTypeArray1 = [];
        units1 = App.master.unit.where({
          'status': status.get('id')
        });
        $.each(units1, function(index, value) {
          var unitTypemodel;
          unitTypemodel = App.master.unit_type.findWhere({
            id: value.get('unitType')
          });
          return mainunitTypeArray1.push({
            id: unitTypemodel.get('id'),
            name: unitTypemodel.get('name')
          });
        });
        $.each(mainunitTypeArray1, function(key, item) {
          var classname;
          if (!mainunique[item.id]) {
            if (item.id !== 14 && item.id !== 16) {
              status = App.master.status.findWhere({
                'name': 'Available'
              });
              count = units.where({
                unitType: item.id,
                'status': status.get('id'),
                'building': parseInt(str1)
              });
              if (parseInt(item.id) === 9) {
                classname = 'twoBHK';
              } else {
                classname = 'threeBHK';
              }
              mainnewarr.push({
                id: item.id,
                name: item.name,
                classname: classname,
                count: count
              });
              return mainunique[item.id] = item;
            }
          }
        });
        countunits = units.where({
          building: parseInt(str1)
        });
        buildigmodel = App.master.building.findWhere({
          id: parseInt(str1)
        });
        unittypetext = "";
        if (buildigmodel === void 0 || buildigmodel === "") {
          text = "Not Launched";
        } else {
          min = "";
          text = "<span></span>";
          if (countunits.length > 0) {
            minmodel = _.min(countunits, function(model) {
              if (model.get('unitType') !== 14 && model.get('unitType') !== 16) {
                return model.get('unitPrice');
              }
            });
            $('#currency1').autoNumeric('init');
            $('#currency1').autoNumeric('set', minmodel.get('unitPrice'));
            currency = $('#currency1').val();
            if (App.defaults['unitType'] !== 'All') {
              selectorname = App.defaults['unitType'];
              unittypemodel = App.master.unit_type.findWhere({
                id: parseInt(App.defaults['unitType'])
              });
              selectorname = unittypemodel.get('name');
              text = selectorname + ' apartments - </span>' + countunits.length + '<br/><span>Starting Price - </span>' + currency;
            } else if (App.defaults['budget'] !== "All") {
              selectorname = App.defaults['budget'];
              $.each(mainnewarr, function(index, value) {
                return unittypetext += '<span>' + value.name + ' :</span><span>' + value.count.length + '</span></br>';
              });
              text = '<span>Apartments within ' + selectorname + ' - </span>' + countunits.length + '<br/>' + unittypetext + '<br/><span>Starting Price - </span>' + currency;
            } else if (App.defaults['unitType'] === 'All' && App.defaults['budget'] === "All") {
              selectorname = "";
              $.each(mainnewarr, function(index, value) {
                return unittypetext += '<span>' + value.name + ' :</span><span>' + value.count.length + '</span></br>';
              });
              text = '<span>No. of ' + selectorname + ' apartments - </span>' + countunits.length + '<br/>' + unittypetext + '<br/><span>Starting Price - </span>' + currency;
            }
          } else {
            if (App.defaults['unitType'] !== 'All') {
              selectorname = App.defaults['unitType'];
              unittypemodel = App.master.unit_type.findWhere({
                id: parseInt(App.defaults['unitType'])
              });
              selectorname = unittypemodel.get('name');
              text = selectorname + ' apartments - </span>' + countunits.length + '<br/><span>';
            } else if (App.defaults['budget'] !== "All") {
              selectorname = App.defaults['budget'];
              text = '<span>Apartments within ' + selectorname + ' - </span>' + countunits.length;
            }
          }
        }
        locationData = m.getLocationData(id);
        return m.showTooltip(locationData, text);
      },
      'mouseover a.im-pin': function(e) {
        var id, locationData;
        id = e.target.id;
        locationData = m.getLocationData(id);
        return m.showTooltip(locationData);
      },
      'click a': function(e) {
        var id;
        e.preventDefault();
        return id = e.target.id;
      },
      'click .tower-link': function(e) {
        var id;
        e.preventDefault();
        return id = e.target.id;
      },
      'click .remodalcheck': function(e) {
        return e.preventDefault();
      },
      'click .tower-link': function(e) {
        var buildigmodel, element, floorColl, floorCollunits, floorUnitsArray, id, key, locationData, myArray, params, screenthreeArray, screentwoArray, status, str1, text, units, unitslen, _i, _j, _len, _len1;
        id = e.target.id;
        str1 = id.replace(/[^\d.]/g, '');
        buildigmodel = App.master.building.findWhere({
          id: parseInt(str1)
        });
        if (buildigmodel === void 0 || buildigmodel === "") {
          return false;
        }
        floorUnitsArray = [];
        myArray = [];
        $.map(App.defaults, function(value, index) {
          if (value !== 'All') {
            return myArray.push({
              key: index,
              value: value
            });
          }
        });
        status = App.master.status.findWhere({
          'name': 'Available'
        });
        unitslen = App.master.unit.where({
          'status': status.get('id')
        });
        floorCollunits = [];
        $.each(unitslen, function(index, value1) {
          var flag;
          flag = 0;
          $.each(myArray, function(index, value) {
            var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
            paramKey = {};
            paramKey[value.key] = value.value;
            if (value.key === 'budget') {
              buildingModel = App.master.building.findWhere({
                'id': value1.get('building')
              });
              floorRise = buildingModel.get('floorrise');
              floorRiseValue = floorRise[value1.get('floor')];
              unitVariantmodel = App.master.unit_variant.findWhere({
                'id': value1.get('unitVariant')
              });
              unitPrice = value1.get('unitPrice');
              budget_arr = value.value.split(' ');
              budget_price = budget_arr[0].split('-');
              budget_price[0] = budget_price[0] + '00000';
              budget_price[1] = budget_price[1] + '00000';
              if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
                return flag++;
              }
            } else {
              tempnew = [];
              if (value.key === 'view' || value.key === 'apartment_views') {
                tempnew = [];
                value.key = 'apartment_views';
                tempnew = value1.get(value.key);
                if (tempnew !== "") {
                  tempnew = tempnew.map(function(item) {
                    return parseInt(item);
                  });
                }
              } else if (value.key === 'facing') {
                tempnew = [];
                tempnew = value1.get(value.key);
                if (tempnew.length !== 0) {
                  tempnew = tempnew.map(function(item) {
                    return parseInt(item);
                  });
                }
              }
              temp = [];
              temp.push(value.value);
              tempstring = temp.join(',');
              initvariant = tempstring.split(',').map(function(item) {
                return parseInt(item);
              });
              if (initvariant.length >= 1) {
                _results = [];
                for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
                  element = initvariant[_i];
                  if (value1.get(value.key) === parseInt(element)) {
                    _results.push(flag++);
                  } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                    _results.push(flag++);
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              } else {
                if (value1.get(value.key) === parseInt(value.value)) {
                  return flag++;
                }
              }
            }
          });
          if (flag >= myArray.length) {
            return floorCollunits.push(value1);
          }
        });
        floorColl = new Backbone.Collection(floorCollunits);
        units = floorColl.where({
          building: parseInt(str1)
        });
        if (units.length !== 0) {
          App.layout.screenThreeRegion.el.innerHTML = "";
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-three-region').removeClass('section');
          $('#screen-four-region').removeClass('section');
          screentwoArray = App.backFilter['screen2'];
          for (_i = 0, _len = screentwoArray.length; _i < _len; _i++) {
            element = screentwoArray[_i];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          screenthreeArray = App.backFilter['screen3'];
          for (_j = 0, _len1 = screenthreeArray.length; _j < _len1; _j++) {
            element = screenthreeArray[_j];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter(params = {});
          msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
          return this.trigger('show:updated:building', $('#' + e.target.id).attr('data-id'));
        } else {
          text = "This Tower does not contain any apartments as per your current selection";
          locationData = m.getLocationData(id);
          return m.showTooltip(locationData, text);
        }
      },
      'click .grid-link': function(e) {
        var dataCount, id, index, track;
        count = unitVariantArray.length;
        id = $('#' + e.target.id).attr('data-id');
        dataCount = $('#' + e.target.id).attr('data-count');
        if (parseInt(dataCount) === 0) {
          return false;
        }
        track = 0;
        if ($('#check' + id).val() === '1') {
          index = unitVariantArray.indexOf(parseInt(id));
          if (index !== -1) {
            unitVariantArray.splice(index, 1);
            $('#' + e.target.id).removeClass('selected');
            $('#check' + id).val('0');
            track = 0;
            unitVariantIdArray.push(parseInt(id));
          }
        } else {
          track = 1;
          unitVariantArray.push(parseInt(id));
          $('#check' + id).val('1');
          $('#' + e.target.id).addClass('selected');
        }
        if (globalUnitArrayInt.length !== 0) {
          if (track === 0) {
            unitVariantArray = _.intersection(unitVariantArray, globalUnitArrayInt);
          } else {
            globalUnitArrayInt.push(parseInt(id));
            unitVariantArray = globalUnitArrayInt;
          }
        }
        unitVariantArray = _.uniq(unitVariantArray);
        if (unitVariantArray.length === 0) {
          unitVariantString = firstElement.toString();
        } else {
          if (cloneunitVariantArrayColl.length === unitVariantArray.length) {
            unitVariantString = 'All';
          } else {
            unitVariantString = unitVariantArray.join(',');
          }
        }
        if (unitVariantString === "All") {
          return $('#selectall').prop('checked', true);
        } else {
          return $('#selectall').prop('checked', false);
        }
      },
      'click .done': function(e) {
        var params, q;
        q = 1;
        if (unitVariantString === "") {
          unitVariantString = "All";
        }
        $(".variantBox1").slideToggle();
        $.map(App.backFilter, function(value, index) {
          var element, key, screenArray, _i, _len;
          if (q !== 1) {
            screenArray = App.backFilter[index];
            for (_i = 0, _len = screenArray.length; _i < _len; _i++) {
              element = screenArray[_i];
              if (element === 'unitVariant') {
                App.defaults[element] = unitVariantString;
              } else {
                key = App.defaults.hasOwnProperty(element);
                if (key === true) {
                  App.defaults[element] = 'All';
                }
              }
            }
          }
          return q++;
        });
        App.layout.screenThreeRegion.el.innerHTML = "";
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-three-region').removeClass('section');
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-two");
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        if (unitVariantString === "") {
          unitVariantString = 'All';
        }
        App.defaults['unitVariant'] = unitVariantString;
        App.filter(params = {});
        $('.specialFilter').empty();
        $('.specialFilter').addClass('hidden');
        $('.b-modal').addClass('hidden');
        return this.trigger('unit:variants:selected');
      },
      'click .cancel': function(e) {
        var globalUnitVariants;
        unitVariantArray = _.union(unitVariantArray, unitVariantIdArray);
        $(".variantBox1").slideToggle();
        globalUnitVariants = App.defaults['unitVariant'].split(',');
        globalUnitArrayInt = [];
        $.each(globalUnitVariants, function(index, value) {
          return globalUnitArrayInt.push(parseInt(value));
        });
        if (App.defaults['unitVariant'] !== 'All') {
          $.each(unitVariantArray, function(index, value) {
            var key;
            key = _.contains(globalUnitArrayInt, parseInt(value));
            if (key === true) {
              $('#grid' + value).addClass('selected');
              return $('#check' + value).val('1');
            } else {
              $('#grid' + value).removeClass('selected');
              return $('#check' + value).val('0');
            }
          });
        } else {
          globalUnitArrayInt = unitVariantArray;
          $.each(unitVariantArray, function(index, value) {
            $('#grid' + value).addClass('selected');
            return $('#check' + value).val('1');
          });
        }
        return $('#selectall').prop('checked', true);
      },
      'click #selectall': function(e) {
        var remainainArray, tempArray, value;
        if ($('#' + e.target.id).prop('checked') === true) {
          $.each(cloneunitVariantArrayColl, function(index, value) {
            $('#grid' + value).addClass('selected');
            $('#check' + value).val('1');
            return unitVariantArray.push(value);
          });
          unitVariantArray = _.uniq(unitVariantArray);
          cloneunitVariantArrayColl.sort(function(a, b) {
            return a - b;
          });
          return unitVariantString = 'All';
        } else {
          tempArray = [];
          $.each(cloneunitVariantArrayColl, function(index, value) {
            return tempArray.push(parseInt(value));
          });
          value = _.first(tempArray);
          remainainArray = _.rest(tempArray);
          $.each(remainainArray, function(index, value) {
            $('#grid' + value).removeClass('selected');
            $('#check' + value).val('0');
            index = unitVariantArray.indexOf(parseInt(value));
            if (index !== -1) {
              unitVariantArray.splice(index, 1);
              return unitVariantIdArray.push(parseInt(value));
            }
          });
          return unitVariantString = value.toString();
        }
      },
      'click #screen-two-button': function(e) {
        $('#screen-three-region').addClass('section');
        return this.trigger('unit:count:selected');
      }
    };

    ScreenTwoLayout.prototype.showHighlightedTowers = function() {
      var buidlingValue, building, masterbuilding;
      building = Marionette.getOption(this, 'buildingColl').toArray();
      buidlingValue = _.first(building);
      masterbuilding = App.master.building;
      return masterbuilding.each(function(index) {
        return $("#highlighttower" + index.get('id')).attr('class', 'overlay');
      });
    };

    ScreenTwoLayout.prototype.onShow = function() {
      var ajaxurl, buidlingValue, building, capability, clonefacings, cloneterraces, cloneviews, defer, entrance, entranceArrayText, globalUnitVariants, globalfacing, globalfacingInt, globalterrace, globalterraceInt, globalviewInt, globalviews, i, mainnewarr, mainunique, mainunitTypeArray1, originalOfacings, originalOterraces, originalOviews, originalfacings, originalterraces, originalviews, params, scr, selector, status, teraace, terraceArrayText, testtext, unitVariantArrayColl, unitVariantArrayText, unitVariantsArray, units1, unittypetext, usermodel, view, viewArrayText;
      viewtagsArray = [];
      entrancetagsArray = [];
      terracetagsArray = [];
      usermodel = new Backbone.Model(USER);
      object = this;
      capability = usermodel.get('all_caps');
      if (usermodel.get('id') !== "0" && $.inArray('see_special_filters', capability) >= 0) {
        $('.special').removeClass('hidden');
        originalviews = Marionette.getOption(this, 'views');
        originalOviews = Marionette.getOption(this, 'Oviews');
        originalfacings = Marionette.getOption(this, 'facings');
        originalOfacings = Marionette.getOption(this, 'Ofacings');
        originalterraces = Marionette.getOption(this, 'terraceID');
        originalOterraces = Marionette.getOption(this, 'terrace');
        object = this;
        globalviews = [];
        globalviewInt = [];
        globalfacing = [];
        globalfacingInt = [];
        globalterrace = [];
        globalterraceInt = [];
        cloneviews = originalviews.slice(0);
        clonefacings = originalfacings.slice(0);
        cloneterraces = originalterraces.slice(0);
        view = [];
        teraace = [];
        entrance = [];
        if (App.defaults['view'] !== 'All') {
          globalviews = App.defaults['view'].split(',');
          $.each(globalviews, function(index, value) {
            return globalviewInt.push(parseInt(value));
          });
        }
        if (App.defaults['facing'] !== 'All') {
          globalfacing = App.defaults['facing'].split(',');
          $.each(globalfacing, function(index, value) {
            return globalfacingInt.push(parseInt(value));
          });
        }
        if (App.defaults['terrace'] !== 'All') {
          globalterrace = App.defaults['terrace'].split(',');
          $.each(globalterrace, function(index, value) {
            return globalterraceInt.push(parseInt(value));
          });
        }
        if (App.defaults['view'] !== 'All') {
          $.each(originalviews, function(index, value) {
            if ($.inArray(parseInt(value), globalviewInt) >= 0) {
              $('#view' + value).prop('checked', true);
              return view.push(value);
            } else {
              return $('#view' + value).prop('checked', false);
            }
          });
        } else {
          $.each(originalviews, function(index, value) {
            $('#view' + value).prop('checked', true);
            return view.push(value);
          });
        }
        if (App.defaults['facing'] !== 'All') {
          $.each(originalfacings, function(index, value) {
            if ($.inArray(parseInt(value), globalfacingInt) >= 0) {
              $('#facing' + value).prop('checked', true);
              return entrance.push(value);
            } else {
              return $('#facing' + value).prop('checked', false);
            }
          });
        } else {
          $.each(originalfacings, function(index, value) {
            $('#facing' + value).prop('checked', true);
            return entrance.push(value);
          });
        }
        if (App.defaults['terrace'] !== 'All') {
          $.each(originalterraces, function(index, value) {
            if ($.inArray(parseInt(value), globalterraceInt) >= 0) {
              $('#terrace' + value).prop('checked', true);
              return teraace.push(value);
            } else {
              return $('#terrace' + value).prop('checked', false);
            }
          });
        } else {
          $.each(originalterraces, function(index, value) {
            $('#terrace' + value).prop('checked', true);
            return teraace.push(value);
          });
        }
        mainnewarr = [];
        mainunique = {};
        mainunitTypeArray1 = [];
        status = App.master.status.findWhere({
          'name': 'Available'
        });
        units1 = App.master.unit.where({
          'status': status.get('id')
        });
        $.each(units1, function(index, value) {
          var unitType;
          unitType = App.master.unit_type.findWhere({
            id: value.get('unitType')
          });
          return mainunitTypeArray1.push({
            id: unitType.get('id'),
            name: unitType.get('name')
          });
        });
        $.each(mainunitTypeArray1, function(key, item) {
          var classname;
          if (!mainunique[item.id]) {
            if (item.id !== 14 && item.id !== 16) {
              status = App.master.status.findWhere({
                'name': 'Available'
              });
              count = App.currentStore.unit.where({
                unitType: item.id,
                'status': status.get('id')
              });
              if (parseInt(item.id) === 9) {
                classname = 'twoBHK';
              } else {
                classname = 'threeBHK';
              }
              mainnewarr.push({
                id: item.id,
                name: item.name,
                classname: classname,
                count: count
              });
              return mainunique[item.id] = item;
            }
          }
        });
        unittypetext = "";
        $.each(mainnewarr, function(index, value) {
          return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
        });
        $('#unittypecount').html(unittypetext);
        $('#selectview').on('click', function(e) {
          var firstentrance, firstentrancearr, firstteraace, firstteraacearr, firstview, firstviewarr, rest, restent, restter, uniqfacings, uniqterrace, uniqviews;
          mainnewarr = [];
          mainunique = {};
          if ($('#' + e.target.id).prop('checked') !== true) {
            firstview = _.first(view);
            firstviewarr = [];
            firstviewarr.push(firstview);
            rest = _.rest(view);
            $('#view' + firstview).prop('checked', true);
            $.each(rest, function(index, value) {
              return $('#view' + value).prop('checked', false);
            });
            view = firstviewarr;
            App.defaults['view'] = view.toString();
            firstentrance = _.first(entrance);
            firstentrancearr = [];
            firstentrancearr.push(firstentrance);
            restent = _.rest(entrance);
            $('#facing' + firstentrance).prop('checked', true);
            $.each(restent, function(index, value) {
              return $('#facing' + value).prop('checked', false);
            });
            entrance = firstentrancearr;
            App.defaults['facing'] = entrance.toString();
            firstteraace = _.first(teraace);
            firstteraacearr = [];
            firstteraacearr.push(firstteraace);
            restter = _.rest(teraace);
            $('#terrace' + firstteraace).prop('checked', true);
            $.each(restter, function(index, value) {
              return $('#terrace' + value).prop('checked', false);
            });
            teraace = firstteraacearr;
            App.defaults['terrace'] = teraace.toString();
            $('#' + e.target.id).prop('checked', false);
          } else {
            view = cloneviews;
            $.each(view, function(index, value) {
              return $('#view' + value).prop('checked', true);
            });
            App.defaults['view'] = view.join(',');
            entrance = clonefacings;
            $.each(entrance, function(index, value) {
              return $('#facing' + value).prop('checked', true);
            });
            App.defaults['facing'] = entrance.join(',');
            teraace = cloneterraces;
            $.each(teraace, function(index, value) {
              return $('#terrace' + value).prop('checked', true);
            });
            App.defaults['terrace'] = teraace.join(',');
            uniqfacings = _.uniq(entrance);
            uniqterrace = _.uniq(teraace);
            uniqviews = _.uniq(view);
            if (uniqfacings.length !== originalfacings.length) {
              App.defaults['facing'] = uniqfacings.join(',');
              entrance = uniqfacings;
            } else {
              entrance = uniqfacings;
              App.defaults['facing'] = 'All';
            }
            if (uniqterrace.length !== originalterraces.length) {
              App.defaults['terrace'] = uniqterrace.join(',');
              teraace = uniqterrace;
            } else {
              teraace = uniqterrace;
              App.defaults['terrace'] = 'All';
            }
            if (uniqviews.length !== originalviews.length) {
              App.defaults['view'] = uniqviews.join(',');
              view = uniqviews;
            } else {
              view = uniqviews;
              App.defaults['view'] = 'All';
            }
            $('#' + e.target.id).prop('checked', true);
          }
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter();
          mainunitTypeArray1 = [];
          status = App.master.status.findWhere({
            'name': 'Available'
          });
          units1 = App.master.unit.where({
            'status': status.get('id')
          });
          $.each(units1, function(index, value) {
            var unitType;
            unitType = App.master.unit_type.findWhere({
              id: value.get('unitType')
            });
            return mainunitTypeArray1.push({
              id: unitType.get('id'),
              name: unitType.get('name')
            });
          });
          $.each(mainunitTypeArray1, function(key, item) {
            var classname;
            if (!mainunique[item.id]) {
              if (item.id !== 14 && item.id !== 16) {
                status = App.master.status.findWhere({
                  'name': 'Available'
                });
                count = App.currentStore.unit.where({
                  unitType: item.id,
                  'status': status.get('id')
                });
                if (parseInt(item.id) === 9) {
                  classname = 'twoBHK';
                } else {
                  classname = 'threeBHK';
                }
                mainnewarr.push({
                  id: item.id,
                  name: item.name,
                  classname: classname,
                  count: count
                });
                return mainunique[item.id] = item;
              }
            }
          });
          unittypetext = "";
          $.each(mainnewarr, function(index, value) {
            return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
          });
          return $('#unittypecount').html(unittypetext);
        });
        $('.viewname').on('click', function(e) {
          var element, facingtemp, floorCollection, index, key, screenthreeArray, screentwoArray, teracetemp, uniqfacings, uniqterrace, unselected, unselected1, viewString, viewnames, _i, _j, _len, _len1;
          App.layout.screenThreeRegion.el.innerHTML = "";
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-three-region').removeClass('section');
          $('#screen-four-region').removeClass('section');
          screentwoArray = App.backFilter['screen2'];
          for (_i = 0, _len = screentwoArray.length; _i < _len; _i++) {
            element = screentwoArray[_i];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          screenthreeArray = App.backFilter['screen3'];
          for (_j = 0, _len1 = screenthreeArray.length; _j < _len1; _j++) {
            element = screenthreeArray[_j];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          App.navigate("screen-two");
          mainnewarr = [];
          mainunique = {};
          viewnames = originalviews;
          viewString = 'All';
          if ($('#' + e.target.id).prop('checked') === true) {
            view.push($('#' + e.target.id).val());
          } else {
            if (parseInt(view.length) === 1) {
              object.showMsg();
              return false;
            }
            $('#' + e.target.id).prop('checked', false);
            index = _.indexOf(view, parseInt($('#' + e.target.id).val()));
            if (index !== -1) {
              view.splice(index, 1);
            }
          }
          view = view.map(function(item) {
            return parseInt(item);
          });
          view = _.uniq(view);
          if (view.length !== 0) {
            viewString = view.join(',');
          }
          App.defaults['view'] = viewString;
          if (originalviews.length === view.length) {
            $('#selectview').prop('checked', true);
            App.defaults['view'] = 'All';
          } else {
            $('#selectview').prop('checked', false);
          }
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter();
          teracetemp = [];
          floorCollection = App.currentStore.unit;
          facingtemp = [];
          floorCollection.each(function(item) {
            if (item.get('facing').length !== 0) {
              $.merge(facingtemp, item.get('facing'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return teracetemp.push(item.get('terrace'));
            }
          });
          facingtemp = facingtemp.map(function(item) {
            return parseInt(item);
          });
          teracetemp = teracetemp.map(function(item) {
            return parseInt(item);
          });
          uniqfacings = _.uniq(facingtemp);
          uniqterrace = _.uniq(teracetemp);
          $.each(uniqfacings, function(index, value) {
            return $('#facing' + value).prop('checked', true);
          });
          if (uniqfacings.length !== originalfacings.length) {
            App.defaults['facing'] = uniqfacings.join(',');
            entrance = uniqfacings;
          } else {
            entrance = uniqfacings;
            App.defaults['facing'] = 'All';
          }
          if (uniqterrace.length !== originalterraces.length) {
            App.defaults['terrace'] = uniqterrace.join(',');
            teraace = uniqterrace;
          } else {
            teraace = uniqterrace;
            App.defaults['terrace'] = 'All';
          }
          unselected = _.difference(clonefacings, uniqfacings);
          $.each(unselected, function(index, value) {
            return $('#facing' + value).prop('checked', false);
          });
          $.each(uniqterrace, function(index, value) {
            return $('#terrace' + value).prop('checked', true);
          });
          unselected1 = _.difference(cloneterraces, uniqterrace);
          $.each(unselected1, function(index, value) {
            return $('#terrace' + value).prop('checked', false);
          });
          if (App.defaults['view'] === 'All' && App.defaults['facing'] === 'All' && App.defaults['terrace'] === 'All') {
            $('#selectview').prop('checked', true);
          } else {
            $('#selectview').prop('checked', false);
          }
          mainunitTypeArray1 = [];
          status = App.master.status.findWhere({
            'name': 'Available'
          });
          units1 = App.master.unit.where({
            'status': status.get('id')
          });
          $.each(units1, function(index, value) {
            var unitType;
            unitType = App.master.unit_type.findWhere({
              id: value.get('unitType')
            });
            return mainunitTypeArray1.push({
              id: unitType.get('id'),
              name: unitType.get('name')
            });
          });
          $.each(mainunitTypeArray1, function(key, item) {
            var classname;
            if (!mainunique[item.id]) {
              if (item.id !== 14 && item.id !== 16) {
                status = App.master.status.findWhere({
                  'name': 'Available'
                });
                count = floorCollection.where({
                  unitType: item.id,
                  'status': status.get('id')
                });
                if (parseInt(item.id) === 9) {
                  classname = 'twoBHK';
                } else {
                  classname = 'threeBHK';
                }
                mainnewarr.push({
                  id: item.id,
                  name: item.name,
                  classname: classname,
                  count: count
                });
                return mainunique[item.id] = item;
              }
            }
          });
          unittypetext = "";
          $.each(mainnewarr, function(index, value) {
            return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
          });
          return $('#unittypecount').html(unittypetext);
        });
        $('.terrace').on('click', function(e) {
          var element, facingtemp, index, key, screenthreeArray, screentwoArray, uniqfacings, uniqviews, units, unselected, unselected1, viewtemp, _i, _j, _len, _len1;
          App.layout.screenThreeRegion.el.innerHTML = "";
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-three-region').removeClass('section');
          $('#screen-four-region').removeClass('section');
          screentwoArray = App.backFilter['screen2'];
          for (_i = 0, _len = screentwoArray.length; _i < _len; _i++) {
            element = screentwoArray[_i];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          screenthreeArray = App.backFilter['screen3'];
          for (_j = 0, _len1 = screenthreeArray.length; _j < _len1; _j++) {
            element = screenthreeArray[_j];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          App.navigate("screen-two");
          mainnewarr = [];
          mainunique = {};
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          if ($('#' + e.target.id).prop('checked') === true) {
            teraace.push($('#' + e.target.id).val());
          } else {
            if (parseInt(teraace.length) === 1) {
              object.showMsg();
              return false;
            }
            index = _.indexOf(teraace, parseInt($('#' + e.target.id).val()));
            if (index !== -1) {
              teraace.splice(index, 1);
            }
          }
          teraace = teraace.map(function(item) {
            return parseInt(item);
          });
          teraace = _.uniq(teraace);
          App.defaults['terrace'] = teraace.join(',');
          if (originalterraces.length === teraace.length) {
            $('#selectview').prop('checked', true);
            App.defaults['terrace'] = 'All';
          } else {
            $('#selectview').prop('checked', false);
          }
          App.filter();
          units = App.currentStore.unit;
          viewtemp = [];
          facingtemp = [];
          units.each(function(item) {
            if (item.get('apartment_views') !== "") {
              $.merge(viewtemp, item.get('apartment_views'));
            }
            if (item.get('facing').length !== 0) {
              return $.merge(facingtemp, item.get('facing'));
            }
          });
          viewtemp = viewtemp.map(function(item) {
            return parseInt(item);
          });
          facingtemp = facingtemp.map(function(item) {
            return parseInt(item);
          });
          uniqviews = _.uniq(viewtemp);
          uniqfacings = _.uniq(facingtemp);
          if (uniqviews.length !== originalviews.length) {
            App.defaults['view'] = uniqviews.join(',');
            view = uniqviews;
          } else {
            view = uniqviews;
            App.defaults['view'] = 'All';
          }
          if (uniqfacings.length !== originalfacings.length) {
            App.defaults['facing'] = uniqfacings.join(',');
            entrance = uniqfacings;
          } else {
            entrance = uniqfacings;
            App.defaults['facing'] = 'All';
          }
          $.each(uniqviews, function(index, value) {
            return $('#view' + value).prop('checked', true);
          });
          unselected1 = _.difference(cloneviews, uniqviews);
          $.each(unselected1, function(index, value) {
            return $('#view' + value).prop('checked', false);
          });
          $.each(uniqfacings, function(index, value) {
            return $('#facing' + value).prop('checked', true);
          });
          unselected = _.difference(clonefacings, uniqfacings);
          $.each(unselected, function(index, value) {
            return $('#facing' + value).prop('checked', false);
          });
          if (App.defaults['view'] === 'All' && App.defaults['facing'] === 'All' && App.defaults['terrace'] === 'All') {
            $('#selectview').prop('checked', true);
          } else {
            $('#selectview').prop('checked', false);
          }
          mainunitTypeArray1 = [];
          status = App.master.status.findWhere({
            'name': 'Available'
          });
          units1 = App.master.unit.where({
            'status': status.get('id')
          });
          $.each(units1, function(index, value) {
            var unitType;
            unitType = App.master.unit_type.findWhere({
              id: value.get('unitType')
            });
            return mainunitTypeArray1.push({
              id: unitType.get('id'),
              name: unitType.get('name')
            });
          });
          $.each(mainunitTypeArray1, function(key, item) {
            var classname;
            if (!mainunique[item.id]) {
              if (item.id !== 14 && item.id !== 16) {
                status = App.master.status.findWhere({
                  'name': 'Available'
                });
                count = units.where({
                  unitType: item.id,
                  'status': status.get('id')
                });
                if (parseInt(item.id) === 9) {
                  classname = 'twoBHK';
                } else {
                  classname = 'threeBHK';
                }
                mainnewarr.push({
                  id: item.id,
                  name: item.name,
                  classname: classname,
                  count: count
                });
                return mainunique[item.id] = item;
              }
            }
          });
          unittypetext = "";
          $.each(mainnewarr, function(index, value) {
            return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
          });
          return $('#unittypecount').html(unittypetext);
        });
        $('.facing').on('click', function(e) {
          var element, facingString, floorCollection, index, key, screenthreeArray, screentwoArray, teracetemp, uniqterrace, uniqviews, unselected, unselected1, viewtemp, _i, _j, _len, _len1;
          App.layout.screenThreeRegion.el.innerHTML = "";
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-three-region').removeClass('section');
          $('#screen-four-region').removeClass('section');
          screentwoArray = App.backFilter['screen2'];
          for (_i = 0, _len = screentwoArray.length; _i < _len; _i++) {
            element = screentwoArray[_i];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          screenthreeArray = App.backFilter['screen3'];
          for (_j = 0, _len1 = screenthreeArray.length; _j < _len1; _j++) {
            element = screenthreeArray[_j];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          App.navigate("screen-two");
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          mainnewarr = [];
          mainunique = {};
          if ($('#' + e.target.id).prop('checked') === true) {
            entrance.push($('#' + e.target.id).val());
          } else {
            if (parseInt(entrance.length) === 1) {
              object.showMsg();
              return false;
            }
            index = _.indexOf(entrance, parseInt($('#' + e.target.id).val()));
            if (index !== -1) {
              entrance.splice(index, 1);
            }
          }
          entrance = entrance.map(function(item) {
            return parseInt(item);
          });
          entrance = _.uniq(entrance);
          if (entrance.length !== 0) {
            facingString = entrance.join(',');
          }
          App.defaults['facing'] = facingString;
          if (originalterraces.length === entrance.length) {
            $('#selectview').prop('checked', true);
            App.defaults['facing'] = 'All';
          } else {
            $('#selectview').prop('checked', false);
          }
          App.filter();
          teracetemp = [];
          floorCollection = App.currentStore.unit;
          viewtemp = [];
          floorCollection.each(function(item) {
            if (item.get('apartment_views').length !== 0) {
              $.merge(viewtemp, item.get('apartment_views'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return teracetemp.push(item.get('terrace'));
            }
          });
          viewtemp = viewtemp.map(function(item) {
            return parseInt(item);
          });
          teracetemp = teracetemp.map(function(item) {
            return parseInt(item);
          });
          uniqviews = _.uniq(viewtemp);
          uniqterrace = _.uniq(teracetemp);
          if (uniqviews.length !== originalviews.length) {
            App.defaults['view'] = uniqviews.join(',');
            view = uniqviews;
          } else {
            view = uniqviews;
            App.defaults['view'] = 'All';
          }
          if (uniqterrace.length !== originalterraces.length) {
            App.defaults['terrace'] = uniqterrace.join(',');
            teraace = uniqterrace;
          } else {
            teraace = uniqterrace;
            App.defaults['terrace'] = 'All';
          }
          $.each(uniqviews, function(index, value) {
            return $('#view' + value).prop('checked', true);
          });
          unselected = _.difference(cloneviews, uniqviews);
          $.each(unselected, function(index, value) {
            return $('#view' + value).prop('checked', false);
          });
          $.each(uniqterrace, function(index, value) {
            return $('#terrace' + value).prop('checked', true);
          });
          unselected1 = _.difference(cloneterraces, uniqterrace);
          $.each(unselected1, function(index, value) {
            return $('#terrace' + value).prop('checked', false);
          });
          if (App.defaults['view'] === 'All' && App.defaults['facing'] === 'All' && App.defaults['terrace'] === 'All') {
            $('#selectview').prop('checked', true);
          } else {
            $('#selectview').prop('checked', false);
          }
          mainunitTypeArray1 = [];
          status = App.master.status.findWhere({
            'name': 'Available'
          });
          units1 = App.master.unit.where({
            'status': status.get('id')
          });
          $.each(units1, function(index, value) {
            var unitType;
            unitType = App.master.unit_type.findWhere({
              id: value.get('unitType')
            });
            return mainunitTypeArray1.push({
              id: unitType.get('id'),
              name: unitType.get('name')
            });
          });
          $.each(mainunitTypeArray1, function(key, item) {
            var classname;
            if (!mainunique[item.id]) {
              if (item.id !== 14 && item.id !== 16) {
                status = App.master.status.findWhere({
                  'name': 'Available'
                });
                count = floorCollection.where({
                  unitType: item.id,
                  'status': status.get('id')
                });
                if (parseInt(item.id) === 9) {
                  classname = 'twoBHK';
                } else {
                  classname = 'threeBHK';
                }
                mainnewarr.push({
                  id: item.id,
                  name: item.name,
                  classname: classname,
                  count: count
                });
                return mainunique[item.id] = item;
              }
            }
          });
          unittypetext = "";
          $.each(mainnewarr, function(index, value) {
            return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
          });
          return $('#unittypecount').html(unittypetext);
        });
        $('#donepopup').on('click', function(e) {
          var element, key, screenthreeArray, screentwoArray, _i, _j, _len, _len1;
          App.layout.screenThreeRegion.el.innerHTML = "";
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-three-region').removeClass('section');
          $('#screen-four-region').removeClass('section');
          screentwoArray = App.backFilter['screen2'];
          for (_i = 0, _len = screentwoArray.length; _i < _len; _i++) {
            element = screentwoArray[_i];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          screenthreeArray = App.backFilter['screen3'];
          for (_j = 0, _len1 = screenthreeArray.length; _j < _len1; _j++) {
            element = screenthreeArray[_j];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          App.navigate("screen-two");
          App.navigate("screen-two");
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter();
          $('.specialFilter').empty();
          $('.specialFilter').addClass('hidden');
          $('.b-modal').addClass('hidden');
          return object.trigger('unit:variants:selected');
        });
        $('#cancelpopup').on('click', function(e) {
          var element, facingtemp1, floorCollectionCur, key, screenthreeArray, screentwoArray, terracetemp1, viewtemp1, _i, _j, _len, _len1;
          App.layout.screenThreeRegion.el.innerHTML = "";
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-three-region').removeClass('section');
          $('#screen-four-region').removeClass('section');
          screentwoArray = App.backFilter['screen2'];
          for (_i = 0, _len = screentwoArray.length; _i < _len; _i++) {
            element = screentwoArray[_i];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          screenthreeArray = App.backFilter['screen3'];
          for (_j = 0, _len1 = screenthreeArray.length; _j < _len1; _j++) {
            element = screenthreeArray[_j];
            key = App.defaults.hasOwnProperty(element);
            if (key === true) {
              App.defaults[element] = 'All';
            }
          }
          App.navigate("screen-two");
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          $('.specialFilter').empty();
          $('.specialFilter').addClass('hidden');
          $('.b-modal').addClass('hidden');
          view = [];
          entrance = [];
          teraace = [];
          App.filter();
          floorCollectionCur = App.currentStore.unit;
          viewtemp1 = [];
          facingtemp1 = [];
          terracetemp1 = [];
          floorCollectionCur.each(function(item) {
            if (item.get('unitType') !== 14 && item.get('unitType') !== 16) {
              if (item.get('apartment_views') !== "") {
                $.merge(viewtemp1, item.get('apartment_views'));
              }
              if (item.get('facing').length !== 0) {
                $.merge(facingtemp1, item.get('facing'));
              }
              if (item.get('terrace') !== "") {
                return terracetemp1.push(item.get('terrace'));
              }
            }
          });
          viewtemp1 = viewtemp1.map(function(item) {
            return parseInt(item);
          });
          viewtemp1 = _.uniq(viewtemp1);
          facingtemp1 = facingtemp1.map(function(item) {
            return parseInt(item);
          });
          facingtemp1 = _.uniq(facingtemp1);
          terracetemp1 = terracetemp1.map(function(item) {
            return parseInt(item);
          });
          terracetemp1 = _.uniq(terracetemp1);
          $.each(viewtemp1, function(index, value) {
            $('#view' + value).prop('checked', true);
            return view.push(value);
          });
          $.each(facingtemp1, function(index, value) {
            $('#facings' + value).prop('checked', true);
            return entrance.push(value);
          });
          $.each(terracetemp1, function(index, value) {
            $('#terrace' + value).prop('checked', true);
            return teraace.push(value);
          });
          if (viewtemp1.length !== originalviews.length) {
            App.defaults['view'] = viewtemp1.join(',');
          } else {
            App.defaults['view'] = 'All';
          }
          if (terracetemp1.length !== originalterraces.length) {
            App.defaults['terrace'] = terracetemp1.join(',');
          } else {
            App.defaults['terrace'] = 'All';
          }
          if (facingtemp1.length !== originalfacings.length) {
            App.defaults['facing'] = facingtemp1.join(',');
          } else {
            App.defaults['facing'] = 'All';
          }
          App.layout.screenThreeRegion.el.innerHTML = "";
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-three-region').removeClass('section');
          $('#screen-four-region').removeClass('section');
          App.navigate("screen-two");
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter();
          return object.trigger('unit:variants:selected');
        });
      }
      $("#flatno").text("");
      $("#towerno").text("");
      $("#unittypename").text("");
      $("#area").text("");
      $("#floorrise").text("");
      $('.room').html("");
      $('#terrace').text("");
      $('#printfacing').text("");
      $('#printview').text("");
      $("#twoDimage").attr('src', "");
      $("#zoomedinimage").attr('src', "");
      $("#floorlayoutbasic").text("");
      $('#printmapplic1').text("");
      $('#towerview').text("");
      $('#screen-two-button').on('click', function() {
        return new jBox('Notice', {
          content: 'Finding available apartments that match your selection...',
          autoClose: 2000,
          addClass: 'notifyBox',
          position: {
            x: 'center',
            y: 'top'
          },
          animation: {
            open: 'slide:top',
            close: 'slide:top'
          }
        });
      });
      rangeArray = [];
      globalUnitArrayInt = [];
      if (App.defaults['unitVariant'] !== 'All') {
        globalUnitVariants = App.defaults['unitVariant'].split(',');
        $.each(globalUnitVariants, function(index, value) {
          return globalUnitArrayInt.push(parseInt(value));
        });
      }
      unitVariantString = "";
      if (unitVariantString === "All" || App.defaults['unitVariant'] === "All") {
        $('#selectall').prop('checked', true);
      } else {
        $('#selectall').prop('checked', false);
      }
      if (App.screenOneFilter['key'] === 'unitType') {
        $('.unittype').removeClass('hidden');
      } else if (App.screenOneFilter['key'] === 'budget') {
        $('.budget').removeClass('hidden');
      } else if (App.screenOneFilter['key'] === "") {
        $('.refresh').removeClass('hidden');
      }
      unitVariantArray = Marionette.getOption(this, 'uintVariantId');
      unitVariantsArray = Marionette.getOption(this, 'unitVariants');
      unitVariantArrayColl = new Backbone.Collection(unitVariantArray);
      cloneunitVariantArrayColl = unitVariantArray.slice(0);
      unitVariants = unitVariantArray;
      firstElement = _.first(unitVariantArray);
      if (App.defaults['unitVariant'] !== 'All') {
        unitVariantArray = _.union(unitVariantArray, unitVariantIdArray);
        $.each(unitVariantArray, function(index, value) {
          var key;
          key = _.contains(globalUnitArrayInt, parseInt(value));
          if (key === true) {
            $('#grid' + value).addClass('selected');
            return $('#check' + value).val('1');
          } else {
            index = unitVariantArray.indexOf(parseInt(value));
            $('#grid' + value).removeClass('selected');
            return $('#check' + value).val('0');
          }
        });
      } else {
        unitVariantArray = unitVariantArray;
        $.each(unitVariantArray, function(index, value) {
          $('#grid' + value).addClass('selected');
          return $('#check' + value).val('1');
        });
      }
      $(".variantToggle1").click(function() {
        $(this).toggleClass("open");
        $(".variantBox1").slideToggle();
      });
      $(".variantClose1").click(function() {
        $(".variantBox1").slideToggle();
        $(".variantToggle1").toggleClass("open");
      });
      i = 1;
      building = Marionette.getOption(this, 'buildingColl').toArray();
      buidlingValue = _.first(building);
      while (window['mapplic' + i] !== void 0) {
        params = window['mapplic' + i];
        selector = '#mapplic' + i;
        ajaxurl = AJAXURL;
        defer = $(selector).mapplic({
          'id': 5,
          'width': params.width,
          'height': params.height,
          'option': buidlingValue
        });
        i++;
      }
      m = $('#mapplic1').data('mapplic');
      this.showHighlightedTowers();
      $('html, body').delay(600).animate({
        scrollTop: $('#screen-two-region').offset().top
      }, 'slow');
      tagsArray = [];
      testtext = App.defaults['unitVariant'];
      if (testtext !== 'All') {
        unitVariantArrayText = testtext.split(',');
        $.each(unitVariantArrayText, function(index, value) {
          var unitVariantModel;
          unitVariantModel = App.master.unit_variant.findWhere({
            id: parseInt(value)
          });
          return tagsArray.push({
            id: value,
            area: unitVariantModel.get('sellablearea') + 'Sq.ft.'
          });
        });
      } else {
        unitVariantArrayText = testtext.split(',');
        tagsArray.push({
          id: 'All',
          area: 'All'
        });
      }
      this.doListing();
      usermodel = new Backbone.Model(USER);
      capability = usermodel.get('all_caps');
      if (usermodel.get('id') !== "0" && $.inArray('see_special_filters', capability) >= 0) {
        viewtagsArray = [];
        testtext = App.defaults['view'];
        if (testtext !== 'All') {
          viewArrayText = testtext.split(',');
          $.each(viewArrayText, function(index, value) {
            var viewModel;
            viewModel = App.master.view.findWhere({
              id: parseInt(value)
            });
            return viewtagsArray.push({
              id: value,
              name: viewModel.get('name')
            });
          });
        } else {
          viewtagsArray.push({
            id: 'All',
            name: 'All'
          });
        }
        this.doViewListing();
        entrancetagsArray = [];
        testtext = App.defaults['facing'];
        if (testtext !== 'All') {
          entranceArrayText = testtext.split(',');
          $.each(entranceArrayText, function(index, value) {
            var facingModel;
            facingModel = App.master.facings.findWhere({
              id: parseInt(value)
            });
            return entrancetagsArray.push({
              id: value,
              name: facingModel.get('name')
            });
          });
        } else {
          entrancetagsArray.push({
            id: 'All',
            name: 'All'
          });
        }
        this.doentranceListing();
        terracetagsArray = [];
        testtext = App.defaults['terrace'];
        if (testtext !== 'All') {
          terraceArrayText = testtext.split(',');
          $.each(terraceArrayText, function(index, value) {
            var terraceModel;
            terraceModel = App.master.terrace.findWhere({
              id: parseInt(value)
            });
            return terracetagsArray.push({
              id: value,
              name: terraceModel.get('name')
            });
          });
        } else {
          terracetagsArray.push({
            id: 'All',
            name: 'All'
          });
        }
        this.doterraceListing();
      }
      object = this;
      scr = document.createElement('script');
      scr.src = '../wp-content/themes/apartmentselector/js/src/preload/main2.js';
      document.body.appendChild(scr);
      return object = this;
    };

    $(document).on("click", ".closeButton", function() {
      var theidtodel;
      theidtodel = $(this).parent('li').attr('id');
      return object.delItem($('#' + theidtodel).attr('data-itemNum'));
    });

    $(document).on("click", ".closeButton2", function() {
      var theidtodel;
      theidtodel = $(this).parent('li').attr('id');
      return object.delViewItem($('#' + theidtodel).attr('data-itemNum'));
    });

    $(document).on("click", ".closeButton3", function() {
      var theidtodel;
      theidtodel = $(this).parent('li').attr('id');
      return object.delEntranceItem($('#' + theidtodel).attr('data-itemNum'));
    });

    $(document).on("click", ".closeButton4", function() {
      var theidtodel;
      theidtodel = $(this).parent('li').attr('id');
      return object.delTerraceItem($('#' + theidtodel).attr('data-itemNum'));
    });

    ScreenTwoLayout.prototype.showMsg = function() {
      $('#filtermsg').show();
      return $('#filtermsg').text(' Atleast one option in each category must be selected to proceed').delay(2000).fadeOut(function(x) {
        return $('filtermsg').text("");
      });
    };

    ScreenTwoLayout.prototype.doListing = function() {
      $('#tagslist ul li').remove();
      $.each(tagsArray, function(index, value) {
        return $('#tagslist ul').append('<li id="li-item-' + value.id + '" data-itemNum="' + value.id + '"><span class="itemText">' + value.area + '</span><div class="closeButton"></div></li>');
      });
      if (tagsArray.length === 1) {
        return $('.closeButton').addClass('hidden');
      }
    };

    ScreenTwoLayout.prototype.doViewListing = function() {
      $('#viewtaglist ul li').remove();
      $.each(viewtagsArray, function(index, value) {
        return $('#viewtaglist ul').append('<li id="li-viewitem-' + value.id + '" data-itemNum="' + value.id + '"><span class="itemText">' + value.name + '</span><div class="closeButton2"></div></li>');
      });
      if (viewtagsArray.length === 1) {
        return $('.closeButton2').addClass('hidden');
      }
    };

    ScreenTwoLayout.prototype.doentranceListing = function() {
      $('#entrancetaglist ul li').remove();
      $.each(entrancetagsArray, function(index, value) {
        return $('#entrancetaglist ul').append('<li id="li-entranceitem-' + value.id + '" data-itemNum="' + value.id + '"><span class="itemText">' + value.name + '</span><div class="closeButton3"></div></li>');
      });
      if (entrancetagsArray.length === 1) {
        return $('.closeButton3').addClass('hidden');
      }
    };

    ScreenTwoLayout.prototype.doterraceListing = function() {
      $('#terracetaglist ul li').remove();
      $.each(terracetagsArray, function(index, value) {
        return $('#terracetaglist ul').append('<li id="li-terraceitem-' + value.id + '" data-itemNum="' + value.id + '"><span class="itemText">' + value.name + '</span><div class="closeButton4"></div></li>');
      });
      if (terracetagsArray.length === 1) {
        return $('.closeButton4').addClass('hidden');
      }
    };

    ScreenTwoLayout.prototype.delItem = function(delnum) {
      var i, index, key, params, q, removeItem, unitvariantarrayValues;
      removeItem = delnum;
      i = 0;
      key = "";
      $.each(tagsArray, function(index, val) {
        if (val.id === delnum) {
          key = i;
        }
        return i++;
      });
      index = key;
      if (index >= 0) {
        tagsArray.splice(index, 1);
        $('#li-item-' + delnum).remove();
        unitvariantarrayValues = [];
        $.each(tagsArray, function(index, value) {
          return unitvariantarrayValues.push(value.id);
        });
        q = 1;
        $.map(App.backFilter, function(value, index) {
          var element, screenArray, _i, _len;
          if (q !== 1) {
            screenArray = App.backFilter[index];
            for (_i = 0, _len = screenArray.length; _i < _len; _i++) {
              element = screenArray[_i];
              if (element === 'unitVariant') {
                App.defaults[element] = unitVariantString;
              } else {
                key = App.defaults.hasOwnProperty(element);
                if (key === true) {
                  App.defaults[element] = 'All';
                }
              }
            }
          }
          return q++;
        });
        App.layout.screenThreeRegion.el.innerHTML = "";
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-three-region').removeClass('section');
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-two");
        App.defaults['unitVariant'] = unitvariantarrayValues.join(',');
        App.navigate("screen-two");
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        App.filter(params = {});
        return this.trigger('unit:variants:selected');
      }
    };

    ScreenTwoLayout.prototype.delViewItem = function(delnum) {
      var i, index, key, params, q, removeItem, viewarrayValues;
      removeItem = delnum;
      i = 0;
      key = "";
      $.each(viewtagsArray, function(index, val) {
        if (val.id === delnum) {
          key = i;
        }
        return i++;
      });
      index = key;
      if (index >= 0) {
        viewtagsArray.splice(index, 1);
        $('#li-viewitem-' + delnum).remove();
        viewarrayValues = [];
        $.each(viewtagsArray, function(index, value) {
          return viewarrayValues.push(value.id);
        });
        q = 1;
        $.map(App.backFilter, function(value, index) {
          var element, screenArray, _i, _len;
          if (q !== 1) {
            screenArray = App.backFilter[index];
            for (_i = 0, _len = screenArray.length; _i < _len; _i++) {
              element = screenArray[_i];
              if (element === 'unitVariant') {
                App.defaults[element] = unitVariantString;
              } else {
                key = App.defaults.hasOwnProperty(element);
                if (key === true) {
                  App.defaults[element] = 'All';
                }
              }
            }
          }
          return q++;
        });
        App.layout.screenThreeRegion.el.innerHTML = "";
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-three-region').removeClass('section');
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-two");
        App.defaults['view'] = viewarrayValues.join(',');
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        App.filter(params = {});
        $('.specialFilter').empty();
        $('.specialFilter').addClass('hidden');
        $('.b-modal').addClass('hidden');
        return this.trigger('unit:variants:selected');
      }
    };

    ScreenTwoLayout.prototype.delEntranceItem = function(delnum) {
      var entrancearrayValues, i, index, key, params, q, removeItem;
      removeItem = delnum;
      i = 0;
      key = "";
      $.each(entrancetagsArray, function(index, val) {
        if (val.id === delnum) {
          key = i;
        }
        return i++;
      });
      index = key;
      if (index >= 0) {
        entrancetagsArray.splice(index, 1);
        $('#li-entranceitem-' + delnum).remove();
        entrancearrayValues = [];
        $.each(entrancetagsArray, function(index, value) {
          return entrancearrayValues.push(value.id);
        });
        q = 1;
        $.map(App.backFilter, function(value, index) {
          var element, screenArray, _i, _len;
          if (q !== 1) {
            screenArray = App.backFilter[index];
            for (_i = 0, _len = screenArray.length; _i < _len; _i++) {
              element = screenArray[_i];
              if (element === 'unitVariant') {
                App.defaults[element] = unitVariantString;
              } else {
                key = App.defaults.hasOwnProperty(element);
                if (key === true) {
                  App.defaults[element] = 'All';
                }
              }
            }
          }
          return q++;
        });
        App.layout.screenThreeRegion.el.innerHTML = "";
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-three-region').removeClass('section');
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-two");
        App.defaults['facing'] = entrancearrayValues.join(',');
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        App.filter(params = {});
        $('.specialFilter').empty();
        $('.specialFilter').addClass('hidden');
        $('.b-modal').addClass('hidden');
        return this.trigger('unit:variants:selected');
      }
    };

    ScreenTwoLayout.prototype.delTerraceItem = function(delnum) {
      var i, index, key, params, q, removeItem, terracearrayValues;
      removeItem = delnum;
      i = 0;
      key = "";
      $.each(terracetagsArray, function(index, val) {
        if (val.id === delnum) {
          key = i;
        }
        return i++;
      });
      index = key;
      if (index >= 0) {
        terracetagsArray.splice(index, 1);
        $('#li-terraceitem-' + delnum).remove();
        terracearrayValues = [];
        $.each(terracetagsArray, function(index, value) {
          return terracearrayValues.push(value.id);
        });
        q = 1;
        $.map(App.backFilter, function(value, index) {
          var element, screenArray, _i, _len;
          if (q !== 1) {
            screenArray = App.backFilter[index];
            for (_i = 0, _len = screenArray.length; _i < _len; _i++) {
              element = screenArray[_i];
              if (element === 'unitVariant') {
                App.defaults[element] = unitVariantString;
              } else {
                key = App.defaults.hasOwnProperty(element);
                if (key === true) {
                  App.defaults[element] = 'All';
                }
              }
            }
          }
          return q++;
        });
        App.layout.screenThreeRegion.el.innerHTML = "";
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-three-region').removeClass('section');
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-two");
        App.defaults['terrace'] = terracearrayValues.join(',');
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        App.filter(params = {});
        $('.specialFilter').empty();
        $('.specialFilter').addClass('hidden');
        $('.b-modal').addClass('hidden');
        return this.trigger('unit:variants:selected');
      }
    };

    return ScreenTwoLayout;

  })(Marionette.LayoutView);
  BuildingView = (function(_super) {
    __extends(BuildingView, _super);

    function BuildingView() {
      return BuildingView.__super__.constructor.apply(this, arguments);
    }

    BuildingView.prototype.template = '<a  class="link" href="tower{{id}}">{{name}}</a>';

    BuildingView.prototype.tagName = 'li';

    BuildingView.prototype.className = 'vs-nav-current';

    BuildingView.prototype.events = {
      'click .link': function(e) {
        var i, id, params, selector;
        id = this.model.get('id');
        i = 1;
        params = window['mapplic' + i];
        selector = '#mapplic' + i;
        if (this.model.get('id') === void 0) {
          id = "";
        }
        return this.showHighlightedBuildings(id);
      }
    };

    BuildingView.prototype.showHighlightedBuildings = function(id) {
      var building, masterbuilding;
      masterbuilding = App.master.building;
      masterbuilding.each(function(index) {
        return $("#highlighttower" + index.get('id')).attr('class', 'overlay');
      });
      if (id !== "") {
        building = id;
        return $("#highlighttower" + building).attr('class', 'overlay highlight');
      }
    };

    BuildingView.prototype.initialize = function() {
      return this.$el.prop("id", 'towerlink' + this.model.get("id"));
    };

    return BuildingView;

  })(Marionette.ItemView);
  UnitTypeChildView = (function(_super) {
    __extends(UnitTypeChildView, _super);

    function UnitTypeChildView() {
      return UnitTypeChildView.__super__.constructor.apply(this, arguments);
    }

    UnitTypeChildView.prototype.tagName = 'ul';

    UnitTypeChildView.prototype.className = 'vs-nav';

    UnitTypeChildView.prototype.childView = BuildingView;

    UnitTypeChildView.prototype.onShow = function() {
      var id, model;
      model = this.collection.at(0);
      return id = 'tower' + model.get('id');
    };

    return UnitTypeChildView;

  })(Marionette.CompositeView);
  UnitViewChildView = (function(_super) {
    __extends(UnitViewChildView, _super);

    function UnitViewChildView() {
      return UnitViewChildView.__super__.constructor.apply(this, arguments);
    }

    UnitViewChildView.prototype.template = '<div id="range{{range}}{{buildingid}}" class="boxBlank {{classname}} {{disable}}"> <div class="pull-left light text-center"> <h4 class="rangeName bold m-t-5">{{rangetext}}</h4> <div class="small">{{rangeNo}}</div> </div> <div class="unitCount pull-right text-center"> <h4 class="bold m-b-5 m-t-0">{{count}}</h4> <div class="small">FLATS</div> </div> <div class="clearfix"></div> </div> <input type="hidden" name="checkrange{{range}}{{buildingid}}"   id="checkrange{{range}}{{buildingid}}"       value="0" />                             </div>';

    UnitViewChildView.prototype.className = 'towerSelect';

    UnitViewChildView.prototype.events = {
      'click ': function(e) {
        var buildingModel, element, floorriserange, i, index, obj, q, rangeArrayVal, rangeString, _i, _len;
        q = 1;
        $.map(App.backFilter, function(value, index) {
          var element, screenArray, _i, _len;
          if (q !== 1) {
            screenArray = App.backFilter[index];
            for (_i = 0, _len = screenArray.length; _i < _len; _i++) {
              element = screenArray[_i];
              if (element === 'unitVariant') {
                if (unitVariantString === "") {
                  unitVariantString = "All";
                }
                App.defaults[element] = unitVariantString;
              } else {
                App.defaults[element] = 'All';
              }
            }
          }
          return q++;
        });
        App.navigate("screen-two");
        $('#screen-three-region').removeClass('section');
        $('#screen-four-region').removeClass('section');
        App.layout.screenThreeRegion.el.innerHTML = "";
        App.layout.screenFourRegion.el.innerHTML = "";
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
        if (this.model.get('count') !== 0) {
          for (index = _i = 0, _len = rangeArray.length; _i < _len; index = ++_i) {
            element = rangeArray[index];
            if (element === this.model.get('range') + this.model.get('buildingid')) {
              $("#checkrange" + this.model.get('range') + this.model.get('buildingid')).val('1');
            } else {
              $("#checkrange" + element).val('0');
              $('#range' + element).removeClass('selected');
              rangeArray = [];
            }
          }
          if (parseInt($("#checkrange" + this.model.get('range') + this.model.get('buildingid')).val()) === 0) {
            rangeArray.push(this.model.get('range') + this.model.get('buildingid'));
            $('#range' + this.model.get('range') + this.model.get('buildingid')).addClass('selected');
            $("#checkrange" + this.model.get('range') + this.model.get('buildingid')).val("1");
            buildingModel = App.currentStore.building.findWhere({
              id: this.model.get('buildingid')
            });
            floorriserange = buildingModel.get('floorriserange');
            obj = this;
            rangeArrayVal = [];
            i = 0;
            $.each(floorriserange, function(index, value) {
              var end, start;
              if (obj.model.get('range') === value.name) {
                start = parseInt(value.start);
                end = parseInt(value.end);
                while (parseInt(start) <= parseInt(end)) {
                  rangeArrayVal[i] = start;
                  start = parseInt(start) + 1;
                  i++;
                }
                return rangeArrayVal;
              }
            });
            rangeString = rangeArrayVal.join(',');
            App.defaults['floor'] = rangeString;
            App.backFilter['screen2'].push('floor');
            App.defaults['building'] = parseInt(this.model.get('buildingid'));
            App.backFilter['screen2'].push('building');
            $('#screen-two-button').removeClass('disabled btn-default');
            $("#screen-two-button").addClass('btn-primary');
            this.trigger('unit:count:selected');
          } else {
            rangeArray = [];
            $("#checkrange" + this.model.get('range') + this.model.get('buildingid')).val("0");
            $('#range' + this.model.get('range') + this.model.get('buildingid')).removeClass('selected');
          }
        }
        if (parseInt($("#checkrange" + this.model.get('range') + this.model.get('buildingid')).val()) === 0) {
          $("#screen-two-button").addClass('disabled btn-default');
          $("#screen-two-button").removeClass('btn-primary');
          return false;
        }
      }
    };

    return UnitViewChildView;

  })(Marionette.ItemView);
  UnitView = (function(_super) {
    __extends(UnitView, _super);

    function UnitView() {
      return UnitView.__super__.constructor.apply(this, arguments);
    }

    UnitView.prototype.template = '<div class="vs-content"> <div class="towerUnits"> <div class="subHeader "> <div class="row small light"> <div class="col-xs-5"> FLOOR<br>RANGE </div> <div class="col-xs-7 text-right"> NO. OF UNITS OF<br>YOUR SELECTION </div> </div> </div> </div> <!--<div class="towerDetails m-t-10"> <div class="row"> <div class="col-xs-4"> <h4 class="m-t-0 m-b-0 bold">Total Apartments</h4> <h3 class="light m-t-0">{{totalunits}}</h3> </div> <div class="col-xs-4"> <h4 class="m-t-0 m-b-0 bold">Available Apartments</h4> <h3 class="light m-t-0">{{availableunits}}</h3> </div> <div class="col-xs-4"> <h4 class="m-t-0 m-b-0 bold">Number of Floors</h4> <h3 class="light m-t-0">{{totalfloors}}</h3> </div> </div> <div class="row"> <div class="col-sm-12 m-t-10"> <div class="col"> <p>Climb leg make muffins or sweet beast play time and hate dog or chew foot. Stretch climb leg. Play time give attitude for all of a sudden go crazy chase imaginary bugs lick butt. Claw drapes burrow under covers so hide when guests come over, inspect anything brought into the house hopped up on goofballs. Nap all day swat at dog and rub face on everything stick butt in face all of a sudden go crazy need to chase tail yet rub face on everything.</p> </div> </div> </div> <h4 class="m-t-0 m-b-5 text-primary"><span class="bold">VIEWS</span> for this tower</h4> <div class="row m-b-20"> {{#views}} <div class="col-sm-6"> {{#data}}<span class="glyphicon glyphicon-asterisk small text-grey"></span> {{name}}<br>{{/data}} </div> {{/views}} </div> </div>--> </div>';

    UnitView.prototype.tagName = 'section';

    UnitView.prototype.childView = UnitViewChildView;

    UnitView.prototype.childViewContainer = '.towerUnits';

    UnitView.prototype.initialize = function() {
      this.collection = this.model.get('units');
      return this.$el.prop("id", 'tower' + this.model.get("buildingid"));
    };

    UnitView.prototype.onShow = function() {
      if ($("#unit-region section").length < 2) {
        $("#unit-region section").addClass("vs-current");
      }
    };

    return UnitView;

  })(Marionette.CompositeView);
  UnitTypeView = (function(_super) {
    __extends(UnitTypeView, _super);

    function UnitTypeView() {
      return UnitTypeView.__super__.constructor.apply(this, arguments);
    }

    UnitTypeView.prototype.childView = UnitView;

    UnitTypeView.prototype.className = "vs-wrapper";

    return UnitTypeView;

  })(Marionette.CompositeView);
  return {
    ScreenTwoLayout: ScreenTwoLayout,
    UnitTypeChildView: UnitTypeChildView,
    UnitTypeView: UnitTypeView
  };
});

// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/screen-two/screen-two-controller',['extm', 'src/apps/screen-two/screen-two-view'], function(Extm, ScreenTwoView) {
  var ScreenTwoController, tagsArray;
  tagsArray = "";
  ScreenTwoController = (function(_super) {
    __extends(ScreenTwoController, _super);

    function ScreenTwoController() {
      this._unitCountSelected = __bind(this._unitCountSelected, this);
      this.showViews = __bind(this.showViews, this);
      this.showUpdateBuilding = __bind(this.showUpdateBuilding, this);
      return ScreenTwoController.__super__.constructor.apply(this, arguments);
    }

    ScreenTwoController.prototype.initialize = function() {
      this.Collection = this._getUnitsCountCollection();
      this.layout = new ScreenTwoView.ScreenTwoLayout({
        collection: this.Collection[1],
        buildingColl: this.Collection[0],
        uintVariantId: this.Collection[9],
        uintVariantIdArray: this.Collection[10],
        unitVariants: this.Collection[8],
        views: this.Collection[13],
        facings: this.Collection[14],
        Oviews: this.Collection[11],
        Ofacings: this.Collection[12],
        terrace: this.Collection[15],
        terraceID: this.Collection[16],
        templateHelpers: {
          selection: this.Collection[2],
          unitsCount: this.Collection[3],
          unittypes: this.Collection[4],
          high: this.Collection[5],
          medium: this.Collection[6],
          low: this.Collection[7],
          unitVariants: this.Collection[8],
          views: this.Collection[11],
          facings: this.Collection[12],
          terrace: this.Collection[15],
          terraceID: this.Collection[16],
          AJAXURL: AJAXURL
        }
      });
      this.listenTo(this.layout, "show", this.showViews);
      this.listenTo(this.layout, "show:updated:building", this.showUpdateBuilding);
      this.listenTo(this.layout, 'unit:variants:selected', this.showUpdateBuildings);
      this.listenTo(this.layout, 'unit:count:selected', this._unitCountSelected);
      return this.show(this.layout);
    };

    ScreenTwoController.prototype.showUpdateBuildings = function() {
      this.Collection = this._getUnitsCountCollection();
      this.layout = new ScreenTwoView.ScreenTwoLayout({
        collection: this.Collection[1],
        buildingColl: this.Collection[0],
        uintVariantId: this.Collection[9],
        uintVariantIdArray: this.Collection[10],
        views: this.Collection[13],
        facings: this.Collection[14],
        Oviews: this.Collection[11],
        Ofacings: this.Collection[12],
        unitVariants: this.Collection[8],
        terrace: this.Collection[15],
        terraceID: this.Collection[16],
        templateHelpers: {
          selection: this.Collection[2],
          unitsCount: this.Collection[3],
          unittypes: this.Collection[4],
          high: this.Collection[5],
          medium: this.Collection[6],
          low: this.Collection[7],
          unitVariants: this.Collection[8],
          views: this.Collection[11],
          facings: this.Collection[12],
          terrace: this.Collection[15],
          terraceID: this.Collection[16],
          AJAXURL: AJAXURL
        }
      });
      this.listenTo(this.layout, "show", this.showViews);
      this.listenTo(this.layout, "show:updated:building", this.showUpdateBuilding);
      this.listenTo(this.layout, 'unit:variants:selected', this.showUpdateBuildings);
      this.listenTo(this.layout, 'unit:count:selected', this._unitCountSelected);
      return this.show(this.layout);
    };

    ScreenTwoController.prototype.showUpdateBuilding = function(id) {
      var buidlingValue, building, itemview1, itemview2, masterbuilding, scr;
      this.Collection = this._getUnitsCountCollection(id);
      itemview1 = new ScreenTwoView.UnitTypeChildView({
        collection: this.Collection[0]
      });
      itemview2 = new ScreenTwoView.UnitTypeView({
        collection: this.Collection[1]
      });
      this.layout.buildingRegion.$el.empty();
      this.layout.unitRegion.$el.empty();
      this.layout.buildingRegion.$el.append(itemview1.render().el);
      this.layout.unitRegion.$el.append(itemview2.render().el);
      scr = document.createElement('script');
      scr.src = '../wp-content/themes/apartmentselector/js/src/preload/main2.js';
      document.body.appendChild(scr);
      building = this.Collection[0].toArray();
      buidlingValue = _.first(building);
      masterbuilding = App.master.building;
      masterbuilding.each(function(index) {
        return $("#highlighttower" + index.get('id')).attr('class', 'overlay');
      });
      return $("#highlighttower" + buidlingValue.get('id')).attr('class', 'overlay highlight');
    };

    ScreenTwoController.prototype.showViews = function() {
      this.buildingCollection = this.Collection[0];
      this.unitCollection = this.Collection[1];
      this.showBuildingRegion(this.buildingCollection);
      return this.showUnitRegion(this.unitCollection);
    };

    ScreenTwoController.prototype.showBuildingRegion = function(buildingCollection) {
      var itemview1;
      itemview1 = this.getView(buildingCollection);
      return this.layout.buildingRegion.show(itemview1);
    };

    ScreenTwoController.prototype.showUnitRegion = function(unitCollection) {
      var itemview2;
      itemview2 = this.getUnitsView(unitCollection);
      return this.layout.unitRegion.show(itemview2);
    };

    ScreenTwoController.prototype.getView = function(buildingCollection) {
      return new ScreenTwoView.UnitTypeChildView({
        collection: buildingCollection
      });
    };

    ScreenTwoController.prototype.getUnitsView = function(unitCollection) {
      return new ScreenTwoView.UnitTypeView({
        collection: unitCollection
      });
    };

    ScreenTwoController.prototype._unitCountSelected = function() {
      return App.navigate("screen-three", {
        trigger: true
      });
    };

    ScreenTwoController.prototype._getUnitsCountCollection = function(paramid) {
      var Countunits, MainCollection, ModelActualArr, arrayvalue, buildingArray, buildingArrayModel, buildingCollection, buildingModel, buildingUnits, buildingsactual, buildingvalue, capability, facingID, facingModels, facingtemp, facingtemp1, first, flag, floorCollection, floorCollectionCur, floorCollectionmaster, floorCollunits, floorCollunits1, floorUnitsArray, floorriserange, flooruniqUnitvariant, floorunitvariant, highLength, hnewarr, i, index, itemCollection, j, key, keycheck, lnewarr, mainArray, mainnewarr, mainunique, mainunitTypeArray, mainunitTypeArray1, mainunitsTypeArray, mnewarr, modelArr, modelIdArr, myArray, myArray1, param, paramkey, range, status, templateArr, templateString, tempunitvarinat, terraceID, terraceModels, terracetemp, terracetemp1, uniqUnitvariant, uniqfacings, uniqterrace, uniqviews, unitColl, unitVariantID, unitVariantModels, units, units1, unitsactual, unitslen, unitslen1, unitvariant, unitvarinatColl, usermodel, viewID, viewModels, viewtemp, viewtemp1;
      if (paramid == null) {
        paramid = {};
      }
      buildingArray = Array();
      buildingArrayModel = Array();
      unitColl = Array();
      templateArr = [];
      mainunitTypeArray = [];
      mainnewarr = [];
      lnewarr = [];
      mnewarr = [];
      hnewarr = [];
      mainunique = {};
      myArray1 = [];
      MainCollection = new Backbone.Model();
      status = App.currentStore.status.findWhere({
        'name': 'Available'
      });
      key = _.isEmpty(paramid);
      if (key === true) {
        units = App.currentStore.unit.where({
          'status': status.get('id')
        });
      } else {
        units = App.currentStore.unit.where({
          'status': status.get('id')
        });
      }
      Countunits = App.currentStore.unit.where({
        'status': status.get('id')
      });
      param = {};
      paramkey = {};
      flag = 0;
      mainunitsTypeArray = [];
      mainArray = [];
      $.each(App.defaults, function(index, value) {
        var budget_Val, element, string_val, valuearr, _i, _len, _results;
        if (value !== 'All') {
          param[index] = value;
          string_val = _.isString(value);
          valuearr = "";
          if (string_val === true) {
            valuearr = value.split(',');
          }
          if (valuearr.length > 1) {
            _results = [];
            for (_i = 0, _len = valuearr.length; _i < _len; _i++) {
              element = valuearr[_i];
              if (index === 'unitType') {
                key = App.master.unit_type.findWhere({
                  id: parseInt(element)
                });
                templateArr.push(key.get('name'));
              }
              if (index === 'building') {
                key = App.master.building.findWhere({
                  id: parseInt(element)
                });
                templateArr.push(key.get('name'));
              }
              if (index === 'budget') {
                budget_Val = value + 'lakhs';
                templateArr.push(budget_Val);
              }
              if (index === 'floor') {
                _results.push(templateArr.push(value));
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } else {
            if (index === 'unitType') {
              key = App.master.unit_type.findWhere({
                id: parseInt(value)
              });
              templateArr.push(key.get('name'));
            }
            if (index === 'building') {
              key = App.master.building.findWhere({
                id: parseInt(value)
              });
              templateArr.push(key.get('name'));
            }
            if (index === 'budget') {
              budget_Val = value;
              templateArr.push(budget_Val);
            }
            if (index === 'floor') {
              return templateArr.push(value);
            }
          }
        }
      });
      if (templateArr.length === 0) {
        templateArr.push('All');
      }
      if (flag === 1) {
        first = _.first(templateArr);
        buildingModel = App.master.building.findWhere({
          id: App.building['name']
        });
        floorriserange = buildingModel.get('floorriserange');
        if (parseInt(first) >= floorriserange[0].start && parseInt(first) <= floorriserange[0].end) {
          range = 'LOWRISE' + ',' + buildingModel.get('name');
        }
        if (parseInt(first) >= floorriserange[1].start && parseInt(first) <= floorriserange[1].end) {
          range = 'MIDRISE' + ',' + buildingModel.get('name');
        }
        if (parseInt(first) >= floorriserange[2].start && parseInt(first) <= floorriserange[2].end) {
          range = 'HIGHRISE' + ',' + buildingModel.get('name');
        }
        templateString = range;
      } else {
        templateString = templateArr.join(',');
      }
      param = {};
      paramkey = {};
      flag = 0;
      floorUnitsArray = [];
      myArray = [];
      $.map(App.defaults, function(value, index) {
        if (value !== 'All') {
          if (index !== 'unitVariant') {
            myArray.push({
              key: index,
              value: value
            });
          }
          if (index !== 'facing' && index !== 'terrace' && index !== 'view') {
            return myArray1.push({
              key: index,
              value: value
            });
          }
        }
      });
      status = App.master.status.findWhere({
        'name': 'Available'
      });
      unitslen = App.currentStore.unit.where({
        'status': status.get('id')
      });
      unitslen1 = App.master.unit.toArray();
      $.each(unitslen1, function(index, value1) {
        var floorArray, floorstring;
        if (App.defaults['floor'] !== 'All') {
          floorstring = App.defaults['floor'];
          floorArray = floorstring.split(',');
          return $.each(floorArray, function(index, value) {
            if (value1.get('floor') === parseInt(value)) {
              return floorUnitsArray.push(value1);
            }
          });
        }
      });
      if (App.defaults['floor'] === "All") {
        floorUnitsArray = unitslen1;
      }
      floorCollunits = [];
      $.each(floorUnitsArray, function(index, value1) {
        flag = 0;
        $.each(myArray, function(index, value) {
          var budget_arr, budget_price, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
          paramKey = {};
          paramKey[value.key] = value.value;
          if (value.key === 'budget') {
            buildingModel = App.master.building.findWhere({
              'id': value1.get('building')
            });
            floorRise = buildingModel.get('floorrise');
            floorRiseValue = floorRise[value1.get('floor')];
            unitVariantmodel = App.master.unit_variant.findWhere({
              'id': value1.get('unitVariant')
            });
            unitPrice = value1.get('unitPrice');
            budget_arr = value.value.split(' ');
            budget_price = budget_arr[0].split('-');
            budget_price[0] = budget_price[0] + '00000';
            budget_price[1] = budget_price[1] + '00000';
            if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
              return flag++;
            }
          } else if (value.key !== 'floor') {
            tempnew = [];
            if (value.key === 'view' || value.key === 'apartment_views') {
              tempnew = [];
              value.key = 'apartment_views';
              tempnew = value1.get(value.key);
              if (tempnew !== "") {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            } else if (value.key === 'facing') {
              tempnew = [];
              tempnew = value1.get(value.key);
              if (tempnew.length !== 0) {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            }
            temp = [];
            temp.push(value.value);
            tempstring = temp.join(',');
            initvariant = tempstring.split(',').map(function(item) {
              return parseInt(item);
            });
            if (initvariant.length >= 1) {
              _results = [];
              for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
                element = initvariant[_i];
                if (value1.get(value.key) === parseInt(element)) {
                  _results.push(flag++);
                } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                  _results.push(flag++);
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            } else {
              if (value1.get(value.key) === parseInt(value.value)) {
                return flag++;
              }
            }
          }
        });
        if (flag >= myArray.length) {
          return floorCollunits.push(value1);
        }
      });
      floorCollunits1 = [];
      $.each(floorUnitsArray, function(index, value1) {
        flag = 0;
        $.each(myArray1, function(index, value) {
          var budget_arr, budget_price, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
          paramKey = {};
          paramKey[value.key] = value.value;
          if (value.key === 'budget') {
            buildingModel = App.master.building.findWhere({
              'id': value1.get('building')
            });
            floorRise = buildingModel.get('floorrise');
            floorRiseValue = floorRise[value1.get('floor')];
            unitVariantmodel = App.master.unit_variant.findWhere({
              'id': value1.get('unitVariant')
            });
            unitPrice = value1.get('unitPrice');
            budget_arr = value.value.split(' ');
            budget_price = budget_arr[0].split('-');
            budget_price[0] = budget_price[0] + '00000';
            budget_price[1] = budget_price[1] + '00000';
            if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
              return flag++;
            }
          } else if (value.key !== 'floor') {
            tempnew = [];
            if (value.key === 'view' || value.key === 'apartment_views') {
              tempnew = [];
              value.key = 'apartment_views';
              tempnew = value1.get(value.key);
              if (tempnew !== "") {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            } else if (value.key === 'facing') {
              tempnew = [];
              tempnew = value1.get(value.key);
              if (tempnew.length !== 0) {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            }
            temp = [];
            temp.push(value.value);
            tempstring = temp.join(',');
            initvariant = tempstring.split(',').map(function(item) {
              return parseInt(item);
            });
            if (initvariant.length >= 1) {
              _results = [];
              for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
                element = initvariant[_i];
                if (value1.get(value.key) === parseInt(element)) {
                  _results.push(flag++);
                } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                  _results.push(flag++);
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            } else {
              if (value1.get(value.key) === parseInt(value.value)) {
                return flag++;
              }
            }
          }
        });
        if (flag === myArray1.length) {
          if (value1.get('unitType') !== 14 && value1.get('unitType') !== 16) {
            return floorCollunits1.push(value1);
          }
        }
      });
      tempunitvarinat = [];
      uniqUnitvariant = [];
      floorCollection = new Backbone.Collection(floorCollunits);
      $.each(App.master.unit.toArray(), function(index, value) {
        if (value.get('unitType') !== 14 && value.get('unitType') !== 16) {
          return tempunitvarinat.push(value);
        }
      });
      unitvarinatColl = new Backbone.Collection(tempunitvarinat);
      unitvariant = unitvarinatColl.pluck("unitVariant");
      uniqUnitvariant = _.uniq(unitvariant);
      floorunitvariant = floorCollection.pluck("unitVariant");
      flooruniqUnitvariant = _.uniq(floorunitvariant);
      unitVariantModels = [];
      unitVariantID = [];
      viewModels = [];
      viewID = [];
      viewtemp = [];
      viewtemp1 = [];
      facingModels = [];
      facingID = [];
      facingtemp = [];
      facingtemp1 = [];
      terraceModels = [];
      terraceID = [];
      terracetemp = [];
      terracetemp1 = [];
      usermodel = new Backbone.Model(USER);
      capability = usermodel.get('all_caps');
      if (usermodel.get('id') !== "0" && $.inArray('see_special_filters', capability) >= 0) {
        floorCollectionmaster = App.master.unit;
        floorCollectionmaster.each(function(item) {
          if (item.get('unitType') !== 14 && item.get('unitType') !== 16) {
            if (item.get('apartment_views') !== "" && item.get('apartment_views').length !== 0) {
              $.merge(viewtemp, item.get('apartment_views'));
            }
            if (item.get('facing').length !== 0 && item.get('facing') !== "") {
              $.merge(facingtemp, item.get('facing'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return terracetemp.push(item.get('terrace'));
            }
          }
        });
        floorCollectionCur = new Backbone.Collection(floorCollunits1);
        floorCollectionCur.each(function(item) {
          if (item.get('unitType') !== 14 && item.get('unitType') !== 16) {
            if (item.get('apartment_views') !== "" && item.get('apartment_views').length !== 0) {
              $.merge(viewtemp1, item.get('apartment_views'));
            }
            if (item.get('facing').length !== 0 && item.get('facing') !== "") {
              $.merge(facingtemp1, item.get('facing'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return terracetemp1.push(item.get('terrace'));
            }
          }
        });
        viewtemp = viewtemp.map(function(item) {
          return parseInt(item);
        });
        facingtemp = facingtemp.map(function(item) {
          return parseInt(item);
        });
        terracetemp = terracetemp.map(function(item) {
          return parseInt(item);
        });
        uniqviews = _.uniq(viewtemp);
        uniqfacings = _.uniq(facingtemp);
        uniqterrace = _.uniq(terracetemp);
        viewtemp1 = viewtemp1.map(function(item) {
          return parseInt(item);
        });
        viewtemp1 = _.uniq(viewtemp1);
        facingtemp1 = facingtemp1.map(function(item) {
          return parseInt(item);
        });
        facingtemp1 = _.uniq(facingtemp1);
        terracetemp1 = terracetemp1.map(function(item) {
          return parseInt(item);
        });
        terracetemp1 = _.uniq(terracetemp1);
        $.each(uniqviews, function(index, value) {
          var checked, classname, count, disabled, viewModel;
          viewModel = App.master.view.findWhere({
            id: parseInt(value)
          });
          disabled = "disabled";
          checked = "";
          key = "";
          key = $.inArray(parseInt(value), viewtemp1);
          count = [];
          $.each(floorCollunits1, function(ind, val) {
            var apartment;
            if (parseInt(val.get('status')) === parseInt(status.get('id'))) {
              apartment = val.get('apartment_views');
              apartment = apartment.map(function(item) {
                return parseInt(item);
              });
              if ($.inArray(parseInt(value), apartment) >= 0) {
                return $.merge(count, val.get('apartment_views'));
              }
            }
          });
          if (count.length !== 0 && key >= 0) {
            disabled = "";
            checked = "checked";
            classname = 'filtered';
            viewID.push(parseInt(viewModel.get('id')));
          } else if (count.length === 0 && key >= 0) {
            classname = 'sold';
          } else {
            classname = 'other';
          }
          return viewModels.push({
            id: viewModel.get('id'),
            name: viewModel.get('name'),
            disabled: disabled,
            checked: checked,
            classname: classname
          });
        });
        $.each(uniqfacings, function(index, value) {
          var checked, classname, count, disabled, facingModel;
          facingModel = App.master.facings.findWhere({
            id: parseInt(value)
          });
          disabled = "disabled";
          checked = "";
          key = "";
          key = $.inArray(parseInt(value), facingtemp1);
          count = [];
          $.each(floorCollunits1, function(ind, val) {
            var facing;
            if (parseInt(val.get('status')) === parseInt(status.get('id'))) {
              facing = val.get('facing');
              facing = facing.map(function(item) {
                return parseInt(item);
              });
              if ($.inArray(parseInt(value), facing) >= 0) {
                return $.merge(count, val.get('facing'));
              }
            }
          });
          if (count.length !== 0 && key >= 0) {
            disabled = "";
            checked = "checked";
            classname = 'filtered';
            facingID.push(parseInt(facingModel.get('id')));
          } else if (count.length === 0 && key >= 0) {
            classname = 'sold';
          } else {
            classname = 'other';
          }
          return facingModels.push({
            id: facingModel.get('id'),
            name: facingModel.get('name'),
            disabled: disabled,
            checked: checked,
            classname: classname
          });
        });
        $.each(uniqterrace, function(index, value) {
          var checked, classname, count, disabled, terraceModel;
          terraceModel = App.master.terrace.findWhere({
            id: parseInt(value)
          });
          disabled = "disabled";
          checked = "";
          key = "";
          key = $.inArray(parseInt(value), terracetemp1);
          count = [];
          $.each(floorCollunits1, function(ind, val) {
            if (parseInt(val.get('status')) === parseInt(status.get('id'))) {
              if (parseInt(value) === parseInt(val.get('terrace'))) {
                return count.push(val);
              }
            }
          });
          if (count.length !== 0 && key >= 0) {
            disabled = "";
            checked = "checked";
            classname = 'filtered';
            terraceID.push(parseInt(terraceModel.get('id')));
          } else if (count.length === 0 && key >= 0) {
            classname = 'sold';
          } else {
            classname = 'other';
          }
          return terraceModels.push({
            id: parseInt(terraceModel.get('id')),
            name: terraceModel.get('name'),
            disabled: disabled,
            checked: checked,
            classname: classname
          });
        });
      }
      $.each(uniqUnitvariant, function(index, value) {
        var classname, count, filter, selected, unitVarinatModel, unittypemodel;
        unitVarinatModel = App.master.unit_variant.findWhere({
          id: value
        });
        count = floorCollection.where({
          'unitVariant': value,
          'status': status.get('id')
        });
        key = $.inArray(value, flooruniqUnitvariant);
        if (App.defaults['unitType'] !== "All") {
          unittypemodel = App.master.unit_type.findWhere({
            id: parseInt(App.defaults['unitType'])
          });
          filter = unittypemodel.get('name') + ' apartments';
        } else if (App.defaults['budget'] !== "All") {
          filter = 'Apartments within ' + App.defaults['budget'];
        }
        selected = "";
        if (count.length !== 0 && key >= 0) {
          classname = 'filtered';
          selected = 'selected';
          unitVariantID.push(parseInt(unitVarinatModel.get('id')));
        } else if (count.length === 0 && key >= 0) {
          classname = 'sold';
        } else {
          classname = 'other';
        }
        return unitVariantModels.push({
          id: unitVarinatModel.get('id'),
          name: unitVarinatModel.get('name'),
          sellablearea: unitVarinatModel.get('sellablearea'),
          count: count.length,
          classname: classname,
          selected: selected,
          filter: filter
        });
      });
      unitVariantModels.sort(function(a, b) {
        return a.id - b.id;
      });
      unitVariantID.sort(function(a, b) {
        return a - b;
      });
      mainunitTypeArray1 = [];
      units1 = App.master.unit.where({
        'status': status.get('id')
      });
      $.each(units1, function(index, value) {
        var unitType;
        if (buildingArray.indexOf(value.get('building')) === -1) {
          buildingArray.push(value.get('building'));
        }
        unitType = App.master.unit_type.findWhere({
          id: value.get('unitType')
        });
        return mainunitTypeArray1.push({
          id: unitType.get('id'),
          name: unitType.get('name')
        });
      });
      $.each(units, function(index, value) {
        var maxcoll, unitType;
        maxcoll = Array();
        unitType = App.master.unit_type.findWhere({
          id: value.get('unitType')
        });
        return mainunitTypeArray.push({
          id: unitType.get('id'),
          name: unitType.get('name')
        });
      });
      $.each(mainunitTypeArray1, function(key, item) {
        var classname, count;
        if (!mainunique[item.id]) {
          if (item.id !== 14 && item.id !== 16) {
            status = App.master.status.findWhere({
              'name': 'Available'
            });
            count = App.currentStore.unit.where({
              unitType: item.id,
              'status': status.get('id')
            });
            if (parseInt(item.id) === 9) {
              classname = 'twoBHK';
            } else {
              classname = 'threeBHK';
            }
            mainnewarr.push({
              id: item.id,
              name: item.name,
              classname: classname,
              count: count
            });
            return mainunique[item.id] = item;
          }
        }
      });
      buildingUnits = [];
      $.each(buildingArray, function(index, value) {
        var availableunits, buildingid, data, disablehigh, disablelow, disablemedium, flag1, flag2, flag3, flag4, flag5, floors, hclassname, hcount, hfloorvalue, highArray, high_max_val, high_min_val, hunique, hunitTypeArray, itemCollection, lclassname, lcount, lfloorvalue, lowArray, low_max_val, low_min_val, lunique, lunitTypeArray, mclassname, mcount, mediumArray, medium_max_val, medium_min_val, mfloorvalue, munique, munitTypeArray, newarr, newunits, totalfloorcollection, totalunits, uniqFloors, unique, unitTypeArray, variantsDataValues, viewmodels;
        buildingid = value;
        unitTypeArray = Array();
        newarr = [];
        unique = {};
        viewmodels = [];
        lunitTypeArray = [];
        lnewarr = [];
        lunique = {};
        munitTypeArray = [];
        mnewarr = [];
        munique = {};
        hunitTypeArray = [];
        hnewarr = [];
        hunique = {};
        lcount = [];
        mcount = [];
        hcount = [];
        mainArray = Array();
        lclassname = "";
        mclassname = "";
        hclassname = "";
        status = App.currentStore.status.findWhere({
          'name': 'Available'
        });
        totalunits = App.currentStore.unit.where({
          'building': value
        });
        buildingModel = App.master.building.findWhere({
          id: buildingid
        });
        floorriserange = buildingModel.get('floorriserange');
        variantsDataValues = [];
        data = [];
        flag = 0;
        flag1 = 0;
        $.each(mainunitTypeArray, function(key, item) {
          var count;
          if (!lunique[item.id]) {
            lunitTypeArray = [];
            status = App.currentStore.status.findWhere({
              'name': 'Available'
            });
            count = App.currentStore.unit.where({
              unitType: item.id,
              'status': status.get('id'),
              building: buildingid
            });
            $.each(count, function(index, value) {
              if ((value.get('floor') >= parseInt(floorriserange[0].start) && value.get('floor') <= parseInt(floorriserange[0].end)) && item.id === value.get('unitType')) {
                return lunitTypeArray.push(value);
              }
            });
            $.each(lunitTypeArray, function(index, value) {
              if (value.get('unitType') === 9) {
                flag = 1;
              }
              if (value.get('unitType') === 10) {
                return flag1 = 1;
              }
            });
            if (parseInt(flag) === 1) {
              lclassname = 'twoBHK';
            }
            if (parseInt(flag1) === 1) {
              lclassname = 'threeBHK';
            }
            if (parseInt(flag) === 1 && parseInt(flag1) === 1) {
              lclassname = 'multiBHK';
            }
            lnewarr.push({
              id: item.id,
              name: item.name,
              count: lunitTypeArray.length,
              classname: lclassname
            });
            return lunique[item.id] = item;
          }
        });
        flag2 = 0;
        flag3 = 0;
        $.each(mainunitTypeArray, function(key, item) {
          var count;
          if (!munique[item.id]) {
            munitTypeArray = [];
            status = App.currentStore.status.findWhere({
              'name': 'Available'
            });
            count = App.currentStore.unit.where({
              unitType: item.id,
              'status': status.get('id'),
              building: buildingid
            });
            $.each(count, function(index, value) {
              if ((value.get('floor') >= parseInt(floorriserange[1].start) && value.get('floor') <= parseInt(floorriserange[1].end)) && item.id === value.get('unitType')) {
                return munitTypeArray.push(value);
              }
            });
            $.each(munitTypeArray, function(index, value) {
              if (value.get('unitType') === 9) {
                flag2 = 1;
              }
              if (value.get('unitType') === 10) {
                return flag3 = 1;
              }
            });
            if (parseInt(flag2) === 1) {
              mclassname = 'twoBHK';
            }
            if (parseInt(flag3) === 1) {
              mclassname = 'threeBHK';
            }
            if (parseInt(flag2) === 1 && parseInt(flag3) === 1) {
              mclassname = 'multiBHK';
            }
            mnewarr.push({
              id: item.id,
              name: item.name,
              count: munitTypeArray.length,
              classname: mclassname
            });
            return munique[item.id] = item;
          }
        });
        flag4 = 0;
        flag5 = 0;
        $.each(mainunitTypeArray, function(key, item) {
          var count;
          if (!hunique[item.id]) {
            hunitTypeArray = [];
            status = App.currentStore.status.findWhere({
              'name': 'Available'
            });
            count = App.currentStore.unit.where({
              unitType: item.id,
              'status': status.get('id'),
              building: buildingid
            });
            $.each(count, function(index, value) {
              if ((value.get('floor') >= parseInt(floorriserange[2].start) && value.get('floor') <= parseInt(floorriserange[2].end)) && item.id === value.get('unitType')) {
                return hunitTypeArray.push(value);
              }
            });
            $.each(hunitTypeArray, function(index, value) {
              if (value.get('unitType') === 9) {
                flag4 = 1;
              }
              if (value.get('unitType') === 10) {
                return flag5 = 1;
              }
            });
            if (parseInt(flag4) === 1) {
              hclassname = 'twoBHK';
            }
            if (parseInt(flag5) === 1) {
              hclassname = 'threeBHK';
            }
            if (parseInt(flag4) === 1 && parseInt(flag5) === 1) {
              hclassname = 'multiBHK';
            }
            hnewarr.push({
              id: item.id,
              name: item.name,
              count: hunitTypeArray.length,
              classname: hclassname
            });
            return hunique[item.id] = item;
          }
        });
        availableunits = App.currentStore.unit.where({
          'building': value,
          'status': status.get('id')
        });
        totalfloorcollection = new Backbone.Collection(totalunits);
        floors = totalfloorcollection.pluck("floor");
        uniqFloors = _.uniq(floors);
        newunits = App.currentStore.unit.where({
          'building': value,
          'status': status.get('id')
        });
        buildingUnits.push({
          id: buildingid,
          count: newunits.length,
          name: 'tower' + buildingid
        });
        lowArray = Array();
        mediumArray = Array();
        highArray = Array();
        mainArray = Array();
        unitTypeArray = [];
        $.each(newunits, function(index, value) {
          var unitType;
          if (value.get('unitType') !== 14 && value.get('unitType') !== 16) {
            if (value.get('floor') >= parseInt(floorriserange[0].start) && value.get('floor') <= parseInt(floorriserange[0].end)) {
              lowArray.push(value.get('id'));
            }
            if (value.get('floor') >= parseInt(floorriserange[1].start) && value.get('floor') <= parseInt(floorriserange[1].end)) {
              mediumArray.push(value.get('id'));
            }
            if (value.get('floor') >= parseInt(floorriserange[2].start) && value.get('floor') <= parseInt(floorriserange[2].end)) {
              highArray.push(value.get('id'));
            }
          }
          unitType = App.master.unit_type.findWhere({
            id: value.get('unitType')
          });
          return unitTypeArray.push({
            id: unitType.get('id'),
            name: unitType.get('name')
          });
        });
        $.each(unitTypeArray, function(key, item) {
          var classname, count;
          if (!unique[item.id]) {
            status = App.currentStore.status.findWhere({
              'name': 'Available'
            });
            count = App.currentStore.unit.where({
              unitType: item.id,
              'status': status.get('id'),
              'building': buildingid
            });
            if (parseInt(item.id) === 9) {
              classname = 'twoBHK m-l-20';
            } else {
              classname = 'oneBHK';
            }
            newarr.push({
              id: item.id,
              name: item.name,
              count: count.length,
              classname: classname
            });
            return unique[item.id] = item;
          }
        });
        low_max_val = 0;
        low_min_val = 0;
        medium_max_val = 0;
        medium_min_val = 0;
        high_min_val = 0;
        high_max_val = 0;
        lfloorvalue = "";
        mfloorvalue = "";
        hfloorvalue = "";
        disablehigh = "other";
        disablemedium = "other";
        disablelow = "other";
        lfloorvalue = 'Floors ' + floorriserange[0].start + '-' + floorriserange[0].end;
        mfloorvalue = 'Floors ' + floorriserange[1].start + '-' + floorriserange[1].end;
        hfloorvalue = 'Floors ' + floorriserange[2].start + '-' + floorriserange[2].end;
        $.each(lowArray, function(index, value) {
          var max_coll, unitCollection, unitmodel, unittypemodel;
          disablelow = "";
          unitmodel = App.master.unit.findWhere({
            id: value
          });
          unittypemodel = App.master.unit_type.findWhere({
            id: unitmodel.get('unitType')
          });
          unitCollection = App.master.unit.where({
            unitType: unittypemodel.get('id')
          });
          max_coll = Array();
          $.each(unitCollection, function(index, value) {
            var variantmodel;
            variantmodel = App.master.unit_variant.findWhere({
              id: value.get('unitVariant')
            });
            return max_coll.push(variantmodel.get('sellablearea'));
          });
          low_max_val = Math.max.apply(Math, max_coll);
          return low_min_val = Math.min.apply(Math, max_coll);
        });
        $.each(mediumArray, function(index, value) {
          var max_coll, unitCollection, unitmodel, unittypemodel;
          disablemedium = "";
          unitmodel = App.master.unit.findWhere({
            id: value
          });
          unittypemodel = App.master.unit_type.findWhere({
            id: unitmodel.get('unitType')
          });
          munitTypeArray.push({
            id: unittypemodel.get('id'),
            name: unittypemodel.get('name')
          });
          unitCollection = App.master.unit.where({
            unitType: unittypemodel.get('id')
          });
          max_coll = Array();
          $.each(unitCollection, function(index, value) {
            var variantmodel;
            variantmodel = App.master.unit_variant.findWhere({
              id: value.get('unitVariant')
            });
            return max_coll.push(variantmodel.get('sellablearea'));
          });
          medium_max_val = Math.max.apply(Math, max_coll);
          return medium_min_val = Math.min.apply(Math, max_coll);
        });
        $.each(highArray, function(index, value) {
          var max_coll, unitCollection, unitmodel, unittypemodel;
          disablehigh = "";
          unitmodel = App.master.unit.findWhere({
            id: value
          });
          unittypemodel = App.master.unit_type.findWhere({
            id: unitmodel.get('unitType')
          });
          hunitTypeArray.push({
            id: unittypemodel.get('id'),
            name: unittypemodel.get('name')
          });
          unitCollection = App.master.unit.where({
            unitType: unittypemodel.get('id')
          });
          max_coll = Array();
          $.each(unitCollection, function(index, value) {
            var variantmodel;
            variantmodel = App.master.unit_variant.findWhere({
              id: value.get('unitVariant')
            });
            return max_coll.push(variantmodel.get('sellablearea'));
          });
          high_max_val = Math.max.apply(Math, max_coll);
          return high_min_val = Math.min.apply(Math, max_coll);
        });
        if (App.defaults['unitType'] !== 'All') {
          mainnewarr = [];
          hclassname = "";
          mclassname = "";
          lclassname = "";
        }
        mainArray.push({
          count: highArray.length,
          low_max_val: high_max_val,
          low_min_val: high_min_val,
          range: 'high',
          buildingid: buildingid,
          unittypes: hnewarr,
          classname: hclassname,
          rangetext: 'HIGHRISE',
          rangeNo: hfloorvalue,
          disable: disablehigh
        });
        mainArray.push({
          count: mediumArray.length,
          low_max_val: medium_max_val,
          low_min_val: medium_min_val,
          range: 'medium',
          buildingid: buildingid,
          unittypes: mnewarr,
          classname: mclassname,
          rangetext: 'MIDRISE',
          rangeNo: mfloorvalue,
          disable: disablemedium
        });
        mainArray.push({
          count: lowArray.length,
          low_max_val: low_max_val,
          low_min_val: low_min_val,
          range: 'low',
          buildingid: buildingid,
          unittypes: lnewarr,
          classname: lclassname,
          rangetext: 'LOWRISE',
          rangeNo: lfloorvalue,
          disable: disablelow
        });
        itemCollection = new Backbone.Collection(mainArray);
        buildingModel = App.master.building.findWhere({
          id: value
        });
        unitColl.push({
          id: buildingModel.get('id'),
          buildingname: buildingModel.get('name'),
          units: itemCollection,
          buildingid: buildingModel.get('id'),
          unittypes: newarr,
          availableunits: availableunits.length,
          totalunits: totalunits.length,
          totalfloors: uniqFloors.length,
          views: variantsDataValues
        });
        return buildingArrayModel.push(buildingModel);
      });
      mainArray = [];
      if (buildingUnits.length === 2) {
        buildingUnits.push({
          id: 100,
          count: 0,
          name: 'tower' + 100
        });
        mainArray.push({
          count: '---',
          low_max_val: 0,
          low_min_val: 0,
          range: 'high',
          buildingid: 100,
          unittypes: 0,
          classname: "",
          rangetext: 'HIGHRISE',
          rangeNo: 'Floors --'
        });
        mainArray.push({
          count: '---',
          low_max_val: 0,
          low_min_val: 0,
          range: 'medium',
          buildingid: 100,
          unittypes: 0,
          classname: "",
          rangetext: 'MIDRISE',
          rangeNo: 'Floors --'
        });
        mainArray.push({
          count: '---',
          low_max_val: 0,
          low_min_val: 0,
          range: 'low',
          buildingid: 100,
          unittypes: 0,
          classname: "",
          rangetext: 'LOWRISE',
          rangeNo: 'Floors --'
        });
        itemCollection = new Backbone.Collection(mainArray);
        unitColl.push({
          id: 101,
          buildingname: 'Random',
          units: itemCollection,
          buildingid: 100,
          unittypes: 0,
          availableunits: 0,
          totalunits: 0,
          totalfloors: 0,
          views: 0
        });
      }
      buildingvalue = _.max(buildingUnits, function(model) {
        return model.count;
      });
      buildingUnits.sort(function(a, b) {
        return a.id - b.id;
      });
      modelIdArr = [];
      modelArr = [];
      ModelActualArr = [];
      $.each(buildingUnits, function(index, value) {
        return modelIdArr.push(value.id);
      });
      key = _.isEmpty(paramid);
      if (key === true) {
        index = _.indexOf(modelIdArr, buildingvalue.id);
        modelArr.push(buildingvalue.id);
      } else {
        keycheck = _.findWhere(buildingUnits, {
          name: paramid
        });
        index = _.indexOf(modelIdArr, keycheck.id);
        modelArr.push(keycheck.id);
      }
      highLength = modelIdArr.length - index;
      i = index + 1;
      while (i < modelIdArr.length) {
        modelArr.push(modelIdArr[i]);
        i++;
      }
      j = 0;
      while (j < index) {
        modelArr.push(modelIdArr[j]);
        j++;
      }
      if (modelArr.length === 2) {
        arrayvalue = _.last(modelArr);
        modelArr.push(arrayvalue);
      }
      buildingsactual = [];
      unitsactual = [];
      buildingCollection = new Backbone.Collection(buildingArrayModel);
      units = new Backbone.Collection(unitColl);
      $.each(modelArr, function(index, value) {
        value = value;
        buildingsactual.push(buildingCollection.get(value));
        return unitsactual.push(units.get(value));
      });
      buildingCollection = new Backbone.Collection(buildingsactual);
      units = new Backbone.Collection(unitsactual);
      return [buildingCollection, units, templateString, Countunits.length, mainnewarr, hnewarr, mnewarr, lnewarr, unitVariantModels, unitVariantID, unitVariantID, viewModels, facingModels, viewID, facingID, terraceModels, terraceID];
    };

    return ScreenTwoController;

  })(Extm.RegionController);
  return msgbus.registerController('screen:two', ScreenTwoController);
});

// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/screen-three/screen-three-view',['marionette'], function(Marionette) {
  var BuildingView, ScreenThreeLayout, UnitTypeChildView, UnitTypeView, UnitView, cloneunitVariantArrayColl, count, entrancetagsArray, firstElement, flag_set, globalUnitArrayInt, object, object1, object2, object3, object4, position, rangeunitArray, sudoSlider, tagsArray, terracetagsArray, unitAssigedArray, unitChildView, unitVariantArray, unitVariantIdArray, unitVariantString, unitVariants, viewtagsArray;
  flag_set = 0;
  unitVariantArray = '';
  unitVariantIdArray = [];
  unitVariantString = '';
  firstElement = '';
  tagsArray = [];
  count = 0;
  object1 = "this";
  unitVariants = [];
  cloneunitVariantArrayColl = "";
  rangeunitArray = [];
  globalUnitArrayInt = [];
  position = "";
  unitAssigedArray = [];
  sudoSlider = "";
  viewtagsArray = [];
  entrancetagsArray = [];
  terracetagsArray = [];
  object = "this";
  object2 = "this";
  object3 = "this";
  object4 = "this";
  ScreenThreeLayout = (function(_super) {
    __extends(ScreenThreeLayout, _super);

    function ScreenThreeLayout() {
      return ScreenThreeLayout.__super__.constructor.apply(this, arguments);
    }

    ScreenThreeLayout.prototype.template = '<h3 class="text-center light m-t-0 m-b-20 unittype hidden animated pulse">We found <span class="bold text-primary"> {{countUnits }} </span> apartments that matched your selection.</h3> <h3 class="text-center light m-t-0 m-b-20 budget hidden animated pulse">We found <span class="bold text-primary"> {{countUnits }} </span>  apartments in your budget of <strong>{{selection}}</strong></h3> <h3 class="text-center light m-t-0 m-b-20 refresh hidden animated pulse">You just refreshed the page. You are now seeing <span class="bold text-primary">All</span> apartments across all the towers.</h3> <div class="text-center subTxt m-b-20 All hidden animated pulse">You are seeing <span class="bold text-primary">All</span> apartments in the selected floor range of the tower.</div> <div class="introTxt text-center">These apartments are available in different size variations on different floors of the tower. Click on any available apartment for more details. <!--<br><em>(You can scroll between towers to see other options.)</em>--></div> <div class="introTxt text-center light"> You are seeing <div id="tagslist1" class="taglist"> <ul></ul> </div> <span class="text-primary variantToggle"></span>variants of your apartment selection </div> <div class="variantBox"> <div class="grid-container"> <div class="pull-left m-l-15"> <input type="checkbox" name="unselectall" id="unselectall" class="checkbox" value="0" checked/> <label for="unselectall">Select/Unselect All</label> </div> <div class="text-right"><span class="variantClose glyphicon glyphicon-remove text-grey"></span></div> {{#unitVariants}} <div class="grid-block-3 {{filtername}}" > <a class="grid-link2 {{selected}}" href="#" id="gridlink{{id}}" data-id="{{id}}" data-count = "{{count}}"> {{sellablearea}} Sq.ft.<input type="hidden" name="checklink{{id}}"   id="checklink{{id}}"   value="1" /> <h5><span> {{filter}} : </span> {{count}}</h5> </a> </div> {{/unitVariants}} <div class="variantAction m-t-5 m-b-20"> <a class="btn btn-primary m-r-10 done">DONE</a> <a class="btn btn-default cancel">CANCEL</a> </div> </div> </div> <div class="special introTxt text-center hidden "> <div> Click <a class="special bold hidden" id="filterModalscren3">here</a> to set <span class="bold"> Additional Filters</span> </div> View: <div id="viewtaglist2" class="taglist2"> <ul></ul> </div> Entrance: <div id="entrancetaglist2" class="taglist2"> <ul></ul> </div> Terrace: <div id="terracetaglist2" class="taglist2"> <ul></ul> </div> </div> <div class="row m-l-0 m-r-0 m-t-20 bgClass"> <div class="col-md-5 col-lg-4"> <div id="vs-container" class="vs-container"> <header class="vs-header" id="building-region"></header> <div id="layoutmsg" class="alrtMsg animated pulse"></div> <div id="floorsvg" class="floorSvg"></div> <div  id="unit-region"></div> </div> <div class="h-align-middle m-t-20 m-b-20"> <a href="#screen-three-region" class="btn btn-default btn-lg disabled" id="screen-three-button">Show Unit</a> </div> </div> <div class="col-md-7 col-lg-8 b-grey b-l visible-md visible-lg rightTowerSvg"> <div class="svgLegend"> <div class="row"> <div class="col-sm-6"><span class="legendBox available"></span> Available</div> <!--<div class="col-sm-4"><span class="legendBox sold"></span> Sold/Blocked</div>--> <div class="col-sm-6"><span class="legendBox na"></span> Not in Selection/Not Released</div> </div> </div> <div id="positionsvg" class="positionSvg"> </div> </div> <input type="hidden" name="currency2" id="currency2" class="demo" data-a-sign="Rs. "   data-m-dec="" data-d-group="2"> </div> <div class="specialFilter1"> <div class="bgClass"> <h3 class="text-center light">Choose from the options below to filter your selection</h3> <div class="pull-left m-l-15"> <input type="checkbox" name="unselectview" id="unselectview" class="checkbox" value="0" checked/> <label for="unselectview">Select/Unselect All</label> </div> <div class="clearfix"></div> <div class="row m-l-0 m-r-0 filterBlock"> <div class="col-sm-5 b-r b-grey"> <h4 class="bold blockTitle">View</h4> {{#views}} <div class="filterBox {{classname}}"> <input type="checkbox" {{disabled}} name="screenview{{id}}" data-name="{{name}}" id="screenview{{id}}" {{checked}} class="checkbox viewname" value="{{id}}"> <label for="screenview{{id}}">{{name}}</label> </div> {{/views}} <div class="clearfix"></div> </div> <div class="col-sm-3 b-r b-grey"> <h4 class="bold blockTitle">Entrance</h4> {{#facings}} <div class="filterBox {{classname}}"> <input type="checkbox" {{disabled}} name="screenfacing{{id}}" data-name="{{name}}" id="screenfacing{{id}}" {{checked}} class="checkbox facing" value="{{id}}"> <label for="screenfacing{{id}}">{{name}}</label> </div> {{/facings}} <div class="clearfix"></div> </div> <div class="col-sm-4"> <h4 class="bold blockTitle">Terrace</h4> {{#terrace}} <div class="filterBox {{classname}}"> <input type="checkbox" {{disabled}}  name="screenterrace{{id}}" data-name="{{name}}" id="screenterrace{{id}}" {{checked}} class="checkbox terrace" value="{{id}}"> <label for="screenterrace{{id}}">{{name}}</label> </div> {{/terrace}} </div> </div> <div id="filtermsg1" class="alrtMsg animated pulse"></div> <h4 id="unittypecount1" class="text-center"></h4> <div class="text-center m-t-10 m-b-10"> <a id="donepopupscreen" class="btn btn-primary btn-sm b-close">DONE</a> <!--<a id="cancelpopupscreen" class="btn btn-primary btn-sm b-close">CANCEL</a>--> </div> </div> </div>';

    ScreenThreeLayout.prototype.className = 'page-container row-fluid';

    ScreenThreeLayout.prototype.regions = {
      buildingRegion: '#building-region',
      unitRegion: '#unit-region'
    };

    ScreenThreeLayout.prototype.events = {
      'click .other': function(e) {
        $("#" + e.target.id).parent().removeAttr('data-target');
        return this.showLayoutMsg();
      },
      'click #filterModalscren3': function(e) {
        if (App.defaults['view'] === 'All' && App.defaults['facing'] === 'All' && App.defaults['terrace'] === 'All') {
          $('#unselectview').prop('checked', true);
        } else {
          $('#unselectview').prop('checked', false);
        }
        return $('.specialFilter1').bPopup();
      },
      'click .floor-pos ': function(e) {
        var element, id, index, _i, _len;
        $("#flatno").text("");
        $("#towerno").text("");
        $("#unittypename").text("");
        $("#area").text("");
        $("#floorrise").text("");
        $('.room').html("");
        $('#terrace').text("");
        $('#printfacing').text("");
        $('#printview').text("");
        $("#twoDimage").attr('src', "");
        $("#zoomedinimage").attr('src', "");
        $("#floorlayoutbasic").text("");
        $('#printmapplic1').text("");
        $('#towerview').text("");
        id = parseInt(e.target.id);
        for (index = _i = 0, _len = unitAssigedArray.length; _i < _len; index = ++_i) {
          element = unitAssigedArray[index];
          if (element === parseInt(id)) {
            $('#' + element).attr('class', 'floor-pos position');
          } else {
            $('#' + element).attr('class', 'floor-pos ');
          }
        }
        $('#' + id).attr('class', 'floor-pos position');
        unitAssigedArray.push(id);
        return this.loadsvg(id);
      },
      'click .unit-hover': function(e) {
        var buildinArray, building, buildingCollection, buildingModel, flatid, floorriserange, id, indexvalue, rangeArrayVal, svgdata, svgposition, temp, temp1, temp2, unitModel, unitvalues;
        $("#flatno").text("");
        $("#towerno").text("");
        $("#unittypename").text("");
        $("#area").text("");
        $("#floorrise").text("");
        $('.room').html("");
        $('#terrace').text("");
        $('#printfacing').text("");
        $('#printview').text("");
        $("#twoDimage").attr('src', "");
        $("#zoomedinimage").attr('src', "");
        $("#floorlayoutbasic").text("");
        $('#printmapplic1').text("");
        $('#towerview').text("");
        buildingCollection = Marionette.getOption(this, 'buildingCollection');
        buildinArray = buildingCollection.toArray();
        building = _.first(buildinArray);
        buildingModel = App.master.building.findWhere({
          id: parseInt(building.get('id'))
        });
        svgdata = buildingModel.get('svgdata');
        floorriserange = buildingModel.get('floorriserange');
        svgposition = "";
        unitvalues = "";
        indexvalue = "";
        temp = ['ff', 'f'];
        temp1 = ['tt', 't'];
        temp2 = ['cc', 'cc'];
        if (parseInt(building.get('id')) === 11) {
          temp = ['f', 'ff'];
          temp1 = ['t', 'tt'];
          temp2 = ['c', 'cc'];
        }
        id = $('#' + e.target.id).attr('data-value');
        flatid = $('#' + e.target.id).attr('data-id');
        unitModel = App.master.unit.findWhere({
          id: parseInt(id)
        });
        position = unitModel.get('unitAssigned');
        rangeArrayVal = [];
        $.each(floorriserange, function(index, value) {
          var end, i, start;
          rangeArrayVal = [];
          i = 0;
          start = parseInt(value.start);
          end = parseInt(value.end);
          while (parseInt(start) <= parseInt(end)) {
            rangeArrayVal[i] = start;
            start = parseInt(start) + 1;
            i++;
          }
          if (jQuery.inArray(parseInt(unitModel.get('floor')), rangeArrayVal) >= 0) {
            return App.defaults['floor'] = rangeArrayVal.join(',');
          }
        });
        $.each(svgdata, function(index, value) {
          var ii;
          if ($.inArray(position, value.svgposition) >= 0 && value.svgposition !== null) {
            ii = 0;
            return $.each(value.svgposition, function(index1, val1) {
              var element, indexvalue1, unit, unitsarray, _i, _j, _len, _len1;
              if (position === val1) {
                svgposition = value.svgfile;
                unitsarray = value.units;
                indexvalue = unitsarray[position];
                indexvalue1 = unitsarray[val1];
                $.map(indexvalue1, function(index, value) {
                  $('#f' + value).attr('class', 'unselected-floor ');
                  return $('#ff' + value).attr('class', 'unselected-floor ');
                });
                $.map(indexvalue, function(index, value) {
                  var floorArr;
                  if (App.defaults['floor'] !== "All") {
                    floorArr = App.defaults['floor'].split(',');
                    return $.each(floorArr, function(ind, val) {
                      if (parseInt(value) === parseInt(val)) {
                        $('#' + temp[ii] + value).attr('class', 'unit-hover range');
                        return $('#' + temp1[ii] + value).attr('class', 'unit-hover range');
                      }
                    });
                  } else {
                    $('#' + temp[ii] + value).attr('class', 'unit-hover range');
                    return $('#' + temp1[ii] + value).attr('class', 'unit-hover range');
                  }
                });
                $("#" + e.target.id).attr('class', 'selected-flat');
                $("#" + temp1[ii] + flatid).attr('class', 'selected-flat');
                unit = indexvalue[parseInt(flatid)];
                unitModel = App.master.unit.findWhere({
                  id: parseInt(unit)
                });
                position = unitModel.get('unitAssigned');
                for (index = _i = 0, _len = unitAssigedArray.length; _i < _len; index = ++_i) {
                  element = unitAssigedArray[index];
                  if (element === parseInt(unitModel.get('unitAssigned'))) {
                    $('#' + element).attr('class', 'floor-pos position');
                  } else {
                    $('#' + element).attr('class', 'floor-pos ');
                  }
                }
                unitAssigedArray.push(unitModel.get('unitAssigned'));
                $('#' + unitModel.get('unitAssigned')).attr('class', 'position');
                sudoSlider.goToSlide(unitModel.get('unitAssigned'));
                for (index = _j = 0, _len1 = rangeunitArray.length; _j < _len1; index = ++_j) {
                  element = rangeunitArray[index];
                  if (element === parseInt(unit)) {
                    $("#select" + unit).val('1');
                  } else {
                    $("#select" + element).val('0');
                    $('#check' + element).removeClass('selected');
                    rangeunitArray = [];
                  }
                }
                rangeunitArray.push(parseInt(unit));
                $('#check' + unit).addClass("selected");
                $("#select" + unit).val("1");
                $("#screen-three-button").removeClass('disabled btn-default');
                $("#screen-three-button").addClass('btn-primary');
              }
              return ii++;
            });
          }
        });
        unitModel;
        return this.trigger("load:range:data", unitModel);
      },
      'click .unselected-floor': function(e) {
        var buildinArray, building, buildingCollection, buildingModel, flatid, floorriserange, id, indexvalue, rangeArrayVal, svgdata, svgposition, temp, temp1, temp2, unitModel, unitvalues;
        $("#flatno").text("");
        $("#towerno").text("");
        $("#unittypename").text("");
        $("#area").text("");
        $("#floorrise").text("");
        $('.room').html("");
        $('#terrace').text("");
        $('#printfacing').text("");
        $('#printview').text("");
        $("#twoDimage").attr('src', "");
        $("#zoomedinimage").attr('src', "");
        $("#floorlayoutbasic").text("");
        $('#printmapplic1').text("");
        $('#towerview').text("");
        buildingCollection = Marionette.getOption(this, 'buildingCollection');
        buildinArray = buildingCollection.toArray();
        building = _.first(buildinArray);
        buildingModel = App.master.building.findWhere({
          id: parseInt(building.get('id'))
        });
        svgdata = buildingModel.get('svgdata');
        floorriserange = buildingModel.get('floorriserange');
        svgposition = "";
        unitvalues = "";
        indexvalue = "";
        temp = ['ff', 'f'];
        temp1 = ['tt', 't'];
        temp2 = ['cc', 'cc'];
        if (parseInt(building.get('id')) === 11) {
          temp = ['f', 'ff'];
          temp1 = ['t', 'tt'];
          temp2 = ['c', 'cc'];
        }
        id = $('#' + e.target.id).attr('data-value');
        flatid = $('#' + e.target.id).attr('data-id');
        unitModel = App.master.unit.findWhere({
          id: parseInt(id)
        });
        position = unitModel.get('unitAssigned');
        rangeArrayVal = [];
        $.each(floorriserange, function(index, value) {
          var end, i, start;
          rangeArrayVal = [];
          i = 0;
          start = parseInt(value.start);
          end = parseInt(value.end);
          while (parseInt(start) <= parseInt(end)) {
            rangeArrayVal[i] = start;
            start = parseInt(start) + 1;
            i++;
          }
          if (jQuery.inArray(parseInt(unitModel.get('floor')), rangeArrayVal) >= 0) {
            return App.defaults['floor'] = rangeArrayVal.join(',');
          }
        });
        $.each(svgdata, function(index, value) {
          var ii;
          if ($.inArray(position, value.svgposition) >= 0 && value.svgposition !== null) {
            ii = 0;
            return $.each(value.svgposition, function(index1, val1) {
              var indexvalue1, unit, unitsarray;
              if (position === val1) {
                svgposition = value.svgfile;
                unitsarray = value.units;
                indexvalue = unitsarray[position];
                indexvalue1 = unitsarray[val1];
                flatid = $('#' + e.target.id).attr('data-id');
                unit = indexvalue[parseInt(flatid)];
                $.map(indexvalue1, function(index, value) {
                  $('#f' + value).attr('class', 'unselected-floor ');
                  return $('#ff' + value).attr('class', 'unselected-floor ');
                });
                $.map(indexvalue, function(index, value) {
                  var floorArr;
                  if (App.defaults['floor'] !== "All") {
                    floorArr = App.defaults['floor'].split(',');
                    return $.each(floorArr, function(ind, val) {
                      if (parseInt(value) === parseInt(val)) {
                        $('#' + temp[ii] + value).attr('class', 'unit-hover range');
                        return $('#' + temp1[ii] + value).attr('class', 'unit-hover range');
                      }
                    });
                  } else {
                    $('#' + temp[ii] + value).attr('class', 'unselected-floor ');
                    return $('#' + temp1[ii] + value).attr('class', 'unselected-floor ');
                  }
                });
                $("#" + e.target.id).attr('class', 'selected-flat');
                $("#" + temp1[ii] + flatid).attr('class', 'selected-flat');
              }
              return ii++;
            });
          }
        });
        return this.trigger("load:range:data", unitModel);
      },
      'mouseover .unit-hover': function(e) {
        var buildinArray, building, buildingCollection, buildingModel, checktrack, flatid, floorriserange, id, indexvalue, pos, svgdata, svgposition, temp, temp1, temp2, unitModel, unitvalues;
        $("#flatno").text("");
        $("#towerno").text("");
        $("#unittypename").text("");
        $("#area").text("");
        $("#floorrise").text("");
        $('.room').html("");
        $('#terrace').text("");
        $('#printfacing').text("");
        $('#printview').text("");
        $("#twoDimage").attr('src', "");
        $("#zoomedinimage").attr('src', "");
        $("#floorlayoutbasic").text("");
        $('#printmapplic1').text("");
        $('#towerview').text("");
        buildingCollection = Marionette.getOption(this, 'buildingCollection');
        buildinArray = buildingCollection.toArray();
        building = _.first(buildinArray);
        buildingModel = App.master.building.findWhere({
          id: parseInt(building.get('id'))
        });
        svgdata = buildingModel.get('svgdata');
        floorriserange = buildingModel.get('floorriserange');
        svgposition = "";
        unitvalues = "";
        indexvalue = "";
        temp = ['ff', 'f'];
        temp1 = ['tt', 't'];
        temp2 = ['cc', 'cc'];
        if (parseInt(building.get('id')) === 11) {
          temp = ['f', 'ff'];
          temp1 = ['t', 'tt'];
          temp2 = ['c', 'cc'];
        }
        id = $('#' + e.target.id).attr('data-value');
        flatid = $('#' + e.target.id).attr('data-id');
        unitModel = App.master.unit.findWhere({
          id: parseInt(id)
        });
        pos = unitModel.get('unitAssigned');
        checktrack = this.checkSelection(unitModel);
        $.each(svgdata, function(index, value) {
          var ii;
          if ($.inArray(pos, value.svgposition) >= 0 && value.svgposition !== null) {
            ii = 0;
            return $.each(value.svgposition, function(index1, val1) {
              var currency, text, unittpe;
              if (pos === val1) {
                $('#currency2').autoNumeric('init');
                $('#currency2').autoNumeric('set', unitModel.get('unitPrice'));
                currency = $('#currency2').val();
                unittpe = App.master.unit_type.findWhere({
                  id: unitModel.get('unitType')
                });
                if (unittpe.get('id') !== 14 && unittpe.get('id') !== 16) {
                  text = unitModel.get('name') + ' | ' + unittpe.get('name');
                } else if (unittpe.get('id') === 14) {
                  text = 'Refuge';
                } else {
                  text = 'Not Released';
                }
                $('#' + temp1[ii] + flatid).text(text);
                $('#' + temp1[ii] + flatid).attr('x', '-30');
              }
              return ii++;
            });
          }
        });
        if (checktrack === 1 && parseInt(unitModel.get('status')) === 9) {
          return $("#" + e.target.id).attr('class', 'unit-hover aviable');
        } else if (checktrack === 1 && (parseInt(unitModel.get('status')) === 8 || parseInt(unitModel.get('status')) === 47)) {
          return $("#" + e.target.id).attr('class', 'sold');
        } else {
          return $("#" + e.target.id).attr('class', 'other');
        }
      },
      'mouseover .range': function(e) {
        var buildinArray, building, buildingCollection, buildingModel, checktrack, flatid, floorriserange, id, indexvalue, pos, svgdata, svgposition, temp, temp1, temp2, unitModel, unitvalues;
        $("#flatno").text("");
        $("#towerno").text("");
        $("#unittypename").text("");
        $("#area").text("");
        $("#floorrise").text("");
        $('.room').html("");
        $('#terrace').text("");
        $('#printfacing').text("");
        $('#printview').text("");
        $("#twoDimage").attr('src', "");
        $("#zoomedinimage").attr('src', "");
        $("#floorlayoutbasic").text("");
        $('#printmapplic1').text("");
        $('#towerview').text("");
        buildingCollection = Marionette.getOption(this, 'buildingCollection');
        buildinArray = buildingCollection.toArray();
        building = _.first(buildinArray);
        buildingModel = App.master.building.findWhere({
          id: parseInt(building.get('id'))
        });
        svgdata = buildingModel.get('svgdata');
        floorriserange = buildingModel.get('floorriserange');
        svgposition = "";
        unitvalues = "";
        indexvalue = "";
        temp = ['ff', 'f'];
        temp1 = ['tt', 't'];
        temp2 = ['cc', 'cc'];
        if (parseInt(building.get('id')) === 11) {
          temp = ['f', 'ff'];
          temp1 = ['t', 'tt'];
          temp2 = ['c', 'cc'];
        }
        id = $('#' + e.target.id).attr('data-value');
        flatid = $('#' + e.target.id).attr('data-id');
        unitModel = App.master.unit.findWhere({
          id: parseInt(id)
        });
        pos = unitModel.get('unitAssigned');
        checktrack = this.checkSelection(unitModel);
        $.each(svgdata, function(index, value) {
          var ii;
          if ($.inArray(pos, value.svgposition) >= 0 && value.svgposition !== null) {
            ii = 0;
            return $.each(value.svgposition, function(index1, val1) {
              var currency, text, unittpe;
              if (pos === val1) {
                $('#currency2').autoNumeric('init');
                $('#currency2').autoNumeric('set', unitModel.get('unitPrice'));
                currency = $('#currency2').val();
                unittpe = App.master.unit_type.findWhere({
                  id: unitModel.get('unitType')
                });
                if (unittpe.get('id') !== 14 && unittpe.get('id') !== 16) {
                  text = unitModel.get('name') + ' | ' + unittpe.get('name');
                } else if (unittpe.get('id') === 14) {
                  text = 'Refuge';
                } else {
                  text = 'Not Released';
                }
                $('#' + temp1[ii] + flatid).text(text);
                $('#' + temp1[ii] + flatid).attr('x', '-30');
              }
              return ii++;
            });
          }
        });
        if (checktrack === 1 && parseInt(unitModel.get('status')) === 9) {
          return $("#" + e.target.id).attr('class', 'unit-hover range aviable');
        } else if (checktrack === 1 && (parseInt(unitModel.get('status')) === 8 || parseInt(unitModel.get('status')) === 47)) {
          return $("#" + e.target.id).attr('class', 'sold range');
        } else {
          return $("#" + e.target.id).attr('class', 'other range');
        }
      },
      'mouseover .unselected-floor': function(e) {
        var buildinArray, building, buildingCollection, buildingModel, checktrack, flatid, floorriserange, id, indexvalue, pos, svgdata, svgposition, temp, temp1, temp2, unitModel, unitvalues;
        $("#flatno").text("");
        $("#towerno").text("");
        $("#unittypename").text("");
        $("#area").text("");
        $("#floorrise").text("");
        $('.room').html("");
        $('#terrace').text("");
        $('#printfacing').text("");
        $('#printview').text("");
        $("#twoDimage").attr('src', "");
        $("#zoomedinimage").attr('src', "");
        $("#floorlayoutbasic").text("");
        $('#printmapplic1').text("");
        $('#towerview').text("");
        buildingCollection = Marionette.getOption(this, 'buildingCollection');
        buildinArray = buildingCollection.toArray();
        building = _.first(buildinArray);
        buildingModel = App.master.building.findWhere({
          id: parseInt(building.get('id'))
        });
        svgdata = buildingModel.get('svgdata');
        floorriserange = buildingModel.get('floorriserange');
        svgposition = "";
        unitvalues = "";
        indexvalue = "";
        temp = ['ff', 'f'];
        temp1 = ['tt', 't'];
        temp2 = ['cc', 'cc'];
        if (parseInt(building.get('id')) === 11) {
          temp = ['f', 'ff'];
          temp1 = ['t', 'tt'];
          temp2 = ['c', 'cc'];
        }
        id = $('#' + e.target.id).attr('data-value');
        flatid = $('#' + e.target.id).attr('data-id');
        unitModel = App.master.unit.findWhere({
          id: parseInt(id)
        });
        pos = unitModel.get('unitAssigned');
        checktrack = this.checkSelection(unitModel);
        $.each(svgdata, function(index, value) {
          var ii;
          if ($.inArray(pos, value.svgposition) >= 0 && value.svgposition !== null) {
            ii = 0;
            return $.each(value.svgposition, function(index1, val1) {
              var currency, text, unittpe;
              if (parseInt(pos) === parseInt(val1)) {
                $('#currency2').autoNumeric('init');
                $('#currency2').autoNumeric('set', unitModel.get('unitPrice'));
                currency = $('#currency2').val();
                unittpe = App.master.unit_type.findWhere({
                  id: unitModel.get('unitType')
                });
                if (unittpe.get('id') !== 14 && unittpe.get('id') !== 16) {
                  text = unitModel.get('name') + ' | ' + unittpe.get('name');
                } else if (unittpe.get('id') === 14) {
                  text = 'Refuge';
                } else {
                  text = 'Not Released';
                }
                $('#' + temp1[ii] + flatid).text(text);
                $('#' + temp1[ii] + flatid).attr('x', '-30');
              }
              return ii++;
            });
          }
        });
        checktrack = this.checkSelection(unitModel);
        if (checktrack === 1 && parseInt(unitModel.get('status')) === 9) {
          return $("#" + e.target.id).attr('class', 'unselected-floor aviable');
        } else if (checktrack === 1 && (parseInt(unitModel.get('status')) === 8 || parseInt(unitModel.get('status')) === 47)) {
          return $("#" + e.target.id).attr('class', 'sold ');
        } else {
          return $("#" + e.target.id).attr('class', 'other ');
        }
      },
      'click #screen-three-button': function(e) {
        $('#screen-four-region').addClass('section');
        return this.trigger('unit:item:selected');
      },
      'click a': function(e) {
        return e.preventDefault();
      },
      'click .grid-link2': function(e) {
        var dataCount, id, index, track;
        count = unitVariantArray.length;
        id = $('#' + e.target.id).attr('data-id');
        dataCount = $('#' + e.target.id).attr('data-count');
        if (parseInt(dataCount) === 0) {
          return false;
        }
        track = 0;
        if ($('#checklink' + id).val() === '1') {
          index = unitVariantArray.indexOf(parseInt(id));
          if (index !== -1) {
            unitVariantArray.splice(index, 1);
            $('#' + e.target.id).removeClass("selected");
            $('#checklink' + id).val('0');
            track = 0;
            unitVariantIdArray.push(parseInt(id));
          }
        } else {
          track = 1;
          unitVariantArray.push(parseInt(id));
          $('#' + e.target.id).addClass("selected");
          $('#checklink' + id).val('1');
        }
        if (globalUnitArrayInt.length !== 0) {
          if (track === 0) {
            unitVariantArray = _.intersection(unitVariantArray, globalUnitArrayInt);
          } else {
            globalUnitArrayInt.push(parseInt(id));
            unitVariantArray = globalUnitArrayInt;
          }
        }
        unitVariantArray = _.uniq(unitVariantArray);
        if (unitVariantArray.length === 0) {
          unitVariantString = firstElement.toString();
        } else {
          if (cloneunitVariantArrayColl.length === unitVariantArray.length) {
            unitVariantString = 'All';
          } else {
            unitVariantString = unitVariantArray.join(',');
          }
        }
        if (unitVariantString === "All") {
          return $('#unselectall').prop('checked', true);
        } else {
          return $('#unselectall').prop('checked', false);
        }
      },
      'click .done': function(e) {
        var params;
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-three");
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        if (unitVariantString === "" || parseInt(cloneunitVariantArrayColl.length) === parseInt(unitVariantArray.length)) {
          unitVariantString = "All";
        }
        App.defaults['unitVariant'] = unitVariantString;
        App.filter(params = {});
        $('.specialFilter1').empty();
        $('.specialFilter1').addClass('hidden');
        $('.b-modal').addClass('hidden');
        return this.trigger('unit:variants:selected');
      },
      'click .cancel': function(e) {
        var globalUnitVariants;
        $('.specialFilter1').empty();
        $('.specialFilter1').addClass('hidden');
        $('.b-modal').addClass('hidden');
        unitVariantArray = _.union(unitVariantArray, unitVariantIdArray);
        $(".variantBox").slideToggle();
        globalUnitVariants = App.defaults['unitVariant'].split(',');
        globalUnitArrayInt = [];
        $.each(globalUnitVariants, function(index, value) {
          return globalUnitArrayInt.push(parseInt(value));
        });
        if (App.defaults['unitVariant'] !== 'All') {
          $.each(unitVariantArray, function(index, value) {
            var key;
            key = _.contains(globalUnitArrayInt, parseInt(value));
            if (key === true) {
              $('#gridlink' + value).addClass('selected');
              return $('#checklink' + value).val('1');
            } else {
              $('#gridlink' + value).removeClass('selected');
              return $('#checklink' + value).val('0');
            }
          });
        } else {
          globalUnitArrayInt = unitVariantArray;
          $.each(unitVariantArray, function(index, value) {
            $('#gridlink' + value).addClass('selected');
            return $('#checklink' + value).val('1');
          });
        }
        return $('#unselectall').prop('checked', true);
      },
      'click #unselectall': function(e) {
        var remainainArray, tempArray, value;
        if ($('#' + e.target.id).prop('checked') === true) {
          $.each(cloneunitVariantArrayColl, function(index, value) {
            $('#gridlink' + value).addClass('selected');
            $('#checklink' + value).val('1');
            return unitVariantArray.push(value);
          });
          unitVariantArray = _.uniq(unitVariantArray);
          cloneunitVariantArrayColl.sort(function(a, b) {
            return a - b;
          });
          return unitVariantString = 'All';
        } else {
          tempArray = [];
          $.each(cloneunitVariantArrayColl, function(index, value) {
            return tempArray.push(parseInt(value));
          });
          value = _.first(tempArray);
          remainainArray = _.rest(tempArray);
          $.each(remainainArray, function(index, value) {
            $('#gridlink' + value).removeClass('selected');
            $('#checklink' + value).val('0');
            index = unitVariantArray.indexOf(parseInt(value));
            if (index !== -1) {
              unitVariantArray.splice(index, 1);
              return unitVariantIdArray.push(parseInt(value));
            }
          });
          return unitVariantString = value.toString();
        }
      }
    };

    ScreenThreeLayout.prototype.onShow = function() {
      var $columns_number, capability, clonefacings, cloneterraces, cloneviews, entrance, entranceArrayText, globalUnitVariants, globalfacing, globalfacingInt, globalterrace, globalterraceInt, globalviewInt, globalviews, mainnewarr, mainunique, mainunitTypeArray1, objectele, originalOfacings, originalOterraces, originalOviews, originalfacings, originalterraces, originalviews, selectedArray, status, teraace, terraceArrayText, testtext, unitVariantArrayColl, unitVariantArrayText, unitVariantsArray, units1, unittypetext, usermodel, view, viewArrayText;
      unitAssigedArray = [];
      objectele = "this";
      viewtagsArray = [];
      entrancetagsArray = [];
      terracetagsArray = [];
      usermodel = new Backbone.Model(USER);
      object = this;
      capability = usermodel.get('all_caps');
      if (usermodel.get('id') !== "0" && $.inArray('see_special_filters', capability) >= 0) {
        $('.special').removeClass('hidden');
        originalviews = Marionette.getOption(this, 'views');
        originalOviews = Marionette.getOption(this, 'Oviews');
        originalfacings = Marionette.getOption(this, 'facings');
        originalOfacings = Marionette.getOption(this, 'Ofacings');
        originalterraces = Marionette.getOption(this, 'terraceID');
        originalOterraces = Marionette.getOption(this, 'terrace');
        globalviews = [];
        globalviewInt = [];
        globalfacing = [];
        globalfacingInt = [];
        globalterrace = [];
        globalterraceInt = [];
        cloneviews = originalviews.slice(0);
        clonefacings = originalfacings.slice(0);
        cloneterraces = originalterraces.slice(0);
        view = [];
        teraace = [];
        entrance = [];
        if (App.defaults['view'] !== 'All') {
          globalviews = App.defaults['view'].split(',');
          $.each(globalviews, function(index, value) {
            return globalviewInt.push(parseInt(value));
          });
        }
        if (App.defaults['facing'] !== 'All') {
          globalfacing = App.defaults['facing'].split(',');
          $.each(globalfacing, function(index, value) {
            return globalfacingInt.push(parseInt(value));
          });
        }
        if (App.defaults['terrace'] !== 'All') {
          globalterrace = App.defaults['terrace'].split(',');
          $.each(globalterrace, function(index, value) {
            return globalterraceInt.push(parseInt(value));
          });
        }
        if (App.defaults['view'] !== 'All') {
          $.each(originalviews, function(index, value) {
            if ($.inArray(parseInt(value), globalviewInt) >= 0) {
              $('#screenview' + value).prop('checked', true);
              return view.push(value);
            } else {
              return $('#screenview' + value).prop('checked', false);
            }
          });
        } else {
          $.each(originalviews, function(index, value) {
            $('#screenview' + value).prop('checked', true);
            return view.push(value);
          });
        }
        if (App.defaults['facing'] !== 'All') {
          $.each(originalfacings, function(index, value) {
            if ($.inArray(parseInt(value), globalfacingInt) >= 0) {
              $('#screenfacing' + value).prop('checked', true);
              return entrance.push(value);
            } else {
              return $('#screenfacing' + value).prop('checked', false);
            }
          });
        } else {
          $.each(originalfacings, function(index, value) {
            $('#screenfacing' + value).prop('checked', true);
            return entrance.push(value);
          });
        }
        if (App.defaults['terrace'] !== 'All') {
          $.each(originalterraces, function(index, value) {
            if ($.inArray(parseInt(value), globalterraceInt) >= 0) {
              $('#screenterrace' + value).prop('checked', true);
              return teraace.push(value);
            } else {
              return $('#screenterrace' + value).prop('checked', false);
            }
          });
        } else {
          $.each(originalterraces, function(index, value) {
            $('#screenterrace' + value).prop('checked', true);
            return teraace.push(value);
          });
        }
        mainnewarr = [];
        mainunique = {};
        mainunitTypeArray1 = [];
        status = App.master.status.findWhere({
          'name': 'Available'
        });
        units1 = App.master.unit.where({
          'status': status.get('id')
        });
        $.each(units1, function(index, value) {
          var unitType;
          unitType = App.master.unit_type.findWhere({
            id: value.get('unitType')
          });
          return mainunitTypeArray1.push({
            id: unitType.get('id'),
            name: unitType.get('name')
          });
        });
        $.each(mainunitTypeArray1, function(key, item) {
          var classname;
          if (!mainunique[item.id]) {
            if (item.id !== 14 && item.id !== 16) {
              status = App.master.status.findWhere({
                'name': 'Available'
              });
              count = App.currentStore.unit.where({
                unitType: item.id,
                'status': status.get('id')
              });
              if (parseInt(item.id) === 9) {
                classname = 'twoBHK';
              } else {
                classname = 'threeBHK';
              }
              mainnewarr.push({
                id: item.id,
                name: item.name,
                classname: classname,
                count: count
              });
              return mainunique[item.id] = item;
            }
          }
        });
        unittypetext = "";
        $.each(mainnewarr, function(index, value) {
          return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
        });
        $('#unittypecount1').html(unittypetext);
        $('#unselectview').on('click', function(e) {
          var firstentrance, firstentrancearr, firstteraace, firstteraacearr, firstview, firstviewarr, rest, restent, restter, uniqfacings, uniqterrace, uniqviews;
          mainnewarr = [];
          mainunique = {};
          if ($('#' + e.target.id).prop('checked') !== true) {
            firstview = _.first(view);
            rest = _.rest(view);
            firstviewarr = [];
            firstviewarr.push(firstview);
            $('#screenview' + firstview).prop('checked', true);
            $.each(rest, function(index, value) {
              return $('#screenview' + value).prop('checked', false);
            });
            view = firstviewarr;
            App.defaults['view'] = view.toString();
            firstentrance = _.first(entrance);
            firstentrancearr = [];
            firstentrancearr.push(firstentrance);
            restent = _.rest(entrance);
            $('#screenfacing' + firstentrance).prop('checked', true);
            $.each(restent, function(index, value) {
              return $('#screenfacing' + value).prop('checked', false);
            });
            entrance = firstentrancearr;
            App.defaults['facing'] = entrance.toString();
            firstteraace = _.first(teraace);
            firstteraacearr = [];
            firstteraacearr.push(firstteraace);
            restter = _.rest(teraace);
            $('#screenterrace' + firstteraace).prop('checked', true);
            $.each(restter, function(index, value) {
              return $('#screenterrace' + value).prop('checked', false);
            });
            teraace = firstteraacearr;
            App.defaults['terrace'] = teraace.toString();
            $('#' + e.target.id).prop('checked', false);
          } else {
            view = cloneviews;
            $.each(view, function(index, value) {
              return $('#screenview' + value).prop('checked', true);
            });
            App.defaults['view'] = view.join(',');
            entrance = clonefacings;
            $.each(entrance, function(index, value) {
              return $('#screenfacing' + value).prop('checked', true);
            });
            App.defaults['facing'] = entrance.join(',');
            teraace = cloneterraces;
            $.each(teraace, function(index, value) {
              return $('#screenterrace' + value).prop('checked', true);
            });
            App.defaults['terrace'] = teraace.join(',');
            uniqfacings = _.uniq(entrance);
            uniqterrace = _.uniq(teraace);
            uniqviews = _.uniq(view);
            if (uniqfacings.length !== originalfacings.length) {
              App.defaults['facing'] = uniqfacings.join(',');
              entrance = uniqfacings;
            } else {
              entrance = uniqfacings;
              App.defaults['facing'] = 'All';
            }
            if (uniqterrace.length !== originalterraces.length) {
              App.defaults['terrace'] = uniqterrace.join(',');
              teraace = uniqterrace;
            } else {
              teraace = uniqterrace;
              App.defaults['terrace'] = 'All';
            }
            if (uniqviews.length !== originalviews.length) {
              App.defaults['view'] = uniqviews.join(',');
              view = uniqviews;
            } else {
              view = uniqviews;
              App.defaults['view'] = 'All';
            }
            $('#' + e.target.id).prop('checked', true);
          }
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter();
          mainunitTypeArray1 = [];
          status = App.master.status.findWhere({
            'name': 'Available'
          });
          units1 = App.master.unit.where({
            'status': status.get('id')
          });
          $.each(units1, function(index, value) {
            var unitType;
            unitType = App.master.unit_type.findWhere({
              id: value.get('unitType')
            });
            return mainunitTypeArray1.push({
              id: unitType.get('id'),
              name: unitType.get('name')
            });
          });
          $.each(mainunitTypeArray1, function(key, item) {
            var classname;
            if (!mainunique[item.id]) {
              if (item.id !== 14 && item.id !== 16) {
                status = App.master.status.findWhere({
                  'name': 'Available'
                });
                count = App.currentStore.unit.where({
                  unitType: item.id,
                  'status': status.get('id')
                });
                if (parseInt(item.id) === 9) {
                  classname = 'twoBHK';
                } else {
                  classname = 'threeBHK';
                }
                mainnewarr.push({
                  id: item.id,
                  name: item.name,
                  classname: classname,
                  count: count
                });
                return mainunique[item.id] = item;
              }
            }
          });
          unittypetext = "";
          $.each(mainnewarr, function(index, value) {
            return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
          });
          return $('#unittypecount1').html(unittypetext);
        });
        $('.viewname').on('click', function(e) {
          var facingtemp, floorCollection, index, teracetemp, uniqfacings, uniqterrace, unselected, unselected1, viewString, viewnames;
          mainnewarr = [];
          mainunique = {};
          viewnames = originalviews;
          viewString = 'All';
          if ($('#' + e.target.id).prop('checked') === true) {
            view.push($('#' + e.target.id).val());
          } else {
            if (parseInt(view.length) === 1) {
              object.showMsg();
              return false;
            }
            $('#' + e.target.id).prop('checked', false);
            index = _.indexOf(view, parseInt($('#' + e.target.id).val()));
            if (index !== -1) {
              view.splice(index, 1);
            }
          }
          view = view.map(function(item) {
            return parseInt(item);
          });
          view = _.uniq(view);
          if (view.length !== 0) {
            viewString = view.join(',');
          }
          App.defaults['view'] = viewString;
          if (originalviews.length === view.length) {
            $('#unselectview').prop('checked', true);
            App.defaults['view'] = 'All';
          } else {
            $('#unselectview').prop('checked', false);
          }
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter();
          teracetemp = [];
          floorCollection = App.currentStore.unit;
          facingtemp = [];
          floorCollection.each(function(item) {
            if (item.get('facing').length !== 0) {
              $.merge(facingtemp, item.get('facing'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return teracetemp.push(item.get('terrace'));
            }
          });
          facingtemp = facingtemp.map(function(item) {
            return parseInt(item);
          });
          teracetemp = teracetemp.map(function(item) {
            return parseInt(item);
          });
          uniqfacings = _.uniq(facingtemp);
          uniqterrace = _.uniq(teracetemp);
          $.each(uniqfacings, function(index, value) {
            return $('#screenfacing' + value).prop('checked', true);
          });
          if (uniqfacings.length !== originalfacings.length) {
            App.defaults['facing'] = uniqfacings.join(',');
            entrance = uniqfacings;
          } else {
            entrance = uniqfacings;
            App.defaults['facing'] = 'All';
          }
          if (uniqterrace.length !== originalterraces.length) {
            App.defaults['terrace'] = uniqterrace.join(',');
            teraace = uniqterrace;
          } else {
            teraace = uniqterrace;
            App.defaults['terrace'] = 'All';
          }
          unselected = _.difference(clonefacings, uniqfacings);
          $.each(unselected, function(index, value) {
            return $('#screenfacing' + value).prop('checked', false);
          });
          $.each(uniqterrace, function(index, value) {
            return $('#screenterrace' + value).prop('checked', true);
          });
          unselected1 = _.difference(cloneterraces, uniqterrace);
          $.each(unselected1, function(index, value) {
            return $('#screenterrace' + value).prop('checked', false);
          });
          if (App.defaults['view'] === 'All' && App.defaults['facing'] === 'All' && App.defaults['terrace'] === 'All') {
            $('#unselectview').prop('checked', true);
          } else {
            $('#unselectview').prop('checked', false);
          }
          mainunitTypeArray1 = [];
          status = App.master.status.findWhere({
            'name': 'Available'
          });
          units1 = App.master.unit.where({
            'status': status.get('id')
          });
          $.each(units1, function(index, value) {
            var unitType;
            unitType = App.master.unit_type.findWhere({
              id: value.get('unitType')
            });
            return mainunitTypeArray1.push({
              id: unitType.get('id'),
              name: unitType.get('name')
            });
          });
          $.each(mainunitTypeArray1, function(key, item) {
            var classname;
            if (!mainunique[item.id]) {
              if (item.id !== 14 && item.id !== 16) {
                status = App.master.status.findWhere({
                  'name': 'Available'
                });
                count = floorCollection.where({
                  unitType: item.id,
                  'status': status.get('id')
                });
                if (parseInt(item.id) === 9) {
                  classname = 'twoBHK';
                } else {
                  classname = 'threeBHK';
                }
                mainnewarr.push({
                  id: item.id,
                  name: item.name,
                  classname: classname,
                  count: count
                });
                return mainunique[item.id] = item;
              }
            }
          });
          unittypetext = "";
          $.each(mainnewarr, function(index, value) {
            return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
          });
          return $('#unittypecount1').html(unittypetext);
        });
        $('.terrace').on('click', function(e) {
          var facingtemp, first, index, uniqfacings, uniqviews, units, unselected, unselected1, viewtemp;
          mainnewarr = [];
          mainunique = {};
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          if ($('#' + e.target.id).prop('checked') === true) {
            teraace.push($('#' + e.target.id).val());
          } else {
            if (parseInt(teraace.length) === 1) {
              object.showMsg();
              return false;
            }
            index = _.indexOf(teraace, parseInt($('#' + e.target.id).val()));
            if (index !== -1) {
              teraace.splice(index, 1);
            }
          }
          if (teraace.length === 0) {
            first = _.first(originalOterraces);
            teraace.push(first.id);
          }
          teraace = teraace.map(function(item) {
            return parseInt(item);
          });
          teraace = _.uniq(teraace);
          App.defaults['terrace'] = teraace.join(',');
          if (originalterraces.length === teraace.length) {
            $('#unselectview').prop('checked', true);
            App.defaults['terrace'] = 'All';
          } else {
            $('#unselectview').prop('checked', false);
          }
          App.filter();
          units = App.currentStore.unit;
          viewtemp = [];
          facingtemp = [];
          units.each(function(item) {
            if (item.get('apartment_views') !== "") {
              $.merge(viewtemp, item.get('apartment_views'));
            }
            if (item.get('facing').length !== 0) {
              return $.merge(facingtemp, item.get('facing'));
            }
          });
          viewtemp = viewtemp.map(function(item) {
            return parseInt(item);
          });
          facingtemp = facingtemp.map(function(item) {
            return parseInt(item);
          });
          uniqviews = _.uniq(viewtemp);
          uniqfacings = _.uniq(facingtemp);
          if (uniqviews.length !== originalviews.length) {
            App.defaults['view'] = uniqviews.join(',');
            view = uniqviews;
          } else {
            view = uniqviews;
            App.defaults['view'] = 'All';
          }
          if (uniqfacings.length !== originalfacings.length) {
            App.defaults['facing'] = uniqfacings.join(',');
            entrance = uniqfacings;
          } else {
            entrance = uniqfacings;
            App.defaults['facing'] = 'All';
          }
          $.each(uniqviews, function(index, value) {
            return $('#screenview' + value).prop('checked', true);
          });
          unselected1 = _.difference(cloneviews, uniqviews);
          $.each(unselected1, function(index, value) {
            return $('#screenview' + value).prop('checked', false);
          });
          $.each(uniqfacings, function(index, value) {
            return $('#screenfacing' + value).prop('checked', true);
          });
          unselected = _.difference(clonefacings, uniqfacings);
          $.each(unselected, function(index, value) {
            return $('#screenfacing' + value).prop('checked', false);
          });
          if (App.defaults['view'] === 'All' && App.defaults['facing'] === 'All' && App.defaults['terrace'] === 'All') {
            $('#unselectview').prop('checked', true);
          } else {
            $('#unselectview').prop('checked', false);
          }
          mainunitTypeArray1 = [];
          status = App.master.status.findWhere({
            'name': 'Available'
          });
          units1 = App.master.unit.where({
            'status': status.get('id')
          });
          $.each(units1, function(index, value) {
            var unitType;
            unitType = App.master.unit_type.findWhere({
              id: value.get('unitType')
            });
            return mainunitTypeArray1.push({
              id: unitType.get('id'),
              name: unitType.get('name')
            });
          });
          $.each(mainunitTypeArray1, function(key, item) {
            var classname;
            if (!mainunique[item.id]) {
              if (item.id !== 14 && item.id !== 16) {
                status = App.master.status.findWhere({
                  'name': 'Available'
                });
                count = units.where({
                  unitType: item.id,
                  'status': status.get('id')
                });
                if (parseInt(item.id) === 9) {
                  classname = 'twoBHK';
                } else {
                  classname = 'threeBHK';
                }
                mainnewarr.push({
                  id: item.id,
                  name: item.name,
                  classname: classname,
                  count: count
                });
                return mainunique[item.id] = item;
              }
            }
          });
          unittypetext = "";
          $.each(mainnewarr, function(index, value) {
            return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
          });
          return $('#unittypecount1').html(unittypetext);
        });
        $('.facing').on('click', function(e) {
          var facingString, floorCollection, index, teracetemp, uniqterrace, uniqviews, unselected, unselected1, viewtemp;
          mainnewarr = [];
          mainunique = {};
          if ($('#' + e.target.id).prop('checked') === true) {
            entrance.push($('#' + e.target.id).val());
          } else {
            if (parseInt(entrance.length) === 1) {
              object.showMsg();
              return false;
            }
            index = _.indexOf(entrance, parseInt($('#' + e.target.id).val()));
            if (index !== -1) {
              entrance.splice(index, 1);
            }
          }
          entrance = entrance.map(function(item) {
            return parseInt(item);
          });
          entrance = _.uniq(entrance);
          if (entrance.length !== 0) {
            facingString = entrance.join(',');
          }
          App.defaults['facing'] = facingString;
          if (originalfacings.length === entrance.length) {
            $('#unselectview').prop('checked', true);
            App.defaults['facing'] = 'All';
          } else {
            $('#unselectview').prop('checked', false);
          }
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter();
          teracetemp = [];
          floorCollection = App.currentStore.unit;
          viewtemp = [];
          floorCollection.each(function(item) {
            if (item.get('apartment_views').length !== 0) {
              $.merge(viewtemp, item.get('apartment_views'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return teracetemp.push(item.get('terrace'));
            }
          });
          viewtemp = viewtemp.map(function(item) {
            return parseInt(item);
          });
          teracetemp = teracetemp.map(function(item) {
            return parseInt(item);
          });
          uniqviews = _.uniq(viewtemp);
          uniqterrace = _.uniq(teracetemp);
          if (uniqviews.length !== originalviews.length) {
            App.defaults['view'] = uniqviews.join(',');
            view = uniqviews;
          } else {
            view = uniqviews;
            App.defaults['view'] = 'All';
          }
          if (uniqterrace.length !== originalterraces.length) {
            App.defaults['terrace'] = uniqterrace.join(',');
            teraace = uniqterrace;
          } else {
            teraace = uniqterrace;
            App.defaults['terrace'] = 'All';
          }
          $.each(uniqviews, function(index, value) {
            return $('#screenview' + value).prop('checked', true);
          });
          unselected = _.difference(cloneviews, uniqviews);
          $.each(unselected, function(index, value) {
            return $('#screenview' + value).prop('checked', false);
          });
          $.each(uniqterrace, function(index, value) {
            return $('#screenterrace' + value).prop('checked', true);
          });
          unselected1 = _.difference(cloneterraces, uniqterrace);
          $.each(unselected1, function(index, value) {
            return $('#screenterrace' + value).prop('checked', false);
          });
          if (App.defaults['view'] === 'All' && App.defaults['facing'] === 'All' && App.defaults['terrace'] === 'All') {
            $('#unselectview').prop('checked', true);
          } else {
            $('#unselectview').prop('checked', false);
          }
          mainunitTypeArray1 = [];
          status = App.master.status.findWhere({
            'name': 'Available'
          });
          units1 = App.master.unit.where({
            'status': status.get('id')
          });
          $.each(units1, function(index, value) {
            var unitType;
            unitType = App.master.unit_type.findWhere({
              id: value.get('unitType')
            });
            return mainunitTypeArray1.push({
              id: unitType.get('id'),
              name: unitType.get('name')
            });
          });
          $.each(mainunitTypeArray1, function(key, item) {
            var classname;
            if (!mainunique[item.id]) {
              if (item.id !== 14 && item.id !== 16) {
                status = App.master.status.findWhere({
                  'name': 'Available'
                });
                count = floorCollection.where({
                  unitType: item.id,
                  'status': status.get('id')
                });
                if (parseInt(item.id) === 9) {
                  classname = 'twoBHK';
                } else {
                  classname = 'threeBHK';
                }
                mainnewarr.push({
                  id: item.id,
                  name: item.name,
                  classname: classname,
                  count: count
                });
                return mainunique[item.id] = item;
              }
            }
          });
          unittypetext = "";
          $.each(mainnewarr, function(index, value) {
            return unittypetext += '<span>' + value.name + ' :</span><span class="text-primary bold m-r-20">' + value.count.length + '</span>';
          });
          return $('#unittypecount1').html(unittypetext);
        });
        objectele = this;
        $('#donepopupscreen').on('click', function(e) {
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-four-region').removeClass('section');
          App.navigate("screen-three");
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter();
          $('.specialFilter1').empty();
          $('.specialFilter1').addClass('hidden');
          $('.b-modal').addClass('hidden');
          return objectele.trigger('unit:variants:selected');
        });
        $('#cancelpopupscreen').on('click', function(e) {
          var facingtemp1, floorCollectionCur, terracetemp1, viewtemp1;
          $('.specialFilter1').empty();
          $('.specialFilter1').addClass('hidden');
          $('.b-modal').addClass('hidden');
          view = [];
          entrance = [];
          teraace = [];
          App.filter();
          floorCollectionCur = App.currentStore.unit;
          viewtemp1 = [];
          facingtemp1 = [];
          terracetemp1 = [];
          floorCollectionCur.each(function(item) {
            if (item.get('unitType') !== 14 && item.get('unitType') !== 16) {
              if (item.get('apartment_views') !== "") {
                $.merge(viewtemp1, item.get('apartment_views'));
              }
              if (item.get('facing').length !== 0) {
                $.merge(facingtemp1, item.get('facing'));
              }
              if (item.get('terrace') !== "") {
                return terracetemp1.push(item.get('terrace'));
              }
            }
          });
          viewtemp1 = viewtemp1.map(function(item) {
            return parseInt(item);
          });
          viewtemp1 = _.uniq(viewtemp1);
          facingtemp1 = facingtemp1.map(function(item) {
            return parseInt(item);
          });
          facingtemp1 = _.uniq(facingtemp1);
          terracetemp1 = terracetemp1.map(function(item) {
            return parseInt(item);
          });
          terracetemp1 = _.uniq(terracetemp1);
          $.each(viewtemp1, function(index, value) {
            $('#view' + value).prop('checked', true);
            return view.push(value);
          });
          $.each(facingtemp1, function(index, value) {
            $('#facings' + value).prop('checked', true);
            return entrance.push(value);
          });
          $.each(terracetemp1, function(index, value) {
            $('#terrace' + value).prop('checked', true);
            return teraace.push(value);
          });
          console.log(originalOviews.length);
          console.log(viewtemp1.length);
          if (viewtemp1.length !== originalviews.length) {
            App.defaults['view'] = viewtemp1.join(',');
          } else {
            App.defaults['view'] = 'All';
          }
          if (terracetemp1.length !== originalterraces.length) {
            App.defaults['terrace'] = terracetemp1.join(',');
          } else {
            App.defaults['terrace'] = 'All';
          }
          if (facingtemp1.length !== originalfacings.length) {
            App.defaults['facing'] = facingtemp1.join(',');
          } else {
            App.defaults['facing'] = 'All';
          }
          App.layout.screenFourRegion.el.innerHTML = "";
          $('#screen-four-region').removeClass('section');
          App.navigate("screen-three");
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          App.filter();
          return objectele.trigger('unit:variants:selected');
        });
      }
      unitVariantString = "";
      $('#screen-three-button').on('click', function() {
        return new jBox('Notice', {
          content: 'Loading your apartment...',
          autoClose: 2000,
          addClass: 'notifyBox',
          position: {
            x: 'center',
            y: 'top'
          },
          animation: {
            open: 'slide:top',
            close: 'slide:top'
          }
        });
      });
      $('#mainsvg').text("");
      rangeunitArray = [];
      globalUnitArrayInt = [];
      this.loadbuildingsvg();
      $('#sliderplans').liquidSlider({
        slideEaseFunction: "fade",
        autoSlide: true,
        includeTitle: false,
        fadeOutDuration: 1000,
        minHeight: 500,
        forceAutoSlide: true,
        autoSlideInterval: 5000,
        dynamicArrows: false,
        fadeInDuration: 1000
      });
      if (App.screenOneFilter['key'] === 'unitType') {
        $('.unittype').removeClass('hidden');
      } else if (App.screenOneFilter['key'] === 'budget') {
        $('.budget').removeClass('hidden');
      } else if (App.defaults['floor'] === 'All') {
        $('.refresh').removeClass('hidden');
      } else {
        $('.All').removeClass('hidden');
      }
      $columns_number = $('.unitTable .cd-table-container').find('.cd-block').length;
      $('.cd-table-container').on('scroll', function() {
        var $this, table_viewport, total_table_width;
        $this = $(this);
        total_table_width = parseInt($('.cd-table-wrapper').css('width').replace('px', ''));
        table_viewport = parseInt($('.unitTable').css('width').replace('px', ''));
        if ($this.scrollLeft() >= total_table_width - table_viewport - $columns_number) {
          $('.unitTable').addClass('table-end');
          return $('.cd-scroll-right').hide();
        } else {
          $('.unitTable').removeClass('table-end');
          return $('.cd-scroll-right').show();
        }
      });
      $('.cd-scroll-right').on('click', function() {
        var $this, column_width, new_left_scroll;
        $this = $(this);
        column_width = $(this).siblings('.cd-table-container').find('.cd-block').eq(0).css('width').replace('px', '');
        new_left_scroll = parseInt($('.cd-table-container').scrollLeft()) + parseInt(column_width);
        return $('.cd-table-container').animate({
          scrollLeft: new_left_scroll
        }, 200);
      });
      $(".variantToggle").click(function() {
        $(this).toggleClass("open");
        $(".variantBox").slideToggle();
      });
      $(".variantClose").click(function() {
        $(".variantBox").slideToggle();
        $(".variantToggle").toggleClass("open");
      });
      unitVariantArray = Marionette.getOption(this, 'uintVariantId');
      unitVariantsArray = Marionette.getOption(this, 'unitVariants');
      unitVariantArrayColl = new Backbone.Collection(unitVariantsArray);
      cloneunitVariantArrayColl = unitVariantArray.slice(0);
      unitVariants = unitVariantArray;
      firstElement = _.first(unitVariantArray);
      globalUnitVariants = App.defaults['unitVariant'].split(',');
      if (App.defaults['unitVariant'] !== 'All') {
        globalUnitVariants = App.defaults['unitVariant'].split(',');
        $.each(globalUnitVariants, function(index, value) {
          return globalUnitArrayInt.push(parseInt(value));
        });
      }
      selectedArray = [];
      if (App.defaults['unitVariant'] !== 'All') {
        unitVariantArray = _.union(unitVariantArray, unitVariantIdArray);
        $.each(unitVariantArray, function(index, value) {
          var key;
          key = _.contains(globalUnitArrayInt, parseInt(value));
          if (key === true) {
            $('#gridlink' + value).addClass('selected');
            $('#checklink' + value).val('1');
            return selectedArray.push(value);
          } else {
            index = unitVariantArray.indexOf(parseInt(value));
            $('#gridlink' + value).removeClass('selected');
            return $('#checklink' + value).val('0');
          }
        });
      } else {
        unitVariantArray = unitVariantArray;
        $.each(unitVariantArray, function(index, value) {
          $('#gridlink' + value).addClass('selected');
          $('#checklink' + value).val('1');
          return selectedArray.push(value);
        });
      }
      unitVariantString = "";
      if (unitVariantString === "All" || App.defaults['unitVariant'] === "All" || selectedArray.length === unitVariantArray.length) {
        $('#unselectall').prop('checked', true);
      } else {
        $('#unselectall').prop('checked', false);
      }
      $('html, body').delay(600).animate({
        scrollTop: $('#screen-three-region').offset().top
      }, 'slow');
      tagsArray = [];
      testtext = App.defaults['unitVariant'];
      if (parseInt(selectedArray.length) !== parseInt(unitVariantArray.length)) {
        unitVariantArrayText = selectedArray;
        $.each(unitVariantArrayText, function(index, value) {
          var unitVariantModel;
          unitVariantModel = App.master.unit_variant.findWhere({
            id: parseInt(value)
          });
          return tagsArray.push({
            id: value,
            area: unitVariantModel.get('sellablearea') + 'Sq.ft.'
          });
        });
      } else {
        unitVariantArrayText = testtext.split(',');
        tagsArray.push({
          id: 'All',
          area: 'All'
        });
      }
      this.doListing();
      usermodel = new Backbone.Model(USER);
      capability = usermodel.get('all_caps');
      if (usermodel.get('id') !== "0" && $.inArray('see_special_filters', capability) >= 0) {
        viewtagsArray = [];
        testtext = App.defaults['view'];
        if (testtext !== 'All') {
          viewArrayText = testtext.split(',');
          $.each(viewArrayText, function(index, value) {
            var viewModel;
            viewModel = App.master.view.findWhere({
              id: parseInt(value)
            });
            return viewtagsArray.push({
              id: value,
              name: viewModel.get('name')
            });
          });
        } else {
          viewtagsArray.push({
            id: 'All',
            name: 'All'
          });
        }
        this.doViewListing();
        entrancetagsArray = [];
        testtext = App.defaults['facing'];
        if (testtext !== 'All') {
          entranceArrayText = testtext.split(',');
          $.each(entranceArrayText, function(index, value) {
            var facingModel;
            facingModel = App.master.facings.findWhere({
              id: parseInt(value)
            });
            return entrancetagsArray.push({
              id: value,
              name: facingModel.get('name')
            });
          });
        } else {
          entrancetagsArray.push({
            id: 'All',
            name: 'All'
          });
        }
        this.doentranceListing();
        terracetagsArray = [];
        testtext = App.defaults['terrace'];
        if (testtext !== 'All') {
          terraceArrayText = testtext.split(',');
          $.each(terraceArrayText, function(index, value) {
            var terraceModel;
            terraceModel = App.master.terrace.findWhere({
              id: parseInt(value)
            });
            return terracetagsArray.push({
              id: value,
              name: terraceModel.get('name')
            });
          });
        } else {
          terracetagsArray.push({
            id: 'All',
            name: 'All'
          });
        }
        this.doterraceListing();
      }
      object1 = this;
      object2 = this;
      object3 = this;
      return object4 = this;
    };

    $(document).on("click", ".closeButton1", function() {
      var theidtodel;
      theidtodel = $(this).parent('li').attr('id');
      return object1.delItem($('#' + theidtodel).attr('data-itemNum'));
    });

    $(document).on("click", ".closeButton5", function() {
      var theidtodel;
      theidtodel = $(this).parent('li').attr('id');
      return object2.delViewItem($('#' + theidtodel).attr('data-itemNum'));
    });

    $(document).on("click", ".closeButton6", function() {
      var theidtodel;
      theidtodel = $(this).parent('li').attr('id');
      return object3.delEntranceItem($('#' + theidtodel).attr('data-itemNum'));
    });

    $(document).on("click", ".closeButton7", function() {
      var theidtodel;
      theidtodel = $(this).parent('li').attr('id');
      return object4.delTerraceItem($('#' + theidtodel).attr('data-itemNum'));
    });

    ScreenThreeLayout.prototype.showMsg = function() {
      $('#filtermsg1').show();
      return $('#filtermsg1').text(' Atleast one option in each category must be selected to proceed').delay(2000).fadeOut(function(x) {
        return $('filtermsg').text("");
      });
    };

    ScreenThreeLayout.prototype.showLayoutMsg = function() {
      $('#layoutmsg').show();
      return $('#layoutmsg').text('There are no flats available in this position').delay(2000).fadeOut(function(x) {
        return $('layoutmsg').text("");
      });
    };

    ScreenThreeLayout.prototype.loadbuildingsvg = function() {
      var buildinArray, building, buildingCollection, buildingModel, floor_layout_Basic, floorid, maxvalue, path, svgdata, trackposition;
      buildingCollection = Marionette.getOption(this, 'buildingCollection');
      buildinArray = buildingCollection.toArray();
      building = _.first(buildinArray);
      buildingModel = App.master.building.findWhere({
        id: parseInt(building.get('id'))
      });
      svgdata = buildingModel.get('svgdata');
      trackposition = Marionette.getOption(this, 'position');
      floor_layout_Basic = buildingModel.get('floor_layout_basic').image_url;
      maxvalue = Marionette.getOption(this, 'maxvalue');
      if (floor_layout_Basic !== "") {
        path = floor_layout_Basic;
        $('<div></div>').load(path, function(x) {
          $('#' + maxvalue.id).attr('class', 'floor-pos position');
          unitAssigedArray.push(maxvalue.id);
          return $.each(trackposition, function(ind, val) {
            $('#' + val).attr('class', 'other');
            return $("#" + val).parent().removeAttr('data-target');
          });
        }).appendTo("#floorsvg");
      } else {
        path = "";
      }
      floorid = maxvalue.id;
      return this.loadsvg(floorid);
    };

    ScreenThreeLayout.prototype.loadsvg = function(floorid) {
      var buildinArray, building, buildingCollection, buildingModel, floorange, highrange, indexvalue, lowrange, mediumrange, svgdata, svgposition, temp, temp1, temp2, unitvalues;
      buildingCollection = Marionette.getOption(this, 'buildingCollection');
      buildinArray = buildingCollection.toArray();
      building = _.first(buildinArray);
      buildingModel = App.master.building.findWhere({
        id: parseInt(building.get('id'))
      });
      floorange = buildingModel.get('floorriserange');
      lowrange = floorange[0];
      mediumrange = floorange[1];
      highrange = floorange[2];
      svgdata = buildingModel.get('svgdata');
      if (floorid === void 0) {
        floorid = 1;
      }
      svgposition = "";
      unitvalues = "";
      indexvalue = "";
      $('#positionsvg').text("");
      temp = ['ff', 'f'];
      temp1 = ['tt', 't'];
      temp2 = ['cc', 'cc'];
      if (parseInt(building.get('id')) === 11) {
        temp = ['f', 'ff'];
        temp1 = ['t', 'tt'];
        temp2 = ['c', 'cc'];
      }
      $.each(svgdata, function(index, value) {
        var ii, unitsarray;
        if ($.inArray(floorid, value.svgposition) >= 0 && value.svgposition !== null) {
          ii = 0;
          if (value.svgfile !== "") {
            svgposition = value.svgfile;
            unitsarray = value.units;
            return $('#positionsvg').load(svgposition, function(x) {
              value.svgposition.sort(function(a, b) {
                return b - a;
              });
              return $.each(value.svgposition, function(index1, val1) {
                var i, rangClass;
                indexvalue = unitsarray[val1];
                $.map(indexvalue, function(index, value) {
                  $('#' + temp[ii] + value).attr('class', 'unselected-floor');
                  $('#' + temp[ii] + value).attr('data-value', index);
                  return $('#' + temp[ii] + value).attr('data-idvalue', temp[ii]);
                });
                $.map(indexvalue, function(index1, value1) {
                  var floorArr;
                  if (App.defaults['floor'] !== "All") {
                    floorArr = App.defaults['floor'].split(',');
                    if (floorid === val1) {
                      return $.each(floorArr, function(ind, val) {
                        if (parseInt(value1) === parseInt(val)) {
                          $('#' + temp[ii] + value1).attr('class', 'unit-hover range');
                          return $('#' + temp1[ii] + value1).attr('class', 'unit-hover range');
                        }
                      });
                    }
                  } else {
                    $('#' + temp[ii] + value1).attr('class', 'unit-hover range');
                    return $('#' + temp1[ii] + value1).attr('class', 'unit-hover range');
                  }
                });
                rangClass = ['LOWRISE', 'MIDRISE', 'HIGHRISE'];
                i = 0;
                $.each(floorange, function(index, value) {
                  var end, start;
                  start = parseInt(value.start);
                  end = parseInt(value.end);
                  while (parseInt(start) <= parseInt(end)) {
                    $('#' + temp2[ii] + start).attr('class', rangClass[i]);
                    $('#' + temp2[ii] + start).text(rangClass[i]);
                    start++;
                  }
                  return i++;
                });
                return ii++;
              });
            });
          }
        }
      });
      return position = floorid;
    };

    ScreenThreeLayout.prototype.checkSelection = function(model) {
      var flag, myArray, track;
      myArray = [];
      $.map(App.defaults, function(value, index) {
        if (value !== 'All' && index !== 'floor') {
          return myArray.push({
            key: index,
            value: value
          });
        }
      });
      flag = 0;
      object = this;
      track = 0;
      $.each(myArray, function(index, value) {
        var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
        paramKey = {};
        if (value.key === 'budget') {
          buildingModel = App.master.building.findWhere({
            'id': model.get('building')
          });
          floorRise = buildingModel.get('floorrise');
          floorRiseValue = floorRise[model.get('floor')];
          unitVariantmodel = App.master.unit_variant.findWhere({
            'id': model.get('unitVariant')
          });
          unitPrice = model.get('unitPrice');
          budget_arr = value.value.split(' ');
          budget_price = budget_arr[0].split('-');
          budget_price[0] = budget_price[0] + '00000';
          budget_price[1] = budget_price[1] + '00000';
          if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
            return flag++;
          }
        } else if (value.key !== 'floor') {
          tempnew = [];
          if (value.key === 'view' || value.key === 'apartment_views') {
            tempnew = [];
            value.key = 'apartment_views';
            tempnew = model.get(value.key);
            if (tempnew !== "") {
              tempnew = tempnew.map(function(item) {
                return parseInt(item);
              });
            }
          } else if (value.key === 'facing') {
            tempnew = [];
            tempnew = model.get(value.key);
            if (tempnew.length !== 0) {
              tempnew = tempnew.map(function(item) {
                return parseInt(item);
              });
            }
          }
          temp = [];
          temp.push(value.value);
          tempstring = temp.join(',');
          initvariant = tempstring.split(',').map(function(item) {
            return parseInt(item);
          });
          if (initvariant.length >= 1) {
            _results = [];
            for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
              element = initvariant[_i];
              if (model.get(value.key) === parseInt(element)) {
                _results.push(flag++);
              } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                _results.push(flag++);
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } else {
            if (model.get(value.key) === parseInt(value.value)) {
              return flag++;
            }
          }
        }
      });
      if (flag >= myArray.length) {
        track = 1;
      }
      if (myArray.length === 0) {
        track = 1;
      }
      return track;
    };

    ScreenThreeLayout.prototype.onShowRangeData = function(unitModel, collection) {
      var buildinArray, building, buildingCollection, buildingModel, element, exceptionObject, floorLayoutimage, index, pos, trackposition, unitcoll, _i, _j, _len, _len1;
      $('#floorsvg').text("");
      position = unitModel.get('unitAssigned');
      object = this;
      unitcoll = collection.toArray();
      $.each(unitcoll, function(index, value) {
        var units;
        units = value.get('units');
        return units.each(function(item) {
          return object.checkClassSelection(item);
        });
      });
      buildingCollection = Marionette.getOption(this, 'buildingCollection');
      trackposition = Marionette.getOption(this, 'position');
      buildinArray = buildingCollection.toArray();
      building = _.first(buildinArray);
      buildingModel = App.master.building.findWhere({
        id: parseInt(building.get('id'))
      });
      exceptionObject = buildingModel.get('floorexceptionpositions');
      floorLayoutimage = "";
      $.each(exceptionObject, function(index, value1) {
        var floorvalue;
        floorvalue = $.inArray(unitModel.get('floor'), value1.floors);
        if (floorvalue === -1) {
          return floorLayoutimage = building.get('floor_layout_basic').image_url;
        } else {
          if (value1.floor_layout_basic.image_url === "") {
            return floorLayoutimage = building.get('floor_layout_basic').image_url;
          } else {
            return floorLayoutimage = value1.floor_layout_basic.image_url;
          }
        }
      });
      if (exceptionObject.legth === 0) {
        floorLayoutimage = building.get('floor_layout_basic').image_url;
      }
      pos = unitModel.get('unitAssigned');
      $('<div></div>').load(floorLayoutimage, function(x) {
        $('#' + pos).attr('class', 'floor-pos position');
        unitAssigedArray.push(pos);
        return $.each(trackposition, function(ind, val) {
          $('#' + val).attr('class', 'other');
          return $("#" + val).parent().removeAttr('data-target');
        });
      }).appendTo("#floorsvg");
      for (index = _i = 0, _len = unitAssigedArray.length; _i < _len; index = ++_i) {
        element = unitAssigedArray[index];
        if (element === parseInt(unitModel.get('unitAssigned'))) {
          $('#' + element).attr('class', 'floor-pos position');
        } else {
          $('#' + element).attr('class', 'floor-pos ');
        }
      }
      unitAssigedArray.push(unitModel.get('unitAssigned'));
      $('#' + unitModel.get('unitAssigned')).attr('class', 'position');
      sudoSlider.goToSlide(unitModel.get('unitAssigned'));
      for (index = _j = 0, _len1 = rangeunitArray.length; _j < _len1; index = ++_j) {
        element = rangeunitArray[index];
        if (element === parseInt(unitModel.get('id'))) {
          $("#select" + unitModel.get('id')).val('1');
        } else {
          $("#select" + element).val('0');
          $('#check' + element).removeClass('selected');
          rangeunitArray = [];
        }
      }
      rangeunitArray.push(parseInt(unitModel.get('id')));
      $('#check' + unitModel.get('id')).addClass("selected");
      $("#select" + unitModel.get('id')).val("1");
      $("#screen-three-button").removeClass('disabled btn-default');
      return $("#screen-three-button").addClass('btn-primary');
    };

    ScreenThreeLayout.prototype.checkClassSelection = function(model) {
      var flag, myArray, track;
      myArray = [];
      $.map(App.defaults, function(value, index) {
        if (value !== 'All' && index !== 'floor') {
          return myArray.push({
            key: index,
            value: value
          });
        }
      });
      flag = 0;
      object = this;
      track = 0;
      $.each(myArray, function(index, value) {
        var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
        paramKey = {};
        if (value.key === 'budget') {
          buildingModel = App.master.building.findWhere({
            'id': model.get('building')
          });
          floorRise = buildingModel.get('floorrise');
          floorRiseValue = floorRise[model.get('floor')];
          unitVariantmodel = App.master.unit_variant.findWhere({
            'id': model.get('unitVariant')
          });
          unitPrice = model.get('unitPrice');
          budget_arr = value.value.split(' ');
          budget_price = budget_arr[0].split('-');
          budget_price[0] = budget_price[0] + '00000';
          budget_price[1] = budget_price[1] + '00000';
          if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
            return flag++;
          }
        } else if (value.key !== 'floor') {
          tempnew = [];
          if (value.key === 'view' || value.key === 'apartment_views') {
            tempnew = [];
            value.key = 'apartment_views';
            tempnew = model.get(value.key);
            if (tempnew !== "") {
              tempnew = tempnew.map(function(item) {
                return parseInt(item);
              });
            }
          } else if (value.key === 'facing') {
            tempnew = [];
            tempnew = model.get(value.key);
            if (tempnew.length !== 0) {
              tempnew = tempnew.map(function(item) {
                return parseInt(item);
              });
            }
          }
          temp = [];
          temp.push(value.value);
          tempstring = temp.join(',');
          initvariant = tempstring.split(',').map(function(item) {
            return parseInt(item);
          });
          if (initvariant.length >= 1) {
            _results = [];
            for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
              element = initvariant[_i];
              if (model.get(value.key) === parseInt(element)) {
                _results.push(flag++);
              } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                _results.push(flag++);
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } else {
            if (model.get(value.key) === parseInt(value.value)) {
              return flag++;
            }
          }
        }
      });
      if (flag >= myArray.length) {
        track = 1;
      }
      if (myArray.length === 0) {
        track = 1;
      }
      if (track === 1 && model.get('status') === 9 && model.get('unitType') !== 14 && model.get('unitType') !== 16) {
        $('#check' + model.get("id")).addClass('boxLong filtered');
        return $('#flag' + model.get("id")).val('1');
      } else if (track === 1 && model.get('status') === 8 && model.get('unitType') !== 14 && model.get('unitType') !== 16) {
        return $('#check' + model.get("id")).addClass('boxLong sold');
      } else {
        $('#check' + model.get("id")).addClass('boxLong other');
        return $('#check' + model.get("id")).text(model.get('unitTypeName'));
      }
    };

    ScreenThreeLayout.prototype.doListing = function() {
      $('#tagslist1 ul li').remove();
      $.each(tagsArray, function(index, value) {
        return $('#tagslist1 ul').append('<li id="uli-item-' + value.id + '" data-itemNum="' + value.id + '"><span class="itemText">' + value.area + '</span><div class="closeButton1"></div></li>');
      });
      if (tagsArray.length === 1) {
        return $('.closeButton1').addClass('hidden');
      }
    };

    ScreenThreeLayout.prototype.doViewListing = function() {
      $('#viewtaglist2 ul li').remove();
      $.each(viewtagsArray, function(index, value) {
        return $('#viewtaglist2 ul').append('<li id="li-view2item-' + value.id + '" data-itemNum="' + value.id + '"><span class="itemText">' + value.name + '</span><div class="closeButton5"></div></li>');
      });
      if (viewtagsArray.length === 1) {
        return $('.closeButton5').addClass('hidden');
      }
    };

    ScreenThreeLayout.prototype.doentranceListing = function() {
      $('#entrancetaglist2 ul li').remove();
      $.each(entrancetagsArray, function(index, value) {
        return $('#entrancetaglist2 ul').append('<li id="li-entrance2item-' + value.id + '" data-itemNum="' + value.id + '"><span class="itemText">' + value.name + '</span><div class="closeButton6"></div></li>');
      });
      if (entrancetagsArray.length === 1) {
        return $('.closeButton6').addClass('hidden');
      }
    };

    ScreenThreeLayout.prototype.doterraceListing = function() {
      $('#terracetaglist2 ul li').remove();
      $.each(terracetagsArray, function(index, value) {
        return $('#terracetaglist2 ul').append('<li id="li-terrace2item-' + value.id + '" data-itemNum="' + value.id + '"><span class="itemText">' + value.name + '</span><div class="closeButton7"></div></li>');
      });
      if (terracetagsArray.length === 1) {
        return $('.closeButton7').addClass('hidden');
      }
    };

    ScreenThreeLayout.prototype.delItem = function(delnum) {
      var i, index, key, params, removeItem, unitvariantarrayValues;
      removeItem = delnum;
      i = 0;
      key = "";
      $.each(tagsArray, function(index, val) {
        if (val.id === delnum) {
          key = i;
        }
        return i++;
      });
      index = key;
      if (index >= 0) {
        tagsArray.splice(index, 1);
        $('#uli-item-' + delnum).remove();
        unitvariantarrayValues = [];
        $.each(tagsArray, function(index, value) {
          return unitvariantarrayValues.push(value.id);
        });
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-three");
        App.defaults['unitVariant'] = unitvariantarrayValues.join(',');
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        App.filter(params = {});
        return this.trigger('unit:variants:selected');
      }
    };

    ScreenThreeLayout.prototype.delViewItem = function(delnum) {
      var i, index, key, params, removeItem, viewarrayValues;
      removeItem = delnum;
      i = 0;
      key = "";
      $.each(viewtagsArray, function(index, val) {
        if (val.id === delnum) {
          key = i;
        }
        return i++;
      });
      index = key;
      if (index >= 0) {
        viewtagsArray.splice(index, 1);
        $('#li-view2item-' + delnum).remove();
        viewarrayValues = [];
        $.each(viewtagsArray, function(index, value) {
          return viewarrayValues.push(value.id);
        });
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-three");
        App.defaults['view'] = viewarrayValues.join(',');
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        App.filter(params = {});
        $('.specialFilter1').empty();
        $('.specialFilter1').addClass('hidden');
        $('.b-modal').addClass('hidden');
        return this.trigger('unit:variants:selected');
      }
    };

    ScreenThreeLayout.prototype.delEntranceItem = function(delnum) {
      var entrancearrayValues, i, index, key, params, removeItem;
      removeItem = delnum;
      i = 0;
      key = "";
      $.each(entrancetagsArray, function(index, val) {
        if (val.id === delnum) {
          key = i;
        }
        return i++;
      });
      index = key;
      if (index >= 0) {
        entrancetagsArray.splice(index, 1);
        $('#li-entrance2item-' + delnum).remove();
        entrancearrayValues = [];
        $.each(entrancetagsArray, function(index, value) {
          return entrancearrayValues.push(value.id);
        });
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-three");
        App.defaults['facing'] = entrancearrayValues.join(',');
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        App.filter(params = {});
        $('.specialFilter1').empty();
        $('.specialFilter1').addClass('hidden');
        $('.b-modal').addClass('hidden');
        return this.trigger('unit:variants:selected');
      }
    };

    ScreenThreeLayout.prototype.delTerraceItem = function(delnum) {
      var i, index, key, params, removeItem, terracearrayValues;
      removeItem = delnum;
      i = 0;
      key = "";
      $.each(terracetagsArray, function(index, val) {
        if (val.id === delnum) {
          key = i;
        }
        return i++;
      });
      index = key;
      if (index >= 0) {
        terracetagsArray.splice(index, 1);
        $('#li-terrace2item-' + delnum).remove();
        terracearrayValues = [];
        $.each(terracetagsArray, function(index, value) {
          return terracearrayValues.push(value.id);
        });
        App.layout.screenFourRegion.el.innerHTML = "";
        $('#screen-four-region').removeClass('section');
        App.navigate("screen-three");
        App.defaults['terrace'] = terracearrayValues.join(',');
        App.currentStore.unit.reset(UNITS);
        App.currentStore.building.reset(BUILDINGS);
        App.currentStore.unit_type.reset(UNITTYPES);
        App.currentStore.unit_variant.reset(UNITVARIANTS);
        App.currentStore.terrace.reset(TERRACEOPTIONS);
        App.currentStore.view.reset(VIEWS);
        App.currentStore.facings.reset(FACINGS);
        App.filter(params = {});
        $('.specialFilter1').empty();
        $('.specialFilter1').addClass('hidden');
        $('.b-modal').addClass('hidden');
        return this.trigger('unit:variants:selected');
      }
    };

    return ScreenThreeLayout;

  })(Marionette.LayoutView);
  BuildingView = (function(_super) {
    __extends(BuildingView, _super);

    function BuildingView() {
      return BuildingView.__super__.constructor.apply(this, arguments);
    }

    BuildingView.prototype.template = '<a class="link" >{{name}}</a>';

    BuildingView.prototype.tagName = 'li';

    BuildingView.prototype.events = {
      'click a': function(e) {
        return e.preventDefault();
      },
      'click .link': function(e) {
        var params;
        $('#tower' + this.model.get('id')).removeClass('hidden');
        App.defaults['building'] = this.model.get('id');
        App.filter(params = {});
        msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
        return this.trigger('building:link:selected');
      }
    };

    return BuildingView;

  })(Marionette.ItemView);
  UnitTypeChildView = (function(_super) {
    __extends(UnitTypeChildView, _super);

    function UnitTypeChildView() {
      return UnitTypeChildView.__super__.constructor.apply(this, arguments);
    }

    UnitTypeChildView.prototype.tagName = 'ul';

    UnitTypeChildView.prototype.className = 'vs-nav';

    UnitTypeChildView.prototype.childView = BuildingView;

    return UnitTypeChildView;

  })(Marionette.CompositeView);
  unitChildView = (function(_super) {
    __extends(unitChildView, _super);

    function unitChildView() {
      return unitChildView.__super__.constructor.apply(this, arguments);
    }

    unitChildView.prototype.template = '<div class="pull-left light"> <h5 class="rangeName bold m-t-5">Floor {{floor}}</h5> </div> <div class="pull-right text-center"> <div class="unitNo">{{name}}</div> <div class="small">{{unittypename}} {{sellablearea}} {{sqft}}</div> </div> <input type="hidden" id="flag{{id}}" name="flag{{id}}" value="0"/> <input type="hidden" id="select{{id}}" name="select{{id}}" value="0"/> <div class="clearfix"></div>';

    unitChildView.prototype.className = 'check';

    unitChildView.prototype.initialize = function() {
      return this.$el.prop("id", 'check' + this.model.get("id"));
    };

    unitChildView.prototype.events = {
      'click ': function(e) {
        var buildingModel, check, element, idValue, idvalue, index, indexvalue, obj, screenThreeLayout, svgdata, svgposition, temp, temp1, temp2, unitModel, unitvalues, _i, _len;
        $("#flatno").text("");
        $("#towerno").text("");
        $("#unittypename").text("");
        $("#area").text("");
        $("#floorrise").text("");
        $('.room').html("");
        $('#terrace').text("");
        $('#printfacing').text("");
        $('#printview').text("");
        $("#twoDimage").attr('src', "");
        $("#zoomedinimage").attr('src', "");
        $("#floorlayoutbasic").text("");
        $('#printmapplic1').text("");
        $('#towerview').text("");
        screenThreeLayout = new ScreenThreeLayout();
        check = screenThreeLayout.checkSelection(this.model);
        if (check === 1 && this.model.get('status') === 9) {
          buildingModel = App.master.building.findWhere({
            id: parseInt(this.model.get('building'))
          });
          svgdata = buildingModel.get('svgdata');
          svgposition = "";
          unitvalues = "";
          indexvalue = "";
          temp = ['f', 'ff'];
          temp1 = ['t', 'tt'];
          temp2 = ['c', 'cc'];
          idValue = "";
          $.each(svgdata, function(index, value) {
            if ($.inArray(position, value.svgposition) >= 0 && value.svgposition !== null) {
              return $.each(value.svgposition, function(index1, val1) {
                var indexvalue1, unitsarray, unitsarray1;
                unitsarray1 = value.units;
                indexvalue1 = unitsarray1[val1];
                if (parseInt(position) === parseInt(val1)) {
                  svgposition = value.svgfile;
                  unitsarray = value.units;
                  indexvalue = unitsarray[position];
                }
                return $.map(indexvalue1, function(index, value) {
                  $('#f' + value).attr('class', 'unit-hover');
                  return $('#ff' + value).attr('class', 'unit-hover');
                });
              });
            }
          });
          obj = this;
          idvalue = "";
          $.each(indexvalue, function(index, value) {
            if (parseInt($('#f' + index).attr('data-value')) === obj.model.get('id')) {
              return idvalue = $('#f' + index).attr('data-idvalue');
            } else if (parseInt($('#ff' + index).attr('data-value')) === obj.model.get('id')) {
              return idvalue = $('#ff' + index).attr('data-idvalue');
            }
          });
          $('#screen-four-region').removeClass('section');
          App.layout.screenFourRegion.el.innerHTML = "";
          App.navigate("screen-three");
          App.currentStore.unit.reset(UNITS);
          App.currentStore.building.reset(BUILDINGS);
          App.currentStore.unit_type.reset(UNITTYPES);
          App.currentStore.unit_variant.reset(UNITVARIANTS);
          App.currentStore.terrace.reset(TERRACEOPTIONS);
          App.currentStore.view.reset(VIEWS);
          App.currentStore.facings.reset(FACINGS);
          unitModel = App.master.unit.findWhere({
            id: this.model.get("id")
          });
          for (index = _i = 0, _len = rangeunitArray.length; _i < _len; index = ++_i) {
            element = rangeunitArray[index];
            if (element === this.model.get('id')) {
              $("#select" + this.model.get('id')).val('1');
            } else {
              $("#select" + element).val('0');
              $('#check' + element).removeClass('selected');
              if (unitModel.get('status') === 9) {
                $("#" + element).attr('class', 'unit-hover aviable ');
              } else if (unitModel.get('status') === 8) {
                $("#" + element).attr('class', 'unit-hover sold ');
              }
              rangeunitArray = [];
            }
          }
          if (parseInt($("#select" + this.model.get('id')).val()) === 0) {
            rangeunitArray.push(this.model.get('id'));
            $('#check' + this.model.get("id")).addClass("selected");
            $("#select" + this.model.get('id')).val("1");
            $.map(indexvalue, function(index, value) {
              var floorArr;
              if (App.defaults['floor'] !== 'All') {
                floorArr = App.defaults['floor'].split(',');
                return $.each(floorArr, function(ind, val) {
                  var textid;
                  if (parseInt(value) === parseInt(val)) {
                    textid = "";
                    $('#' + idvalue + value).attr('class', 'unit-hover range');
                    if (idvalue === 'f') {
                      textid = 't';
                    } else {
                      textid = 'tt';
                    }
                    return $('#' + textid + value).text("");
                  }
                });
              } else {
                $('#f' + value).attr('class', 'unit-hover');
                $('#t' + value).text("");
                $('#ff' + value).attr('class', 'unit-hover');
                return $('#tt' + value).text("");
              }
            });
            $.map(indexvalue, function(index, value) {
              var currency, positionassigend, text, textid, unittpe;
              if (parseInt(index) === obj.model.get("id")) {
                positionassigend = value;
                $("#" + idvalue + value).attr('class', 'selected-flat');
                if (idvalue === 'f') {
                  textid = 't';
                } else {
                  textid = 'tt';
                }
                $("#" + textid + value).attr('class', 'selected-flat');
                $('#currency2').autoNumeric('init');
                $('#currency2').autoNumeric('set', obj.model.get('unitPrice'));
                currency = $('#currency2').val();
                unittpe = App.master.unit_type.findWhere({
                  id: obj.model.get('unitType')
                });
                text = obj.model.get('name') + ' | ' + unittpe.get('name');
                $('#' + textid + value).html(text);
                return $("#" + textid + value).attr('x', '-30');
              }
            });
            $('#' + this.model.get("unitAssigned")).attr('class', 'floor-pos position');
            App.unit['name'] = this.model.get("id");
            $("#screen-three-button").removeClass('disabled btn-default');
            $("#screen-three-button").addClass('btn-primary');
          } else {
            rangeunitArray = [];
            $("#select" + this.model.get('id')).val("0");
            $('#check' + this.model.get('id')).removeClass('selected');
            if (unitModel.get('status') === 9) {
              $("#" + this.model.get("id")).attr('class', 'unit-hover aviable ');
            } else if (unitModel.get('status') === 8) {
              $("#" + this.model.get("id")).attr('class', 'unit-hover sold ');
            }
          }
          if (parseInt($("#select" + this.model.get('id')).val()) === 0) {
            $("#screen-three-button").addClass('disabled btn-default');
            $("#screen-three-button").removeClass('btn-primary');
            $.map(indexvalue, function(index, value) {
              var floorArr;
              if (App.defaults['floor'] !== 'All') {
                floorArr = App.defaults['floor'].split(',');
                return $.each(floorArr, function(ind, val) {
                  if (parseInt(value) === parseInt(val)) {
                    return $("#" + idvalue + val).attr('class', 'unit-hover range');
                  }
                });
              }
            });
            $('#' + this.model.get("unitAssigned")).attr('class', 'floor-pos ');
            return false;
          }
        }
      }
    };

    unitChildView.prototype.onShow = function() {
      var flag, myArray, obj, track;
      $("#flatno").text("");
      $("#towerno").text("");
      $("#unittypename").text("");
      $("#area").text("");
      $("#floorrise").text("");
      $('.room').html("");
      $('#terrace').text("");
      $('#printfacing').text("");
      $('#printview').text("");
      $("#twoDimage").attr('src', "");
      $("#zoomedinimage").attr('src', "");
      $("#floorlayoutbasic").text("");
      $('#printmapplic1').text("");
      $('#towerview').text("");
      myArray = [];
      $.map(App.defaults, function(value, index) {
        if (value !== 'All' && index !== 'floor') {
          return myArray.push({
            key: index,
            value: value
          });
        }
      });
      flag = 0;
      obj = this;
      track = 0;
      $.each(myArray, function(index, value) {
        var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
        paramKey = {};
        if (value.key === 'budget') {
          buildingModel = App.master.building.findWhere({
            'id': obj.model.get('building')
          });
          floorRise = buildingModel.get('floorrise');
          floorRiseValue = floorRise[obj.model.get('floor')];
          unitVariantmodel = App.master.unit_variant.findWhere({
            'id': obj.model.get('unitVariant')
          });
          unitPrice = obj.model.get('unitPrice');
          budget_arr = value.value.split(' ');
          budget_price = budget_arr[0].split('-');
          budget_price[0] = budget_price[0] + '00000';
          budget_price[1] = budget_price[1] + '00000';
          if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
            return flag++;
          }
        } else if (value.key !== 'floor') {
          tempnew = [];
          if (value.key === 'view' || value.key === 'apartment_views') {
            tempnew = [];
            value.key = 'apartment_views';
            tempnew = obj.model.get(value.key);
            if (tempnew !== "") {
              tempnew = tempnew.map(function(item) {
                return parseInt(item);
              });
            }
          } else if (value.key === 'facing') {
            tempnew = [];
            tempnew = obj.model.get(value.key);
            if (tempnew.length !== 0) {
              tempnew = tempnew.map(function(item) {
                return parseInt(item);
              });
            }
          }
          temp = [];
          temp.push(value.value);
          tempstring = temp.join(',');
          initvariant = tempstring.split(',').map(function(item) {
            return parseInt(item);
          });
          if (initvariant.length >= 1) {
            _results = [];
            for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
              element = initvariant[_i];
              if (obj.model.get(value.key) === parseInt(element)) {
                _results.push(flag++);
              } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                _results.push(flag++);
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } else {
            if (obj.model.get(value.key) === parseInt(value.value)) {
              return flag++;
            }
          }
        }
      });
      if (flag >= myArray.length) {
        track = 1;
      }
      if (myArray.length === 0) {
        track = 1;
      }
      if (track === 1 && this.model.get('status') === 9 && this.model.get('unitType') !== 14 && this.model.get('unitType') !== 16) {
        $('#check' + this.model.get("id")).addClass('boxLong filtered');
        return $('#flag' + this.model.get("id")).val('1');
      } else if (track === 1 && this.model.get('status') === 8 && this.model.get('unitType') !== 14 && this.model.get('unitType') !== 16) {
        return $('#check' + this.model.get("id")).addClass('boxLong sold');
      } else {
        $('#check' + this.model.get("id")).addClass('boxLong other');
        return $('#check' + this.model.get("id")).text(this.model.get('unitTypeName'));
      }
    };

    return unitChildView;

  })(Marionette.ItemView);
  UnitView = (function(_super) {
    __extends(UnitView, _super);

    function UnitView() {
      return UnitView.__super__.constructor.apply(this, arguments);
    }

    UnitView.prototype.template = '<div class="unitContainer"></div>';

    UnitView.prototype.childView = unitChildView;

    UnitView.prototype.childViewContainer = '.unitContainer';

    UnitView.prototype.initialize = function() {
      this.collection = this.model.get('units');
      return this.$el.prop("id", this.model.get("id"));
    };

    return UnitView;

  })(Marionette.CompositeView);
  UnitTypeView = (function(_super) {
    __extends(UnitTypeView, _super);

    function UnitTypeView() {
      return UnitTypeView.__super__.constructor.apply(this, arguments);
    }

    UnitTypeView.prototype.template = '<div class="unitTable"> <div id="unitsSlider" class="unitSlider"> </div></div>';

    UnitTypeView.prototype.childView = UnitView;

    UnitTypeView.prototype.childViewContainer = '.unitSlider';

    UnitTypeView.prototype.onShow = function() {
      var container, height, maxcoll, maxvalue;
      container = $("#unitsSlider");
      height = container.height("auto").height();
      container.height("auto");
      sudoSlider = $("#unitsSlider").sudoSlider({
        customLink: "a",
        prevNext: false,
        responsive: true,
        speed: 800
      });
      maxcoll = this.collection.toArray();
      maxvalue = _.max(maxcoll, function(model) {
        return model.get('count');
      });
      return sudoSlider.goToSlide(maxvalue.get('id'));
    };

    return UnitTypeView;

  })(Marionette.CompositeView);
  return {
    ScreenThreeLayout: ScreenThreeLayout,
    UnitTypeChildView: UnitTypeChildView,
    UnitTypeView: UnitTypeView
  };
});

// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/screen-three/screen-three-controller',['extm', 'src/apps/screen-three/screen-three-view'], function(Extm, ScreenThreeView) {
  var ScreenThreeController;
  ScreenThreeController = (function(_super) {
    __extends(ScreenThreeController, _super);

    function ScreenThreeController() {
      this.mainUnitSelected = __bind(this.mainUnitSelected, this);
      this._unitItemSelected = __bind(this._unitItemSelected, this);
      this._loadRangeData = __bind(this._loadRangeData, this);
      this.showViews = __bind(this.showViews, this);
      return ScreenThreeController.__super__.constructor.apply(this, arguments);
    }

    ScreenThreeController.prototype.initialize = function() {
      this.Collection = this._getUnits();
      this.layout = new ScreenThreeView.ScreenThreeLayout({
        buildingCollection: this.Collection[0],
        countUnits: this.Collection[3],
        uintVariantId: this.Collection[8],
        uintVariantIdArray: this.Collection[8],
        unitVariants: this.Collection[7],
        maxvalue: this.Collection[9],
        views: this.Collection[12],
        facings: this.Collection[13],
        Oviews: this.Collection[10],
        Ofacings: this.Collection[11],
        terrace: this.Collection[14],
        terraceID: this.Collection[15],
        position: this.Collection[16],
        templateHelpers: {
          selection: this.Collection[2],
          countUnits: this.Collection[3],
          range: this.Collection[4],
          high: this.Collection[5],
          rangetext: this.Collection[6],
          unitVariants: this.Collection[7],
          views: this.Collection[10],
          facings: this.Collection[11],
          terrace: this.Collection[14],
          terraceID: this.Collection[15],
          maxvalue: this.Collection[9]
        }
      });
      this.listenTo(this.layout, "show", this.showViews);
      this.listenTo(this.layout, 'unit:variants:selected', this._showBuildings);
      this.listenTo(this.layout, 'unit:item:selected', this._unitItemSelected);
      this.listenTo(this.layout, 'load:range:data', this._loadRangeData);
      return this.show(this.layout);
    };

    ScreenThreeController.prototype.showViews = function() {
      this.buildingCollection = this.Collection[0];
      this.unitCollection = this.Collection[1];
      this.showBuildingRegion(this.buildingCollection);
      return this.showUnitRegion(this.unitCollection);
    };

    ScreenThreeController.prototype._showBuildings = function() {
      this.Collection = this._getUnits();
      this.layout = new ScreenThreeView.ScreenThreeLayout({
        buildingCollection: this.Collection[0],
        countUnits: this.Collection[3],
        uintVariantId: this.Collection[8],
        uintVariantIdArray: this.Collection[8],
        unitVariants: this.Collection[7],
        maxvalue: this.Collection[9],
        views: this.Collection[12],
        facings: this.Collection[13],
        Oviews: this.Collection[10],
        Ofacings: this.Collection[11],
        terrace: this.Collection[14],
        terraceID: this.Collection[15],
        position: this.Collection[16],
        templateHelpers: {
          selection: this.Collection[2],
          countUnits: this.Collection[3],
          range: this.Collection[4],
          high: this.Collection[5],
          rangetext: this.Collection[6],
          unitVariants: this.Collection[7],
          maxvalue: this.Collection[9],
          views: this.Collection[10],
          facings: this.Collection[11],
          terrace: this.Collection[14],
          terraceID: this.Collection[15]
        }
      });
      this.listenTo(this.layout, "show", this.showViews);
      this.listenTo(this.layout, 'unit:variants:selected', this._showBuildings);
      this.listenTo(this.layout, 'unit:item:selected', this._unitItemSelected);
      this.listenTo(this.layout, 'load:range:data', this._loadRangeData);
      return this.show(this.layout);
    };

    ScreenThreeController.prototype._loadRangeData = function(unitModel) {
      var itemview1, itemview2, sudoSlider;
      this.Collection = this._getUnits();
      itemview1 = new ScreenThreeView.UnitTypeChildView({
        collection: this.Collection[0]
      });
      itemview2 = new ScreenThreeView.UnitTypeView({
        collection: this.Collection[1]
      });
      this.layout.buildingRegion.$el.empty();
      this.layout.unitRegion.$el.empty();
      this.layout.buildingRegion.$el.append(itemview1.render().el);
      this.layout.unitRegion.$el.append(itemview2.render().el);
      sudoSlider = $("#unitsSlider").sudoSlider({
        customLink: "a",
        prevNext: false,
        responsive: true,
        speed: 800
      });
      sudoSlider.goToSlide(unitModel.get('unitAssigned'));
      msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
      return this.layout.triggerMethod("show:range:data", unitModel, this.Collection[1]);
    };

    ScreenThreeController.prototype.showBuildingRegion = function(buildingCollection) {
      var itemview1;
      itemview1 = this.getView(buildingCollection);
      this.layout.buildingRegion.show(itemview1);
      return this.listenTo(itemview1, 'childview:building:link:selected', this._showBuildings);
    };

    ScreenThreeController.prototype.showUnitRegion = function(unitCollection) {
      var itemview2;
      itemview2 = this.getUnitsView(unitCollection);
      return this.layout.unitRegion.show(itemview2);
    };

    ScreenThreeController.prototype.getView = function(buildingCollection) {
      return new ScreenThreeView.UnitTypeChildView({
        collection: buildingCollection
      });
    };

    ScreenThreeController.prototype.getUnitsView = function(unitCollection) {
      return new ScreenThreeView.UnitTypeView({
        collection: unitCollection
      });
    };

    ScreenThreeController.prototype._unitItemSelected = function(childview, childview1, childview2) {
      return App.navigate("screen-four", {
        trigger: true
      });
    };

    ScreenThreeController.prototype._getUnits = function() {
      var Countunits, buildingArray, buildingArrayModel, buildingCollection, buildingModel, buildings, buildingvalue, capability, facingID, facingModels, facingtemp, facingtemp1, first, flag, floorArray, floorCollectionCur, floorCollunits, floorCollunits1, floorCountArray, floorUnitsArray, flooruniqUnitvariant, floorunitvariant, highUnits, lowUnits, mainnewarr, maxvalue, mediumUnits, myArray, myArray1, newunitCollection, param, paramkey, range, status, templateArr, templateString, tempunitvarinat, terraceID, terraceModels, terracetemp, terracetemp1, track, trackArray, trackposition, uniqBuildings, uniqUnitvariant, uniqfacings, uniqterrace, uniqunitAssigned, uniqunitAssignedval, uniqviews, unitArray, unitAssigned, unitColl, unitVariantID, unitVariantModels, units, units1, unitsArray, unitsCollection, unitscur, unitsfilter, unitslen, unitslen1, unitvariant, unitvarinatColl, usermodel, viewID, viewModels, viewtemp, viewtemp1;
      buildingArray = [];
      unitArray = [];
      unitsArray = [];
      buildingArrayModel = [];
      templateArr = [];
      param = {};
      paramkey = {};
      flag = 0;
      track = 0;
      trackArray = [];
      floorUnitsArray = [];
      myArray = [];
      myArray1 = [];
      units = App.master.unit;
      status = App.currentStore.status.findWhere({
        'name': 'Available'
      });
      Countunits = App.currentStore.unit.where({
        'status': status.get('id')
      });
      $.map(App.defaults, function(value, index) {
        if (value !== 'All') {
          if (index !== 'unitVariant') {
            myArray.push({
              key: index,
              value: value
            });
          }
          if (index !== 'facing' && index !== 'terrace' && index !== 'view') {
            return myArray1.push({
              key: index,
              value: value
            });
          }
        }
      });
      $.each(myArray, function(index, value) {
        var budget_Val, element, key, string_val, valuearr, _i, _len, _results;
        if (value.value !== 'All') {
          param[value.key] = value.value;
          string_val = _.isString(value.value);
          valuearr = "";
          if (string_val === true) {
            valuearr = value.value.split(',');
          }
          if (valuearr.length > 1) {
            _results = [];
            for (_i = 0, _len = valuearr.length; _i < _len; _i++) {
              element = valuearr[_i];
              if (value.key === 'unitType') {
                key = App.master.unit_type.findWhere({
                  id: parseInt(element)
                });
                templateArr.push(key.get('name'));
              }
              if (value.key === 'budget') {
                budget_Val = value + 'lakhs';
                templateArr.push(budget_Val);
              }
              if (value.key === 'floor') {
                if (track === 0) {
                  trackArray.push(value.value);
                }
                _results.push(track = 1);
              } else {
                _results.push(void 0);
              }
            }
            return _results;
          } else {
            if (value.key === 'unitType') {
              key = App.master.unit_type.findWhere({
                id: parseInt(value.value)
              });
              templateArr.push(key.get('name'));
            }
            if (value.key === 'budget') {
              budget_Val = value.value;
              templateArr.push(budget_Val);
            }
            if (value.key === 'floor') {
              if (track === 0) {
                trackArray.push(value.value);
              }
              return track = 1;
            }
          }
        }
      });
      if (templateArr.length === 0) {
        templateArr.push('All');
      }
      if (flag === 1) {
        first = _.first(trackArray);
        lowUnits = App.master.range.findWhere({
          name: 'low'
        });
        if (parseInt(first) >= lowUnits.get('start') && parseInt(first) <= lowUnits.get('end')) {
          range = 'LOWRISE';
        }
        mediumUnits = App.master.range.findWhere({
          name: 'medium'
        });
        if (parseInt(first) >= mediumUnits.get('start') && parseInt(first) <= mediumUnits.get('end')) {
          range = 'MIDRISE';
        }
        highUnits = App.master.range.findWhere({
          name: 'high'
        });
        if (parseInt(first) >= highUnits.get('start') && parseInt(first) <= highUnits.get('end')) {
          range = 'HIGHRISE';
        }
      } else {
        templateString = templateArr.join(',');
      }
      flag = 0;
      status = App.master.status.findWhere({
        'name': 'Available'
      });
      unitslen = App.master.unit.toArray();
      unitslen1 = App.master.unit.where({
        'building': parseInt(App.defaults['building'])
      });
      $.each(unitslen1, function(index, value1) {
        var floorArray, floorstring;
        if (App.defaults['floor'] !== 'All') {
          floorstring = App.defaults['floor'];
          floorArray = floorstring.split(',');
          return $.each(floorArray, function(index, value) {
            if (value1.get('floor') === parseInt(value)) {
              return floorUnitsArray.push(value1);
            }
          });
        }
      });
      if (App.defaults['floor'] === "All") {
        floorUnitsArray = unitslen;
      }
      floorCollunits = [];
      floorCollunits1 = [];
      $.each(floorUnitsArray, function(index, value1) {
        flag = 0;
        $.each(myArray, function(index, value) {
          var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
          paramKey = {};
          paramKey[value.key] = value.value;
          if (value.key === 'budget') {
            buildingModel = App.master.building.findWhere({
              'id': value1.get('building')
            });
            floorRise = buildingModel.get('floorrise');
            floorRiseValue = floorRise[value1.get('floor')];
            unitVariantmodel = App.master.unit_variant.findWhere({
              'id': value1.get('unitVariant')
            });
            unitPrice = value1.get('unitPrice');
            budget_arr = value.value.split(' ');
            budget_price = budget_arr[0].split('-');
            budget_price[0] = budget_price[0] + '00000';
            budget_price[1] = budget_price[1] + '00000';
            if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
              return flag++;
            }
          } else if (value.key !== 'floor') {
            tempnew = [];
            if (value.key === 'view' || value.key === 'apartment_views') {
              tempnew = [];
              value.key = 'apartment_views';
              tempnew = value1.get(value.key);
              if (tempnew !== "") {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            } else if (value.key === 'facing') {
              tempnew = [];
              tempnew = value1.get(value.key);
              if (tempnew.length !== 0) {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            }
            temp = [];
            temp.push(value.value);
            tempstring = temp.join(',');
            initvariant = tempstring.split(',').map(function(item) {
              return parseInt(item);
            });
            if (initvariant.length >= 1) {
              _results = [];
              for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
                element = initvariant[_i];
                if (value1.get(value.key) === parseInt(element)) {
                  _results.push(flag++);
                } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                  _results.push(flag++);
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            } else {
              if (value1.get(value.key) === parseInt(value.value)) {
                return flag++;
              }
            }
          }
        });
        if (flag >= myArray.length - 1) {
          if (value1.get('unitType') !== 14 && value1.get('unitType') !== 16) {
            return floorCollunits.push(value1);
          }
        }
      });
      $.each(floorUnitsArray, function(index, value1) {
        flag = 0;
        $.each(myArray1, function(index, value) {
          var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
          paramKey = {};
          paramKey[value.key] = value.value;
          if (value.key === 'budget') {
            buildingModel = App.master.building.findWhere({
              'id': value1.get('building')
            });
            floorRise = buildingModel.get('floorrise');
            floorRiseValue = floorRise[value1.get('floor')];
            unitVariantmodel = App.master.unit_variant.findWhere({
              'id': value1.get('unitVariant')
            });
            unitPrice = value1.get('unitPrice');
            budget_arr = value.value.split(' ');
            budget_price = budget_arr[0].split('-');
            budget_price[0] = budget_price[0] + '00000';
            budget_price[1] = budget_price[1] + '00000';
            if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
              return flag++;
            }
          } else if (value.key !== 'floor') {
            tempnew = [];
            if (value.key === 'view' || value.key === 'apartment_views') {
              tempnew = [];
              value.key = 'apartment_views';
              tempnew = value1.get(value.key);
              if (tempnew !== "") {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            } else if (value.key === 'facing') {
              tempnew = [];
              tempnew = value1.get(value.key);
              if (tempnew.length !== 0) {
                tempnew = tempnew.map(function(item) {
                  return parseInt(item);
                });
              }
            }
            temp = [];
            temp.push(value.value);
            tempstring = temp.join(',');
            initvariant = tempstring.split(',').map(function(item) {
              return parseInt(item);
            });
            if (initvariant.length >= 1) {
              _results = [];
              for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
                element = initvariant[_i];
                if (value1.get(value.key) === parseInt(element)) {
                  _results.push(flag++);
                } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                  _results.push(flag++);
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            } else {
              if (value1.get(value.key) === parseInt(value.value)) {
                return flag++;
              }
            }
          }
        });
        if (flag >= myArray1.length - 1) {
          if (value1.get('unitType') !== 14 && value1.get('unitType') !== 16) {
            return floorCollunits1.push(value1);
          }
        }
      });
      if (App.defaults['floor'] === "All") {
        floorCollunits = unitslen;
      }
      units = new Backbone.Collection(floorCollunits);
      unitsfilter = new Backbone.Collection(floorCollunits1);
      buildings = units.pluck("building");
      uniqBuildings = _.uniq(buildings);
      tempunitvarinat = [];
      uniqUnitvariant = [];
      $.each(unitslen, function(index, value) {
        if (value.get('unitType') !== 14 && value.get('unitType') !== 16) {
          return tempunitvarinat.push(value);
        }
      });
      unitvarinatColl = new Backbone.Collection(tempunitvarinat);
      unitvariant = unitvarinatColl.pluck("unitVariant");
      uniqUnitvariant = _.uniq(unitvariant);
      floorunitvariant = units.pluck("unitVariant");
      flooruniqUnitvariant = _.uniq(floorunitvariant);
      unitVariantModels = [];
      unitVariantID = [];
      viewModels = [];
      viewID = [];
      viewtemp = [];
      facingModels = [];
      facingID = [];
      facingtemp = [];
      terraceModels = [];
      terraceID = [];
      terracetemp = [];
      viewtemp1 = [];
      facingtemp1 = [];
      terracetemp1 = [];
      usermodel = new Backbone.Model(USER);
      capability = usermodel.get('all_caps');
      if (usermodel.get('id') !== "0" && $.inArray('see_special_filters', capability) >= 0) {
        unitscur = App.master.unit;
        unitscur.each(function(item) {
          if (item.get('unitType') !== 14 && item.get('unitType') !== 16) {
            if (item.get('apartment_views') !== "" && item.get('apartment_views').length !== 0) {
              $.merge(viewtemp, item.get('apartment_views'));
            }
            if (item.get('facing').length !== 0 && item.get('facing') !== "") {
              $.merge(facingtemp, item.get('facing'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return terracetemp.push(item.get('terrace'));
            }
          }
        });
        floorCollectionCur = unitsfilter;
        floorCollectionCur.each(function(item) {
          if (item.get('unitType') !== 14 && item.get('unitType') !== 16) {
            if (item.get('apartment_views') !== "" && item.get('apartment_views').length !== 0) {
              $.merge(viewtemp1, item.get('apartment_views'));
            }
            if (item.get('facing').length !== 0 && item.get('facing') !== "") {
              $.merge(facingtemp1, item.get('facing'));
            }
            if (item.get('terrace') !== "" && item.get('terrace') !== 0) {
              return terracetemp1.push(item.get('terrace'));
            }
          }
        });
        viewtemp = viewtemp.map(function(item) {
          return parseInt(item);
        });
        facingtemp = facingtemp.map(function(item) {
          return parseInt(item);
        });
        terracetemp = terracetemp.map(function(item) {
          return parseInt(item);
        });
        uniqviews = _.uniq(viewtemp);
        uniqfacings = _.uniq(facingtemp);
        uniqterrace = _.uniq(terracetemp);
        viewtemp1 = viewtemp1.map(function(item) {
          return parseInt(item);
        });
        viewtemp1 = _.uniq(viewtemp1);
        facingtemp1 = facingtemp1.map(function(item) {
          return parseInt(item);
        });
        facingtemp1 = _.uniq(facingtemp1);
        terracetemp1 = terracetemp1.map(function(item) {
          return parseInt(item);
        });
        terracetemp1 = _.uniq(terracetemp1);
        $.each(uniqviews, function(index, value) {
          var checked, classname, count, disabled, key, viewModel;
          viewModel = App.master.view.findWhere({
            id: parseInt(value)
          });
          disabled = "disabled";
          checked = "";
          key = "";
          key = $.inArray(parseInt(value), viewtemp1);
          count = [];
          $.each(floorCollunits1, function(ind, val) {
            var apartment;
            if (parseInt(val.get('status')) === parseInt(status.get('id'))) {
              apartment = val.get('apartment_views');
              apartment = apartment.map(function(item) {
                return parseInt(item);
              });
              if ($.inArray(parseInt(value), apartment) >= 0) {
                return $.merge(count, val.get('apartment_views'));
              }
            }
          });
          if (count.length !== 0 && key >= 0) {
            disabled = "";
            checked = "checked";
            classname = 'filtered';
            viewID.push(parseInt(viewModel.get('id')));
          } else if (count.length === 0 && key >= 0) {
            classname = 'sold';
          } else {
            classname = 'other';
          }
          return viewModels.push({
            id: viewModel.get('id'),
            name: viewModel.get('name'),
            disabled: disabled,
            checked: checked,
            classname: classname
          });
        });
        $.each(uniqfacings, function(index, value) {
          var checked, classname, count, disabled, facingModel, key;
          facingModel = App.master.facings.findWhere({
            id: parseInt(value)
          });
          disabled = "disabled";
          checked = "";
          key = "";
          key = $.inArray(parseInt(value), facingtemp1);
          count = [];
          $.each(floorCollunits1, function(ind, val) {
            var facing;
            if (parseInt(val.get('status')) === parseInt(status.get('id'))) {
              facing = val.get('facing');
              facing = facing.map(function(item) {
                return parseInt(item);
              });
              if ($.inArray(parseInt(value), facing) >= 0) {
                return $.merge(count, val.get('facing'));
              }
            }
          });
          if (count.length !== 0 && key >= 0) {
            disabled = "";
            checked = "checked";
            classname = 'filtered';
            facingID.push(parseInt(facingModel.get('id')));
          } else if (count.length === 0 && key >= 0) {
            classname = 'sold';
          } else {
            classname = 'other';
          }
          return facingModels.push({
            id: facingModel.get('id'),
            name: facingModel.get('name'),
            disabled: disabled,
            checked: checked,
            classname: classname
          });
        });
        $.each(uniqterrace, function(index, value) {
          var checked, classname, count, disabled, key, terraceModel;
          terraceModel = App.master.terrace.findWhere({
            id: parseInt(value)
          });
          disabled = "disabled";
          checked = "";
          key = "";
          key = $.inArray(parseInt(value), terracetemp1);
          count = [];
          $.each(floorCollunits1, function(ind, val) {
            if (parseInt(val.get('status')) === parseInt(status.get('id'))) {
              if (parseInt(value) === val.get('terrace')) {
                return count.push(val);
              }
            }
          });
          if (count.length !== 0 && key >= 0) {
            disabled = "";
            checked = "checked";
            classname = 'filtered';
            terraceID.push(parseInt(terraceModel.get('id')));
          } else if (count.length === 0 && key >= 0) {
            classname = 'sold';
          } else {
            classname = 'other';
          }
          return terraceModels.push({
            id: parseInt(terraceModel.get('id')),
            name: terraceModel.get('name'),
            disabled: disabled,
            checked: checked,
            classname: classname
          });
        });
      }
      $.each(uniqUnitvariant, function(index, value) {
        var classname, count, filter, filtername, key, selected, unitVarinatModel, unittypemodel;
        unitVarinatModel = App.master.unit_variant.findWhere({
          id: value
        });
        count = units.where({
          'unitVariant': value,
          'status': status.get('id')
        });
        key = $.inArray(value, flooruniqUnitvariant);
        selected = "";
        if (App.defaults['unitType'] !== "All") {
          unittypemodel = App.master.unit_type.findWhere({
            id: parseInt(App.defaults['unitType'])
          });
          filter = unittypemodel.get('name') + ' apartments';
        } else if (App.defaults['budget'] !== "All") {
          filter = 'Apartments within ' + App.defaults['budget'];
        }
        if (count.length !== 0 && key >= 0) {
          classname = 'boxLong filtered';
          filtername = 'filtered';
          selected = 'selected';
          unitVariantID.push(parseInt(unitVarinatModel.get('id')));
        } else if (count.length === 0 && key >= 0) {
          classname = 'boxLong sold';
          filtername = 'sold';
        } else {
          classname = 'boxLong other';
          filtername = 'other';
        }
        return unitVariantModels.push({
          id: unitVarinatModel.get('id'),
          name: unitVarinatModel.get('name'),
          sellablearea: unitVarinatModel.get('sellablearea'),
          count: count.length,
          classname: classname,
          filtername: filtername,
          selected: selected,
          filter: filter
        });
      });
      unitVariantModels.sort(function(a, b) {
        return a.id - b.id;
      });
      unitVariantID.sort(function(a, b) {
        return a - b;
      });
      floorArray = [];
      floorCountArray = [];
      unitsArray = [];
      buildingvalue = App.defaults['building'];
      if (App.defaults['building'] === "All") {
        buildings = App.currentStore.building;
        buildings.each(function(item) {
          var unitsColl;
          unitsColl = App.master.unit.where({
            building: item.get('id')
          });
          return unitsArray.push({
            id: item.get('id'),
            count: unitsColl.length
          });
        });
        buildingvalue = _.max(unitsArray, function(model) {
          return model.count;
        });
        buildingvalue = buildingvalue.id;
      }
      units1 = new Backbone.Collection(floorUnitsArray);
      unitsCollection = units1.where({
        building: parseInt(buildingvalue)
      });
      $.each(unitsCollection, function(index, value) {
        if (floorArray.indexOf(value.get('floor')) === -1) {
          floorArray.push(value.get('floor'));
          return floorCountArray.push({
            id: value.get('floor')
          });
        }
      });
      floorArray = floorArray.sort();
      floorArray.sort(function(a, b) {
        return b - a;
      });
      floorCountArray.sort(function(a, b) {
        return b.id - a.id;
      });
      trackposition = [];
      unitArray = [];
      unitColl = new Backbone.Collection(unitsCollection);
      unitAssigned = unitColl.pluck("unitAssigned");
      uniqunitAssignedval = _.uniq(unitAssigned);
      uniqunitAssigned = _.without(uniqunitAssignedval, 0);
      uniqunitAssigned.sort(function(a, b) {
        return a - b;
      });
      $.each(uniqunitAssigned, function(index, value) {
        var disabled, floorColl, maxcount, maxunits, unitAssgendModels, unitAssgendModelsColl;
        floorColl = new Backbone.Collection(floorUnitsArray);
        if (App.defaults['building'] === "All") {
          unitAssgendModels = floorColl.where({
            unitAssigned: value,
            building: buildingvalue
          });
        } else {
          unitAssgendModels = floorColl.where({
            unitAssigned: value
          });
        }
        $.each(unitAssgendModels, function(index, value) {
          var unitType, unitVariant;
          unitType = App.master.unit_type.findWhere({
            id: value.get('unitType')
          });
          if (value.get('unitType') === 16) {
            value.set("unittypename", "Not Released");
            value.set("sellablearea", "");
            return value.set("sqft", "");
          } else if (value.get('unitType') === 14) {
            value.set("unittypename", unitType.get("name"));
            value.set("sellablearea", "");
            return value.set("sqft", "");
          } else {
            value.set("unittypename", unitType.get("name"));
            unitVariant = App.master.unit_variant.findWhere({
              id: value.get('unitVariant')
            });
            value.set("sellablearea", unitVariant.get("sellablearea"));
            return value.set("sqft", unitVariant.get("Sq.ft."));
          }
        });
        unitAssgendModels = _.uniq(unitAssgendModels);
        unitAssgendModels.sort(function(a, b) {
          return b.get('floor') - a.get('floor');
        });
        maxcount = [];
        maxunits = [];
        track = 0;
        $.each(unitAssgendModels, function(index, value1) {
          flag = 0;
          $.each(myArray, function(index, value) {
            var budget_arr, budget_price, buildingModel, element, floorRise, floorRiseValue, initvariant, paramKey, temp, tempnew, tempstring, unitPrice, unitVariantmodel, _i, _len, _results;
            paramKey = {};
            paramKey[value.key] = value.value;
            if (value.key === 'budget') {
              buildingModel = App.master.building.findWhere({
                'id': value1.get('building')
              });
              floorRise = buildingModel.get('floorrise');
              floorRiseValue = floorRise[value1.get('floor')];
              unitVariantmodel = App.master.unit_variant.findWhere({
                'id': value1.get('unitVariant')
              });
              unitPrice = value1.get('unitPrice');
              budget_arr = value.value.split(' ');
              budget_price = budget_arr[0].split('-');
              budget_price[0] = budget_price[0] + '00000';
              budget_price[1] = budget_price[1] + '00000';
              if (parseInt(unitPrice) >= parseInt(budget_price[0]) && parseInt(unitPrice) <= parseInt(budget_price[1])) {
                return flag++;
              }
            } else if (value.key !== 'floor') {
              tempnew = [];
              if (value.key === 'view' || value.key === 'apartment_views') {
                tempnew = [];
                value.key = 'apartment_views';
                tempnew = value1.get(value.key);
                if (tempnew !== "") {
                  tempnew = tempnew.map(function(item) {
                    return parseInt(item);
                  });
                }
              } else if (value.key === 'facing') {
                tempnew = [];
                tempnew = value1.get(value.key);
                if (tempnew.length !== 0) {
                  tempnew = tempnew.map(function(item) {
                    return parseInt(item);
                  });
                }
              }
              temp = [];
              temp.push(value.value);
              tempstring = temp.join(',');
              initvariant = tempstring.split(',').map(function(item) {
                return parseInt(item);
              });
              if (initvariant.length >= 1) {
                _results = [];
                for (_i = 0, _len = initvariant.length; _i < _len; _i++) {
                  element = initvariant[_i];
                  if (value1.get(value.key) === parseInt(element)) {
                    _results.push(flag++);
                  } else if ($.inArray(parseInt(element), tempnew) >= 0) {
                    _results.push(flag++);
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              } else {
                if (value1.get(value.key) === parseInt(value.value)) {
                  return flag++;
                }
              }
            }
          });
          if (flag >= myArray.length - 1) {
            track = 1;
          }
          if (myArray.length === 0) {
            track = 1;
          }
          if (value1.get('status') === 9 && value1.get('unitType') !== 14 && value1.get('unitType') !== 16) {
            return maxunits = App.currentStore.unit.where({
              unitAssigned: value
            });
          }
        });
        disabled = disabled;
        unitAssgendModelsColl = new Backbone.Collection(unitAssgendModels);
        if (maxunits.length === 0) {
          trackposition.push(value);
        }
        return unitArray.push({
          id: value,
          units: unitAssgendModelsColl,
          count: maxunits.length,
          disabled: disabled
        });
      });
      unitArray.sort(function(a, b) {
        return a.id - b.id;
      });
      maxvalue = _.max(unitArray, function(model) {
        return model.count;
      });
      newunitCollection = new Backbone.Collection(unitArray);
      buildingModel = App.master.building.where({
        id: parseInt(buildingvalue)
      });
      buildingCollection = new Backbone.Collection(buildingModel);
      mainnewarr = "";
      return [buildingCollection, newunitCollection, templateString, Countunits.length, templateString, mainnewarr, range, unitVariantModels, unitVariantID, maxvalue, viewModels, facingModels, viewID, facingID, terraceModels, terraceID, trackposition];
    };

    ScreenThreeController.prototype.mainUnitSelected = function(childview, childview1, unit, unittypeid, range, size) {
      return App.navigate("#screen-four/unit/" + unit + "/unittype/" + unittypeid + "/range/" + range + "/size/" + size, {
        trigger: true
      });
    };

    return ScreenThreeController;

  })(Extm.RegionController);
  return msgbus.registerController('screen:three', ScreenThreeController);
});

// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/screen-four/screen-four-view',['marionette'], function(Marionette) {
  var ScreenFourLayout, UnitMainView, UnitTypeChildView, UnitTypeView, UnitsView, agreementValue, agreementValue1, discountClass, infraid, object, perFlag;
  perFlag = 0;
  object = "";
  agreementValue = "";
  agreementValue1 = "";
  infraid = "";
  discountClass = "";
  ScreenFourLayout = (function(_super) {
    __extends(ScreenFourLayout, _super);

    function ScreenFourLayout() {
      return ScreenFourLayout.__super__.constructor.apply(this, arguments);
    }

    ScreenFourLayout.prototype.template = '<div class="page-container row-fluid"> <div id="vs-container" class="vs-container flatContainer"> <header class="vs-header" id="unitblock-region"> </header> <div  id="mainunit-region"> </div> <div class="h-align-middle"> <!--<a class="btn btn-primary m-t-20 m-b-20 h-align-middle remove" ><span class="glyphicon glyphicon-heart"></span> Add to Wishlist</a>--> <!--<div class="alert alert-success alert-dismissible hide" role="alert" id="errormsg"></div>--> </div> <div class="step4Actions"> <div class="grid-container"> <div class="grid-block-4 addtowishlist "> <a class="grid-link remove" name="list" id="list"> <h3 class="m-t-0 m-b-0"><span class="skyicon sky-heart"></span></h3> <h4 class="m-t-0 m-b-0 ">Add to Wishlist</h4> </a> </div> <div class="grid-block-4"> <a class="grid-link print-preview"> <h3 class="m-t-0 m-b-0"><span class="sky-printer"></span></h3> <h4 class="m-t-0 m-b-0">Print</h4> </a> </div> <div class="grid-block-4"> <a class="grid-link" id="emailBtn"  > <h3 class="m-t-0 m-b-0"><span class="sky-mail"></span></h3> <h4 class="m-t-0 m-b-0">Email</h4> </a> </div> <div class="grid-block-4 costsheetbutton " > <a class="grid-link" > <h3 class="m-t-0 m-b-0"><span class="sky-coin"></span></h3> <h4 class="m-t-0 m-b-0 ">Cost Sheet</h4> </a> </div> </div> </div> </div> </div> <div class="costsheetclass" style="display:none" > <div id="invoice" class="paid"> <div class="this-is"> <h3 class="light">Estimated Cost for Flat No. <span class="text-primary flatno"></span> in <span class="text-primary building"></span></h3> </div><!-- invoice headline --> <header id="header"> <div class="invoice-intro"> <div class="row"> <div class="col-sm-5"> <h5>Prepared for:</h5> <input type="text" id="customer_name" value="" class="form-control" placeholder="Customer Name"/> </div> <div class="col-sm-5"> <h5>Prepared by:</h5> <h4 class="preparedby"></h4> </div> <div class="col-sm-2"> <h5>Prepared on:</h5> <h4 class="preparedon"></h4> </div> </div> <!--<h2 class="medium m-t-0 m-b-5 text-primary">Skyi</h2> <p class="italic">Tagline comes here</p>--> </div> <div class="paymentDetails"> <div class="row"> <div class="col-sm-6"> <h5 >Total Cost:</h5> <h4><span class="actualcost" data-a-sign="Rs. " data-d-group="2"></span></h4> <input type="hidden" id="actualcostvalue" data-a-sign="Rs. " data-d-group="2" value="" /></div> <div class="col-sm-6"> <h5 >Amount Receivable as on Date:</h5> <h4><span class="rec" data-a-sign="Rs. " data-d-group="2"></span></h4> </div> </div> <div class="row"> <div class="col-sm-6"> <h5>Current Milestone:</h5> <h4> <span class="currentmile"></span></h4> </div> <div class="col-sm-6 form-inline"> <h5>Actual Payment:</h5> <input type="text" class="form-control"  id="payment" value="0"/> <span class="glyphicon glyphicon-plus discountToggle"></span> </div> </div> <div class="row"> <div class="col-sm-6 form-inline"> <h5>Payment Plan: </h5> <select id="paymentplans" class="form-control"> {{#paymentplans}} <option value="{{id}}">{{name}}</option> {{/paymentplans}} </select> </div> <div class="col-sm-6 form-inline"> <div class="discountBox"> <h5>Discount Type:</h5> <label class="checkbox-inline"> <input type="radio" class="radioClass" id="radio1"  checked name="discountradio" value="1"/> Value </label> <label class="checkbox-inline"> <input type="radio" class="radioClass" name="discountradio" value="2"/> Percentage </label> <br> <h5>Discount Amount:</h5> <input type="text" id="discountvalue" value="" class="numeric form-control" /> <input type="text" id="discountper" value="" class="numeric hidden form-control" /> <br> <h5>Add On Payment: </h5><h4><span class="addonpay" data-v-min="-9999999999999999.99"data-a-sign="Rs. " data-d-group="2"></span></h4> </div> </div> </div> </div> </header><!-- e: invoice header --> <section class="invoice-financials"> <div class="invoice-items"> <div id="costSheetTable"> </div> <!--<table id="costSheetTable"> <caption>Your Invoice</caption> <thead> <tr> <th>Item &amp; Description</th> <th>Quantity</th> <th>Price (GPL)</th> </tr> </thead> <tbody> </tbody> </table>--> </div> <div class="invoice-items"> <h4 class="text-primary">Payment Schedule</h4> <ul id="paymentTable"> </ul> </div><!-- e: invoice items --> </section><!-- e: invoice financials --> </div><!-- e: invoice --> </div> <div class="formPopup" style="display:none"> <div class="formIntro">I\'m interested in <br>Flat <span id="emailflatno"></span> in <span id="emailtower"></span></div> <div class="formFields"></div> </div><div class="inframamout hidden" data-a-sign="Rs. " data-d-group="2"></div>';

    ScreenFourLayout.prototype.regions = {
      unitRegion: '#unitblock-region',
      mainRegion: '#mainunit-region'
    };

    ScreenFourLayout.prototype.events = function() {
      return {
        'click .costsheetbutton': function(e) {
          $('.costsheetclass').bPopup({
            onClose: function() {
              $('.costsheetclass').empty();
              $('.costsheetclass').addClass('hidden');
              $('body').css({
                overflowY: 'auto',
                height: 'auto'
              });
            }
          });
          return $('body').css({
            overflowY: 'hidden',
            height: '100%'
          });
        },
        'click #emailBtn': function(e) {
          var building, unit;
          e.preventDefault();
          $('.formIntro').html("");
          unit = App.master.unit.findWhere({
            id: parseInt(App.unit['name'])
          });
          building = App.master.building.findWhere({
            id: parseInt(unit.get('building'))
          });
          $(".formFields").html(EMAILFORM);
          $('.formIntro').html('I\'m interested in <br>Flat <span id="emailflatno">' + unit.get('name') + '</span> in <span id="emailtower">' + building.get('name') + '</span></div>');
          $('.formPopup').bPopup();
          $('#field_emailunit').val(unit.get('name'));
          $('#field_emailtower').val(building.get('name'));
          $('#field_unitid').val(unit.get('id'));
          $('#field_towerid').val(building.get('id'));
          $('#field_wishlist').val(localStorage.getItem("cookievalue"));
        },
        'click #list': function(e) {
          var cart, cookieOldValue, imgclone, imgtodrag, key, myModal;
          myModal = new jBox('Notice', {
            content: '',
            autoClose: 2000,
            addClass: 'notifyBox',
            position: {
              x: 'center',
              y: 'top'
            },
            animation: {
              open: 'slide:top',
              close: 'slide:top'
            }
          });
          $("#showRightPush").removeClass("hidden");
          cookieOldValue = $.cookie("key");
          if (cookieOldValue === void 0 || $.cookie("key") === "") {
            cookieOldValue = "";
          } else {
            cookieOldValue = $.cookie("key").split(',').map(function(item) {
              return parseInt(item);
            });
          }
          if (cookieOldValue.length >= 4) {
            myModal.setContent("Cannot add more than 4 units");
            return false;
          } else {
            key = $.inArray(parseInt(App.unit['name']), cookieOldValue);
            if (parseInt(key) === -1) {
              App.cookieArray.push(parseInt(App.unit['name']));
              $('#list').addClass("remove");
            } else {
              myModal.setContent("Already entered");
              $('#list').removeClass("remove");
              return false;
            }
            App.cookieArray = $.merge(App.cookieArray, cookieOldValue);
            App.cookieArray = _.uniq(App.cookieArray);
            $.cookie('key', App.cookieArray);
            localStorage.setItem("cookievalue", App.cookieArray);
            myModal.setContent("The selected flat has been added to your WishList");
          }
          cart = $("#showRightPush");
          imgtodrag = $('.remove').find(".skyicon");
          if (imgtodrag) {
            imgclone = imgtodrag.clone().offset({
              top: imgtodrag.offset().top,
              left: imgtodrag.offset().left
            }).css({
              opacity: "0.8",
              position: "absolute",
              color: "#ff6600",
              "font-size": "30px",
              "z-index": "100"
            }).appendTo($("body")).animate({
              top: cart.offset().top + 10,
              left: cart.offset().left + 80,
              width: 50,
              height: 50
            }, 1200, "easeInOutCubic");
            imgclone.animate({
              width: 0,
              height: 0
            }, function() {
              $(this).detach();
            });
          }
          $('#list').removeClass("remove");
          return this.showWishList();
        },
        'click .del': function(e) {
          var body, index, menuRight, menuTop, showRightPush, showTop, val;
          val = $('#' + e.target.id).attr('data-id');
          index = App.cookieArray.indexOf(parseInt(val));
          App.cookieArray.splice(index, 1);
          if (App.cookieArray.length <= 1) {
            $('#compare').hide();
          }
          $.cookie('key', App.cookieArray);
          localStorage.setItem("cookievalue", App.cookieArray);
          if (App.cookieArray.length < 1) {
            $("#showRightPush").addClass("hidden");
            menuRight = document.getElementById("cbp-spmenu-s2");
            menuTop = document.getElementById("cbp-spmenu-s3");
            showTop = document.getElementById("showTop");
            showRightPush = document.getElementById("showRightPush");
            body = document.body;
            classie.toggle(showRightPush, "active");
            classie.toggle(body, "cbp-spmenu-push-toleft");
            classie.toggle(menuRight, "cbp-spmenu-open");
          }
          return this.showWishList();
        },
        'click a': function(e) {
          return e.preventDefault();
        },
        'click .selectedunit': function(e) {
          var body, buildingModel, floorriserange, i, menuRight, menuTop, rangeArrayVal, rangeModel, showRightPush, showTop, unitModel;
          menuRight = document.getElementById("cbp-spmenu-s2");
          menuTop = document.getElementById("cbp-spmenu-s3");
          showTop = document.getElementById("showTop");
          showRightPush = document.getElementById("showRightPush");
          body = document.body;
          classie.toggle(showRightPush, "active");
          classie.toggle(body, "cbp-spmenu-push-toleft");
          classie.toggle(menuRight, "cbp-spmenu-open");
          App.unit['name'] = $('#' + e.target.id).attr('data-id');
          App.unit['flag'] = 1;
          unitModel = App.master.unit.findWhere({
            id: parseInt($('#' + e.target.id).attr('data-id'))
          });
          App.defaults['unitType'] = unitModel.get('unitType');
          App.defaults['building'] = unitModel.get('building');
          rangeModel = App.master.range;
          App.backFilter['screen3'].push("floor");
          App.backFilter['screen2'].push("floor", "unitVariant");
          buildingModel = App.master.building.findWhere({
            id: unitModel.get('building')
          });
          floorriserange = buildingModel.get('floorriserange');
          rangeArrayVal = [];
          i = 0;
          object = this;
          $.each(floorriserange, function(index, value) {
            var end, start;
            start = parseInt(value.start);
            end = parseInt(value.end);
            while (parseInt(start) <= parseInt(end)) {
              rangeArrayVal[i] = start;
              start = parseInt(start) + 1;
              i++;
            }
            rangeArrayVal;
            if (jQuery.inArray(parseInt(unitModel.get('floor')), rangeArrayVal) >= 0) {
              return App.defaults['floor'] = rangeArrayVal.join(',');
            }
          });
          msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
          return msgbus.showApp('screen:four').insideRegion(App.layout.screenFourRegion).withOptions();
        }
      };
    };

    jQuery(document).bind("keyup keydown", function(e) {
      if (e.ctrlKey && e.keyCode === 80) {
        return this.loadPrint();
      }
    });

    ScreenFourLayout.prototype.loadPrint = function() {
      var building, image, indexvalue, indexvalue1, roomsizearray, roomtext, svgdata, temp, temp1, temp2, units;
      $("#flatno").text("");
      $("#towerno").text("");
      $("#unittypename").text("");
      $("#area").text("");
      $("#floorrise").text("");
      $('.room').html("");
      $('#terrace').text("");
      $('#printfacing').text("");
      $('#printview').text("");
      $("#twoDimage").attr('src', "");
      $("#zoomedinimage").attr('src', "");
      $("#floorlayoutbasic").text("");
      $('#printmapplic1').text("");
      $('#towerview').text("");
      units = App.master.unit.findWhere({
        id: parseInt(App.unit['name'])
      });
      $("#flatno").text(units.get('name'));
      $("#towerno").text(units.get('buildingname'));
      $("#unittypename").text(units.get('unittypename'));
      $("#area").text(units.get('sellablearea'));
      $("#floorrise").text(units.get('flooRange'));
      roomsizearray = units.get('roomsizearray');
      roomtext = "";
      $.each(roomsizearray, function(index, value) {
        return roomtext += '<div class="rooms"> <span>' + value.type + '</span>: ' + value.size + ' sq ft </div>';
      });
      $('.room').html(roomtext);
      $('#terrace').text(units.get('terraceoptions'));
      $('#printfacing').text(units.get('facings_name'));
      $('#printview').text(units.get('views_name'));
      image = document.getElementById('twoDimage');
      $("#twoDimage").attr('src', units.get('TwoDimage'));
      $("#zoomedinimage").attr('src', units.get('zoomedinimage'));
      $("#threeDimage").attr('src', units.get('ThreeDimage'));
      object = this;
      $("#floorlayoutbasic").load(units.get('floor_layout_basic'), function(x) {
        return $('#' + units.get('unitAssigned')).attr('class', 'floor-pos position');
      });
      $('#printmapplic1').load(SITEURL + '/wp-content/uploads/2014/08/first-map.svg', function(x) {
        return $('#hglighttower' + units.get('building')).attr('class', 'overlay highlight');
      });
      building = App.master.building.findWhere({
        id: units.get('building')
      });
      svgdata = building.get('svgdata');
      indexvalue = "";
      indexvalue1 = "";
      temp = ['ff', 'f'];
      temp1 = ['tt', 't'];
      temp2 = ['cc', 'cc'];
      if (parseInt(building.get('id')) === 11) {
        temp = ['f', 'ff'];
        temp1 = ['t', 'tt'];
        temp2 = ['c', 'cc'];
      }
      return $.each(svgdata, function(index, value) {
        var ii, svgposition, unitsarray;
        if ($.inArray(units.get('unitAssigned'), value.svgposition) >= 0 && value.svgposition !== null) {
          ii = 0;
          if (value.svgfile !== "") {
            svgposition = value.svgfile;
            unitsarray = value.units;
            return $('#towerview').load(svgposition, function(x) {
              var idvalue, position, text, textid, unittpe;
              value.svgposition.sort(function(a, b) {
                return b - a;
              });
              $.each(value.svgposition, function(index1, val1) {
                indexvalue = unitsarray[units.get('unitAssigned')];
                indexvalue1 = unitsarray[val1];
                $.map(indexvalue1, function(index, value) {
                  $('#' + temp[ii] + value).attr('class', 'unselected-floor');
                  $('#' + temp[ii] + value).attr('data-value', index);
                  return $('#' + temp[ii] + value).attr('data-idvalue', temp[ii]);
                });
                return ii++;
              });
              idvalue = "";
              position = "";
              $.each(indexvalue, function(index, value) {
                if (parseInt($('#f' + index).attr('data-value')) === units.get('id')) {
                  idvalue = $('#f' + index).attr('data-idvalue');
                  return position = index;
                } else if (parseInt($('#ff' + index).attr('data-value')) === units.get('id')) {
                  idvalue = $('#ff' + index).attr('data-idvalue');
                  return position = index;
                }
              });
              textid = "";
              $('#' + idvalue + position).attr('class', 'selected-flat');
              if (idvalue === 'f') {
                textid = 't';
              } else {
                textid = 'tt';
              }
              $("#" + textid + position).attr('class', 'selected-flat');
              unittpe = App.master.unit_type.findWhere({
                id: units.get('unitType')
              });
              text = units.get('name') + ' | ' + unittpe.get('name');
              $('#' + textid + position).html(text);
              return $('#' + textid + position).attr('x', '-30');
            });
          }
        }
      });
    };

    ScreenFourLayout.prototype.onShow = function() {
      var capability, cookieOldValue, costSheetArray, count, flag, usermodel;
      $(".discountToggle").click(function() {
        $(".discountBox").slideToggle();
      });
      usermodel = new Backbone.Model(USER);
      capability = usermodel.get('all_caps');
      if (usermodel.get('id') !== "0" && $.inArray('see_cost_sheet', capability) >= 0) {
        true;
      } else {
        $('.costsheetbutton').hide();
        $('.addtowishlist').hide();
        $('.special').hide();
      }
      $('#customer_name').on('change', function() {
        return $('#customerlabel').text(this.value);
      });
      $('.radioClass').on('click', function() {
        if (parseInt($('input[name=discountradio]:checked').val()) === 1) {
          $('#discountvalue').removeClass("hidden");
          $('#discountper').addClass("hidden");
          $('#discountper').val("");
          perFlag = 0;
          $('.discCol').removeClass('showDisc');
          $('.revised').hide();
          return $('.actualcost').text($('#actualcostvalue').val());
        } else {
          $('#discountvalue').addClass("hidden");
          $('#discountvalue').val("");
          $('#discountper').removeClass("hidden");
          perFlag = 0;
          $('.discCol').removeClass('showDisc');
          $('.revised').hide();
          return $('.actualcost').text($('#actualcostvalue').val());
        }
      });
      $('#discountvalue').on('change', function() {
        perFlag = 1;
        if (parseInt(this.value.length) === 0) {
          perFlag = 0;
          $('.discCol').removeClass('showDisc');
        }
        return object.generateCostSheet();
      });
      $('#discountper').on('change', function() {
        perFlag = 2;
        if (parseInt(this.value.length) === 0) {
          perFlag = 0;
          $('.discCol').removeClass('showDisc');
        }
        return object.generateCostSheet();
      });
      $('#payment').on('change', function() {
        return object.generateCostSheet();
      });
      $('#paymentplans').on('change', function() {
        var id;
        id = $('#' + this.id).val();
        return object.generatePaymentSchedule(id);
      });
      $('#infra').on('change', function() {
        infraid = $('#infra').val();
        return object.updated();
      });
      $('#infra1').on('change', function() {
        infraid = $('#infra1').val();
        return object.updated1();
      });
      $('.numeric').on('keypress', function(e) {
        var keyCode, ret;
        keyCode = e.keyCode;
        ret = (keyCode >= 48 && keyCode <= 57) || keyCode === 46;
        return ret;
      });
      $('html, body').delay(600).animate({
        scrollTop: $('#screen-four-region').offset().top
      }, 'slow');
      cookieOldValue = $.cookie("key");
      if (cookieOldValue === void 0 || $.cookie("key") === "") {
        cookieOldValue = [];
      } else {
        cookieOldValue = $.cookie("key").split(',').map(function(item) {
          return parseInt(item);
        });
      }
      App.cookieArray = cookieOldValue;
      this.showWishList();
      object = this;
      this.generateCostSheet();
      perFlag = "";
      costSheetArray = [];
      flag = 0;
      count = 0;
      discountClass = "";
      $('a.print-preview').printPreview();
      return this.loadPrint();
    };

    ScreenFourLayout.prototype.showWishList = function() {
      var building, element, model, selectedUnitsArray, table, unitType, unitVariant, _i, _len;
      table = "";
      if ($.cookie("key") !== void 0 && $.cookie("key") !== "") {
        selectedUnitsArray = $.cookie("key").split(",");
        if (selectedUnitsArray.length > 1) {
          $('#compare').show();
        }
        table = "";
        for (_i = 0, _len = selectedUnitsArray.length; _i < _len; _i++) {
          element = selectedUnitsArray[_i];
          model = App.master.unit.findWhere({
            id: parseInt(element)
          });
          unitType = App.master.unit_type.findWhere({
            id: model.get('unitType')
          });
          unitVariant = App.master.unit_variant.findWhere({
            id: model.get('unitVariant')
          });
          building = App.master.building.findWhere({
            id: model.get('building')
          });
          table += '<li> <a href="#" id="unit' + element + '" data-id="' + element + '"  class="selectedunit">' + model.get('name') + ' - ' + building.get('name') + '</a> <a href="#" class="del" id="' + element + '" data-id="' + element + '"  ></a> <div class="clearfix"></div> </li>';
        }
      }
      return $('#showWishlist').html(table);
    };

    ScreenFourLayout.prototype.onShowCostSheet = function(value) {
      var element, facingModel, facingModelArray, facingssArray, units, viewModel, viewModelArray, viewsArray, _i, _j, _len, _len1;
      units = App.master.unit.findWhere({
        id: parseInt(App.unit['name'])
      });
      viewModelArray = [];
      facingModelArray = [];
      units.set('views_name', value.views);
      if (value.views.length !== 0) {
        viewsArray = value.views;
        for (_i = 0, _len = viewsArray.length; _i < _len; _i++) {
          element = viewsArray[_i];
          viewModel = App.master.view.findWhere({
            id: parseInt(element)
          });
          viewModelArray.push(viewModel.get('name'));
        }
      } else {
        viewModelArray.push('-----');
      }
      $('.viewclass').text(viewModelArray.join(', '));
      facingssArray = value.facings;
      units.set('facing_name', value.facings);
      if (facingssArray.length !== 0) {
        for (_j = 0, _len1 = facingssArray.length; _j < _len1; _j++) {
          element = facingssArray[_j];
          facingModel = App.master.facings.findWhere({
            id: parseInt(element)
          });
          facingModelArray.push(facingModel.get('name'));
        }
      } else {
        facingModelArray.push('-----');
      }
      units = App.master.unit.findWhere({
        id: parseInt(App.unit['name'])
      });
      return $('.facingclass').text(facingModelArray.join(', '));
    };

    ScreenFourLayout.prototype.generateCostSheet = function() {
      var SettingModel, actualcost, addon, agreement, agreement1, basicCost, basicCost1, buildingModel, costSheetArray, count, date, discount, element, finalcost, finalcost1, finalvalue, finalvalue1, floorRise, floorRiseValue, id, id1, index, infraArray, infratxt, maintenance, membership_fees, membership_feesColl, membershipfees, milesotneVal, milestoneColl, milestoneCollection, milestonemodel, milestonename, milestones, milestonesArray, milestonesArrayColl, milestoneselectedValue, milstoneModelName, paymentColl, percentageValue, pervalue, planselectedValue, ratePerSqFtPrice, ratepersqftfloorval, reg_amt, reg_amt1, revisedhidden, revisedrate, sales_tax, sales_tax1, selected, servicetax, servicetax1, stamp_duty, stamp_duty1, table, table1, totalcost, totalcost1, uniVariantModel, unitModel, unitTypeMemeber, unitVariantMemeber, unitVariantMemeberColl, univariantmem, usermodel, vat, vat1, _i, _j, _len, _len1;
      $('#costSheetTable').text("");
      $('#costSheetTableprint').text("");
      costSheetArray = [];
      usermodel = new Backbone.Model(USER);
      $('.preparedby').text(usermodel.get('display_name'));
      date = new Date();
      $('.preparedon').text(date.getDate() + '/' + (parseInt(date.getMonth()) + 1) + '/' + date.getFullYear());
      unitModel = App.master.unit.findWhere({
        id: parseInt(App.unit['name'])
      });
      $('.flatno').text(unitModel.get('name'));
      uniVariantModel = App.master.unit_variant.findWhere({
        id: unitModel.get('unitVariant')
      });
      costSheetArray.push(uniVariantModel.get('sellablearea'));
      costSheetArray.push(unitModel.get('persqftprice'));
      revisedhidden = 'hidden';
      discount = 0;
      buildingModel = App.master.building.findWhere({
        id: unitModel.get('building')
      });
      floorRise = buildingModel.get('floorrise');
      floorRiseValue = floorRise[unitModel.get('floor')];
      discountClass = '';
      ratePerSqFtPrice = parseFloat(costSheetArray[1]) + parseFloat(floorRiseValue);
      if (perFlag === 1) {
        revisedhidden = "";
        discount = parseFloat($('#discountvalue').val());
        discountClass = 'showDisc';
      } else if (perFlag === 2) {
        revisedhidden = "";
        pervalue = parseFloat($('#discountper').val()) / 100;
        discount = parseFloat(ratePerSqFtPrice) * parseFloat(pervalue);
        discountClass = 'showDisc';
      }
      if (parseInt($('#discountper').val().length) === 0 && parseInt($('#discountvalue').val().length) === 0) {
        discountClass = '';
      }
      revisedrate = parseFloat(ratePerSqFtPrice) - (parseFloat(discount));
      costSheetArray.push(revisedrate);
      basicCost = parseFloat(uniVariantModel.get('sellablearea')) * parseFloat(revisedrate);
      costSheetArray.push(basicCost);
      costSheetArray.push(discount);
      table = "";
      table1 = "";
      $('.building').text(buildingModel.get('name'));
      planselectedValue = buildingModel.get('payment_plan');
      milestoneselectedValue = buildingModel.get('milestone');
      $("#paymentplans option[value=" + planselectedValue + "]").prop('selected', true);
      id1 = $('#paymentplans').val();
      paymentColl = new Backbone.Collection(PAYMENTPLANS);
      milestones = paymentColl.get(parseInt($('#paymentplans').val()));
      $('.paymentplan').text(milestones.get('name'));
      maintenance = parseFloat(uniVariantModel.get('sellablearea')) * 100;
      SettingModel = new Backbone.Model(SETTINGS);
      infraArray = SettingModel.get('infrastructure_charges');
      membership_fees = SettingModel.get('membership_fees');
      membership_feesColl = new Backbone.Collection(membership_fees);
      unitTypeMemeber = membership_feesColl.findWhere({
        unit_type: parseInt(unitModel.get('unitType'))
      });
      if (unitTypeMemeber.get('membership_fees') === 0) {
        unitVariantMemeber = unitTypeMemeber.get('unit_variant');
        unitVariantMemeberColl = new Backbone.Collection(unitVariantMemeber);
        univariantmem = unitVariantMemeberColl.findWhere({
          unit_variant: parseInt(unitModel.get('unitVariant'))
        });
        membershipfees = univariantmem.get('membership_fees');
      } else {
        membershipfees = unitTypeMemeber.get('membership_fees');
      }
      infratxt = '';
      for (index = _i = 0, _len = infraArray.length; _i < _len; index = ++_i) {
        element = infraArray[index];
        $('.inframamout').autoNumeric('init');
        $('.inframamout').autoNumeric('set', element);
        selected = "";
        if (parseInt(element) === infraid) {
          selected = "selected";
        } else {
          selected = "";
        }
        infratxt += '<option  value="' + element + '" ' + selected + '>' + $('.inframamout').text() + '</option>';
      }
      $('#rec').text("");
      $('.rec').text("");
      ratepersqftfloorval = parseFloat(costSheetArray[1]) + parseFloat(floorRiseValue);
      basicCost1 = parseFloat(costSheetArray[0]) * parseFloat(ratepersqftfloorval);
      table += '<div class="costsRow totals title"> <div class="costCell costName">Cost Type</div> <div class="costCell discCol ' + discountClass + '">Discounted Rate</div> <div class="costCell">Base Rate</div> </div> <h5 class="headers skyiCost"><span class="cost-office"></span> Skyi Costs</h5> <div class="skyiCostDtls costDtls"> <div class="panel-body"> Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunc. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably ccusamus labore sustainable VHS. </div> </div> <div class="costsRow"> <div class="costCell costName">Total Area (Sq.Ft.)</div> <div class="costCell discCol ' + discountClass + '">' + costSheetArray[0] + '</div> <div class="costCell">' + costSheetArray[0] + '</div> </div> <div class="costsRow"> <div class="costCell costName">Floor Rise</div> <div class="costCell discCol ' + discountClass + ' floorrise" data-a-sign="Rs. " data-d-group="2">' + floorRiseValue + '</div> <div class="costCell floorrise" data-a-sign="Rs. " data-d-group="2">' + floorRiseValue + '</div> </div> <div class="costsRow"> <div class="costCell costName">Rate per Sq.Ft.</div> <div class="costCell discCol ' + discountClass + ' ratepersqft" data-a-sign="Rs. " data-d-group="2">' + costSheetArray[1] + '</div> <div class="costCell ratepersqft" data-a-sign="Rs. " data-d-group="2">' + costSheetArray[1] + '</div> </div> <div class="costsRow"> <div class="costCell costName">Rate per Sq.Ft. with Floorrise</div> <div class="costCell discCol ' + discountClass + ' ratepersqftfloor1" data-a-sign="Rs. " data-d-group="2">' + revisedrate + '</div> <div class="costCell ratepersqftfloor" data-a-sign="Rs. " data-d-group="2">' + ratepersqftfloorval + '</div> </div> <!--<div class="costsRow revised ' + revisedhidden + ' "> <div class="costCell costName">Revised Rate</div> <div class="costCell discCol ' + discountClass + ' revisedrate" data-a-sign="Rs. " data-d-group="2">' + costSheetArray[2] + '</div> <div class="costCell ">--</div> </div>--> <div class="costsRow"> <div class="costCell costName">Basic Cost</div> <div class="costCell discCol ' + discountClass + ' basicCost" data-a-sign="Rs. " data-d-group="2">' + basicCost + '</div> <div class="costCell basicCost1" data-a-sign="Rs. " data-d-group="2">' + basicCost1 + '</div> </div> <div class="costsRow"> <div class="costCell costName">Infrastructure and Development Charges</div> <div class="costCell discCol ' + discountClass + '"><select id="infra"></select></div> <div class="costCell"><select id="infra1"></select></div> </div>';
      table1 += '<div class="costsRow totals title"> <div class="costCell costName">Cost Type</div> <div class="costCell discCol ' + discountClass + ' ">Discounted Rate <span class="cost-uniE600"></span></div> <div class="costCell">Base Rate <span class="cost-uniE600"></span></div> </div> <h5 class="headers"><span class="cost-office"></span> Skyi Costs</h5> <div class="costsRow"> <div class="costCell costName">Chargeable Area (Sq.Ft.)</div> <div class="costCell discCol ' + discountClass + ' ">' + costSheetArray[0] + '</div> <div class="costCell">' + costSheetArray[0] + '</div> </div> <div class="costsRow"> <div class="costCell costName" >Floor Rise</div> <div class="costCell discCol ' + discountClass + ' floorrise" data-a-sign="Rs. " data-d-group="2">' + floorRiseValue + '</div> <div class="costCell floorrise" data-a-sign="Rs. " data-d-group="2">' + floorRiseValue + '</div> </div> <div class="costsRow"> <div class="costCell costName">Rate per Sq.Ft.</div> <div class="costCell discCol ' + discountClass + ' ratepersqft" data-a-sign="Rs. " data-d-group="2">' + costSheetArray[1] + '</div> <div class="costCell ratepersqft" data-a-sign="Rs. " data-d-group="2">' + costSheetArray[1] + '</div> </div> <div class="costsRow"> <div class="costCell costName">Rate per Sq.Ft. with Floorrise</div> <div class="costCell discCol ' + discountClass + ' ratepersqftfloor1" data-a-sign="Rs. " data-d-group="2">' + revisedrate + '</div> <div class="costCell ratepersqftfloor" data-a-sign="Rs. " data-d-group="2">' + ratepersqftfloorval + '</div> </div> <!--<div class="costsRow revised ' + revisedhidden + '"> <div class="costCell costName">Revised Rate</div> <div class="costCell discCol ' + discountClass + ' revisedrate" data-a-sign="Rs. " data-d-group="2">' + costSheetArray[2] + '</div> <div class="costCell ">--</div> </div>--> <div class="costsRow"> <div class="costCell costName">Basic Cost</div> <div class="costCell discCol ' + discountClass + ' basicCost" data-a-sign="Rs. " data-d-group="2">' + basicCost + '</div> <div class="costCell basicCost1" data-a-sign="Rs. " data-d-group="2">' + basicCost1 + '</div> </div> <div class="costsRow"> <div class="costCell costName">Infrastructure and Developement Charges</div> <div class="costCell discCol ' + discountClass + ' infra" data-a-sign="Rs. " data-d-group="2">' + infraid + '</div> <div class="costCell infra1" data-a-sign="Rs. " data-d-group="2">' + infraid + '</div> </div>';
      $('#costSheetTable').append(table);
      $('#costSheetTableprint').append(table1);
      $('#infra').append(infratxt);
      $('#infra1').append(infratxt);
      $('.ratepersqft').autoNumeric('init');
      $('.ratepersqft').autoNumeric('set', costSheetArray[1]);
      $('.revisedrate').autoNumeric('init');
      $('.revisedrate').autoNumeric('set', costSheetArray[2]);
      $('.basicCost1').autoNumeric('init');
      $('.basicCost1').autoNumeric('set', basicCost1);
      $('.basicCost').autoNumeric('init');
      $('.basicCost').autoNumeric('set', basicCost);
      $('.addonpay').autoNumeric('init');
      $('.floorrise').autoNumeric('init');
      $('.floorrise').autoNumeric('set', floorRiseValue);
      $('.ratepersqftfloor').autoNumeric('init');
      $('.ratepersqftfloor').autoNumeric('set', ratepersqftfloorval);
      $('.ratepersqftfloor1').autoNumeric('init');
      $('.ratepersqftfloor1').autoNumeric('set', revisedrate);
      table = "";
      agreement1 = parseFloat(basicCost1) + parseFloat($('#infra1').val());
      agreementValue1 = agreement1;
      agreement = parseFloat(basicCost) + parseFloat($('#infra').val());
      agreementValue = agreement;
      if (parseFloat(agreement) > 10000000.00) {
        servicetax = SettingModel.get('service_tax_agval_ab1');
      } else {
        servicetax = SettingModel.get('service_tax');
      }
      if (parseFloat(agreement1) > 10000000.00) {
        servicetax1 = SettingModel.get('service_tax_agval_ab1');
      } else {
        servicetax1 = SettingModel.get('service_tax');
      }
      stamp_duty = parseFloat(agreement) * (parseFloat(SettingModel.get('stamp_duty')) / 100);
      stamp_duty = (Math.round(stamp_duty * 100) / 100) + 100;
      reg_amt = parseFloat(SettingModel.get('registration_amount'));
      vat = parseFloat(agreement) * (parseFloat(SettingModel.get('vat')) / 100);
      sales_tax = parseFloat(agreement) * (parseFloat(servicetax) / 100);
      stamp_duty1 = parseFloat(agreement1) * (parseFloat(SettingModel.get('stamp_duty')) / 100);
      stamp_duty1 = (Math.round(stamp_duty1 * 100) / 100) + 100;
      reg_amt1 = parseFloat(SettingModel.get('registration_amount'));
      vat1 = parseFloat(agreement1) * (parseFloat(SettingModel.get('vat')) / 100);
      sales_tax1 = parseFloat(agreement1) * (parseFloat(servicetax1) / 100);
      totalcost1 = parseFloat(stamp_duty1) + parseFloat(reg_amt1) + parseFloat(vat1) + parseFloat(sales_tax1);
      finalcost1 = parseFloat(maintenance) + parseFloat(membershipfees);
      paymentColl = new Backbone.Collection(PAYMENTPLANS);
      milestones = paymentColl.get(parseInt($('#paymentplans').val()));
      milestonesArray = milestones.get('milestones');
      milestonesArrayColl = new Backbone.Collection(milestonesArray);
      milestonemodel = milestonesArrayColl.findWhere({
        'milestone': parseInt(buildingModel.get('milestone'))
      });
      milestonesArray = milestonesArray.sort(function(a, b) {
        return parseInt(a.sort_index) - parseInt(b.sort_index);
      });
      milestoneCollection = new Backbone.Collection(MILESTONES);
      if (milestonemodel === void 0) {
        milesotneVal = _.first(milestonesArray);
        milestonemodel = milestonesArrayColl.findWhere({
          'milestone': parseInt(milesotneVal.milestone)
        });
        milestonename = milestoneCollection.get(parseInt(milestonemodel.get('milestone')));
        $('.currentmile').text(milestonename.get('name'));
      } else {
        milstoneModelName = milestoneCollection.get(milestonemodel.get('milestone'));
        $('.currentmile').text(milstoneModelName.get('name'));
      }
      milestoneColl = new Backbone.Collection(MILESTONES);
      count = 0;
      for (_j = 0, _len1 = milestonesArray.length; _j < _len1; _j++) {
        element = milestonesArray[_j];
        if (element.sort_index <= milestonemodel.get('sort_index')) {
          percentageValue = agreement * ((parseFloat(element.payment_percentage)) / 100);
          count = count + percentageValue;
        }
      }
      if (parseInt($('#payment').val()) === 0) {
        addon = 0;
      } else {
        addon = parseFloat($('#payment').val()) - parseFloat(count);
      }
      totalcost = parseFloat(stamp_duty) + parseFloat(reg_amt) + parseFloat(vat) + parseFloat(sales_tax);
      finalcost = parseFloat(maintenance) + parseFloat(membershipfees);
      $('.totalcost').text(totalcost);
      finalvalue = parseFloat(totalcost) + parseFloat(finalcost) + parseFloat(agreement);
      finalvalue1 = parseFloat(totalcost1) + parseFloat(finalcost1) + parseFloat(agreement1);
      if (discountClass === "") {
        actualcost = finalvalue1;
        $('#actualcostvalue').autoNumeric('init');
        $('#actualcostvalue').autoNumeric('set', finalvalue1);
      } else {
        actualcost = finalvalue;
      }
      table += '  <div class="costsRow totals"> <div class="costCell costName">Agreement Amount</div> <div class="costCell discCol ' + discountClass + ' agreement"  data-a-sign="Rs. " data-d-group="2">' + agreement + '</div> <div class="costCell agreement1"  data-a-sign="Rs. " data-d-group="2">' + agreement1 + '</div> </div> <h5 class="headers govChrg"><span class="cost-library"></span> Government Charges</h5> <div class="govChrgDtls costDtls"> <div class="panel-body"> Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunc. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably ccusamus labore sustainable VHS. </div> </div> <div class="costsRow"> <div class="costCell costName">Stamp Duty</div> <div class="costCell discCol ' + discountClass + ' stamp_duty" data-a-sign="Rs. " data-d-group="2">' + stamp_duty + '</div> <div class="costCell stamp_duty1" data-a-sign="Rs. " data-d-group="2">' + stamp_duty1 + '</div> </div> <div class="costsRow"> <div class="costCell costName">Registration Amount</div> <div class="costCell discCol ' + discountClass + ' reg_amt" data-a-sign="Rs. " data-d-group="2">' + reg_amt + '</div> <div class="costCell reg_amt1" data-a-sign="Rs. " data-d-group="2">' + reg_amt1 + '</div> </div> <div class="costsRow"> <div class="costCell costName">VAT</div> <div class="costCell vat1" data-a-sign="Rs. " data-d-group="2">' + vat1 + '</div> <div class="costCell discCol vat ' + discountClass + '" data-a-sign="Rs. " data-d-group="2">' + vat + '</div> </div> <div class="costsRow"> <div class="costCell costName">Service Tax</div> <div class="costCell discCol ' + discountClass + ' sales_tax" data-a-sign="Rs. " data-d-group="2">' + sales_tax + '</div> <div class="costCell sales_tax1" data-a-sign="Rs. " data-d-group="2">' + sales_tax1 + '</div> </div> <div class="costsRow totals"> <div class="costCell costName">Total Goverment Charges</div> <div class="costCell discCol ' + discountClass + ' totalcost" data-a-sign="Rs. " data-d-group="2">' + totalcost + '</div> <div class="costCell totalcost1" data-a-sign="Rs. " data-d-group="2">' + totalcost1 + '</div> </div> <h5 class="headers othrCost"><span class="cost-paint-format"></span> Other Costs</h5> <div class="othrCostDtls costDtls"> <div class="panel-body"> Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunc. Food truck quinoa nesciunt laborum eiusmod. Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim aesthetic synth nesciunt you probably ccusamus labore sustainable VHS. </div> </div> <div class="costsRow"> <div class="costCell costName">Maintenance Deposit</div> <div class="costCell discCol ' + discountClass + ' maintenance" data-a-sign="Rs. " data-d-group="2">' + maintenance + '</div> <div class="costCell maintenance" data-a-sign="Rs. " data-d-group="2">' + maintenance + '</div> </div> <div class="costsRow"> <div class="costCell costName">Club membership + Service Tax</div> <div class="costCell discCol ' + discountClass + ' membershipfees" data-a-sign="Rs. " data-d-group="2">' + membershipfees + '</div> <div class="costCell membershipfees" data-a-sign="Rs. " data-d-group="2">' + membershipfees + '</div> </div> <div class="costsRow totals"> <div class="costCell costName">Total Maintenance Cost</div> <div class="costCell discCol ' + discountClass + ' finalcost" data-a-sign="Rs. " data-d-group="2">' + finalcost + '</div> <div class="costCell finalcost1" data-a-sign="Rs. " data-d-group="2">' + finalcost1 + '</div> </div> <div class="costsRow totals final"> <div class="costCell costName">Final Cost</div> <div class="costCell discCol ' + discountClass + ' finalvalue" data-a-sign="Rs. " data-d-group="2">' + finalvalue + '</div> <div class="costCell finalvalue1" data-a-sign="Rs. " data-d-group="2">' + finalvalue1 + '</div> </div>';
      $('#costSheetTable').append(table);
      $('#costSheetTableprint').append(table);
      $('.agreement1').autoNumeric('init');
      $('.agreement1').autoNumeric('set', agreement1);
      $('.agreement').autoNumeric('init');
      $('.agreement').autoNumeric('set', agreement);
      $('.stamp_duty1').autoNumeric('init');
      $('.stamp_duty1').autoNumeric('set', stamp_duty1);
      $('.stamp_duty').autoNumeric('init');
      $('.stamp_duty').autoNumeric('set', stamp_duty);
      $('.reg_amt').autoNumeric('init');
      $('.reg_amt').autoNumeric('set', reg_amt);
      $('.reg_amt1').autoNumeric('init');
      $('.reg_amt1').autoNumeric('set', reg_amt1);
      $('.vat').autoNumeric('init');
      $('.vat').autoNumeric('set', vat);
      $('.vat1').autoNumeric('init');
      $('.vat1').autoNumeric('set', vat1);
      $('.vat').autoNumeric('init');
      $('.vat').autoNumeric('set', vat);
      $('.sales_tax1').autoNumeric('init');
      $('.sales_tax1').autoNumeric('set', sales_tax1);
      $('.sales_tax').autoNumeric('init');
      $('.sales_tax').autoNumeric('set', sales_tax);
      $('.totalcost1').autoNumeric('init');
      $('.totalcost1').autoNumeric('set', totalcost1);
      $('.totalcost').autoNumeric('init');
      $('.totalcost').autoNumeric('set', totalcost);
      $('.maintenance').autoNumeric('init');
      $('.maintenance').autoNumeric('set', maintenance);
      $('.membershipfees').autoNumeric('init');
      $('.membershipfees').autoNumeric('set', membershipfees);
      $('.finalcost').autoNumeric('init');
      $('.finalcost').autoNumeric('set', finalcost);
      $('.finalcost1').autoNumeric('init');
      $('.finalcost1').autoNumeric('set', finalcost1);
      $('.infra1').autoNumeric('init');
      $('.infra1').autoNumeric('set', $('#infra1').val());
      $('.infra').autoNumeric('init');
      $('.infra').autoNumeric('set', $('#infra').val());
      $('.finalvalue1').autoNumeric('init');
      $('.finalvalue1').autoNumeric('set', finalvalue1);
      $('.finalvalue').autoNumeric('init');
      $('.finalvalue').autoNumeric('set', finalvalue);
      $('.actualcost').autoNumeric('init');
      $('.actualcost').autoNumeric('set', actualcost);
      id = $('#paymentplans').val();
      object.generatePaymentSchedule(id);
      $('#infra').on('change', function() {
        infraid = $('#infra').val();
        return object.updated();
      });
      $('#infra1').on('change', function() {
        infraid = $('#infra1').val();
        return object.updated1();
      });
      $('#discountvalue').on('change', function() {
        perFlag = 1;
        if (parseInt(this.value.length) === 0) {
          perFlag = 0;
        }
        return object.generateCostSheet();
      });
      $('#discountper').on('change', function() {
        perFlag = 2;
        if (parseInt(this.value.length) === 0) {
          perFlag = 0;
        }
        return object.generateCostSheet();
      });
      $('#payment').on('change', function() {
        return object.generateCostSheet();
      });
      $('#paymentplans').on('change', function() {
        id = $('#' + this.id).val();
        return object.generatePaymentSchedule(id);
      });
      $(".skyiCost").click(function() {
        $(".skyiCostDtls").slideToggle();
      });
      $(".govChrg").click(function() {
        $(".govChrgDtls").slideToggle();
      });
      return $(".othrCost").click(function() {
        $(".othrCostDtls").slideToggle();
      });
    };

    ScreenFourLayout.prototype.generatePaymentSchedule = function(id) {
      var addon, amtalue, buildingModel, count, element, flag, index, milesotneVal, milestoneColl, milestoneCollection, milestoneModel, milestonecompletion, milestonemodel, milestonename, milestones, milestonesArray, milestonesArrayColl, milstoneModelName, paymentColl, percentageValue, percentageValue1, proposed_date, reccount, recount, table, trClass, unitModel, _i, _j, _len, _len1, _results;
      flag = 0;
      $('#rec').text("");
      $('.rec').text("");
      unitModel = App.master.unit.findWhere({
        id: parseInt(App.unit['name'])
      });
      buildingModel = App.master.building.findWhere({
        id: unitModel.get('building')
      });
      milestonecompletion = buildingModel.get('milestonecompletion');
      $('#paymentTable').text("");
      paymentColl = new Backbone.Collection(PAYMENTPLANS);
      milestones = paymentColl.get(parseInt(id));
      milestonesArray = milestones.get('milestones');
      $('.paymentplan').text(milestones.get('name'));
      milestonesArrayColl = new Backbone.Collection(milestonesArray);
      milestonemodel = milestonesArrayColl.findWhere({
        'milestone': parseInt(buildingModel.get('milestone'))
      });
      milestonesArray = milestonesArray.sort(function(a, b) {
        return parseInt(a.sort_index) - parseInt(b.sort_index);
      });
      milestoneCollection = new Backbone.Collection(MILESTONES);
      if (milestonemodel === void 0) {
        flag = 1;
        milesotneVal = _.first(milestonesArray);
        milestonemodel = milestonesArrayColl.findWhere({
          'milestone': parseInt(milesotneVal.milestone)
        });
        milestonename = milestoneCollection.get(parseInt(milestonemodel.get('milestone')));
        $('.currentmile').text(milestonename.get('name'));
      } else {
        milstoneModelName = milestoneCollection.get(milestonemodel.get('milestone'));
        $('.currentmile').text(milstoneModelName.get('name'));
      }
      table = "";
      count = 0;
      milestoneColl = new Backbone.Collection(MILESTONES);
      for (index = _i = 0, _len = milestonesArray.length; _i < _len; index = ++_i) {
        element = milestonesArray[index];
        percentageValue = agreementValue * ((parseFloat(element.payment_percentage)) / 100);
        percentageValue1 = agreementValue1 * ((parseFloat(element.payment_percentage)) / 100);
        proposed_date = $.map(milestonecompletion, function(index, value) {
          if (parseInt(element.milestone) === parseInt(value)) {
            return index;
          }
        });
        if (proposed_date.length === 0) {
          proposed_date = '';
        }
        if (element.sort_index <= milestonemodel.get('sort_index')) {
          trClass = "milestoneReached";
          percentageValue = parseFloat(agreementValue) * ((parseFloat(element.payment_percentage)) / 100);
          percentageValue1 = agreementValue1 * ((parseFloat(element.payment_percentage)) / 100);
          if (discountClass === "") {
            amtalue = percentageValue1;
          } else {
            amtalue = percentageValue;
          }
          count = count + amtalue;
        } else {
          trClass = "";
        }
        if (flag === 1) {
          trClass = "";
        }
        $('.percentageValue1').autoNumeric('init');
        $('.percentageValue').autoNumeric('init');
        milestoneModel = milestoneColl.get(element.milestone);
        table += '  <span class="msPercent">' + element.payment_percentage + '%</span> <li class="milestoneList ' + trClass + '"> <div class="msName">' + milestoneModel.get('name') + ' <span class="completionDate">(Estimated date: ' + proposed_date + ')</span></div> <div class="msVal discCol ' + discountClass + ' percentageValue' + index + '" data-a-sign="Rs. " data-d-group="2"></div> <div class="msVal percentageValue1' + index + '" data-a-sign="Rs. " data-d-group="2"></div> <span class="barBg" style="width:' + element.payment_percentage + '%"></span> </li> <div class="clearfix"></div>';
      }
      $('.rec').autoNumeric('init');
      recount = $('.rec').autoNumeric('set', count);
      reccount = recount.text();
      if (parseInt($('#payment').val()) === 0) {
        addon = 0;
      } else {
        addon = $('#payment').val() - count;
      }
      $('.actpayment').autoNumeric('init');
      $('.actpayment').autoNumeric('set', $('#payment').val());
      $('.addonpay').autoNumeric('init');
      $('.addonpay').autoNumeric('set', addon);
      $('#paymentTable').append(table);
      _results = [];
      for (index = _j = 0, _len1 = milestonesArray.length; _j < _len1; index = ++_j) {
        element = milestonesArray[index];
        percentageValue = parseFloat(agreementValue) * ((parseFloat(element.payment_percentage)) / 100);
        percentageValue1 = parseFloat(agreementValue1) * ((parseFloat(element.payment_percentage)) / 100);
        $('.percentageValue' + index).autoNumeric('init');
        $('.percentageValue' + index).autoNumeric('set', percentageValue);
        $('.percentageValue1' + index).autoNumeric('init');
        _results.push($('.percentageValue1' + index).autoNumeric('set', percentageValue1));
      }
      return _results;
    };

    ScreenFourLayout.prototype.getMilestones = function(id) {
      var element, milesstones, milestoneColl, milestoneModel, milestones, milestonesArray, paymentColl, _i, _len;
      milesstones = '';
      $('#milestones option').remove();
      paymentColl = new Backbone.Collection(PAYMENTPLANS);
      milestones = paymentColl.get(parseInt(id));
      $('.paymentplan').text(milestones.get('name'));
      milestonesArray = milestones.get('milestones');
      milestonesArray = milestonesArray.sort(function(a, b) {
        return parseInt(a.sort_index) - parseInt(b.sort_index);
      });
      milestoneColl = new Backbone.Collection(MILESTONES);
      for (_i = 0, _len = milestonesArray.length; _i < _len; _i++) {
        element = milestonesArray[_i];
        milestoneModel = milestoneColl.get(element.milestone);
        milesstones += '<option value="' + element.milestone + '">' + milestoneModel.get('name') + '</option>';
      }
      return $('#milestones').append(milesstones);
    };

    ScreenFourLayout.prototype.updated = function() {
      var SettingModel, addon, agreement, agreement1, basicCost, basicCost1, buildingModel, costSheetArray, count, discount, element, finalcost, finalcost1, finalvalue, floorRise, floorRiseValue, id1, infraArray, maintenance, membership_fees, membership_feesColl, membershipfees, milesotneVal, milestoneColl, milestonemodel, milestones, milestonesArray, milestonesArrayColl, milestoneselectedValue, paymentColl, percentageValue, pervalue, planselectedValue, ratePerSqFtPrice, reg_amt, reg_amt1, revisedhidden, revisedrate, sales_tax, sales_tax1, stamp_duty, stamp_duty1, table, totalcost, totalcost1, uniVariantModel, unitModel, unitTypeMemeber, unitVariantMemeber, unitVariantMemeberColl, univariantmem, vat, vat1, _i, _len;
      $('.infra1').autoNumeric('init');
      $('.infra1').autoNumeric('set', $('#infra1').val());
      $('.infra').autoNumeric('init');
      $('.infra').autoNumeric('set', $('#infra').val());
      costSheetArray = [];
      unitModel = App.master.unit.findWhere({
        id: parseInt(App.unit['name'])
      });
      uniVariantModel = App.master.unit_variant.findWhere({
        id: unitModel.get('unitVariant')
      });
      costSheetArray.push(uniVariantModel.get('sellablearea'));
      costSheetArray.push(unitModel.get('persqftprice'));
      buildingModel = App.master.building.findWhere({
        id: unitModel.get('building')
      });
      floorRise = buildingModel.get('floorrise');
      floorRiseValue = floorRise[unitModel.get('floor')];
      discount = 0;
      ratePerSqFtPrice = parseFloat(costSheetArray[1]) + parseFloat(floorRiseValue);
      if (perFlag === 1) {
        revisedhidden = "";
        discount = parseFloat($('#discountvalue').val());
      } else if (perFlag === 2) {
        revisedhidden = "";
        pervalue = parseFloat($('#discountper').val()) / 100;
        discount = parseFloat(ratePerSqFtPrice) * parseFloat(pervalue);
      }
      revisedrate = parseFloat(ratePerSqFtPrice) - (parseFloat(discount));
      costSheetArray.push(revisedrate);
      basicCost = parseFloat(uniVariantModel.get('sellablearea')) * parseFloat(revisedrate);
      costSheetArray.push(basicCost);
      costSheetArray.push(discount);
      table = "";
      buildingModel = App.master.building.findWhere({
        id: unitModel.get('building')
      });
      planselectedValue = buildingModel.get('payment_plan');
      milestoneselectedValue = buildingModel.get('milestone');
      $("#paymentplans option[value=" + planselectedValue + "]").prop('selected', true);
      $("#milestones option[value=" + milestoneselectedValue + "]").prop('selected', true);
      id1 = $('#paymentplans').val();
      maintenance = parseFloat(uniVariantModel.get('sellablearea')) * 100;
      SettingModel = new Backbone.Model(SETTINGS);
      stamp_duty = (basicCost * (parseFloat(SettingModel.get('stamp_duty')) / 100)) + 110;
      reg_amt = parseFloat(SettingModel.get('registration_amount'));
      vat = basicCost * (parseFloat(SettingModel.get('vat')) / 100);
      sales_tax = basicCost * (parseFloat(SettingModel.get('sales_tax')) / 100);
      infraArray = SettingModel.get('infrastructure_charges');
      membership_fees = SettingModel.get('membership_fees');
      membership_feesColl = new Backbone.Collection(membership_fees);
      unitTypeMemeber = membership_feesColl.findWhere({
        unit_type: parseInt(unitModel.get('unitType'))
      });
      if (unitTypeMemeber.get('membership_fees') === 0) {
        unitVariantMemeber = unitTypeMemeber.get('unit_variant');
        unitVariantMemeberColl = new Backbone.Collection(unitVariantMemeber);
        univariantmem = unitVariantMemeberColl.findWhere({
          unit_variant: parseInt(unitModel.get('unitVariant'))
        });
        membershipfees = univariantmem.get('membership_fees');
      } else {
        membershipfees = unitTypeMemeber.get('membership_fees');
      }
      table = "";
      basicCost1 = costSheetArray[0] * costSheetArray[1];
      agreement1 = parseFloat(basicCost1) + parseFloat($('#infra').val());
      agreementValue1 = agreement1;
      agreement = parseFloat(basicCost) + parseFloat($('#infra').val());
      agreementValue = agreement;
      $('.agreement').autoNumeric('init');
      $('.agreement').autoNumeric('set', agreement);
      stamp_duty1 = (basicCost1 * (parseFloat(SettingModel.get('stamp_duty')) / 100)) + 110;
      reg_amt1 = parseFloat(SettingModel.get('registration_amount'));
      vat1 = basicCost1 * (parseFloat(SettingModel.get('vat')) / 100);
      sales_tax1 = basicCost1 * (parseFloat(SettingModel.get('sales_tax')) / 100);
      totalcost1 = parseFloat(stamp_duty1) + parseFloat(reg_amt1) + parseFloat(vat1) + parseFloat(sales_tax1);
      finalcost1 = parseFloat(maintenance) + parseFloat(membershipfees);
      paymentColl = new Backbone.Collection(PAYMENTPLANS);
      milestones = paymentColl.get(parseInt($('#paymentplans').val()));
      milestonesArray = milestones.get('milestones');
      milestonesArrayColl = new Backbone.Collection(milestonesArray);
      milestonemodel = milestonesArrayColl.findWhere({
        'milestone': parseInt(buildingModel.get('milestone'))
      });
      milestonesArray = milestonesArray.sort(function(a, b) {
        return parseInt(a.sort_index) - parseInt(b.sort_index);
      });
      if (milestonemodel === void 0) {
        milesotneVal = _.first(milestonesArray);
        milestonemodel = milestonesArrayColl.findWhere({
          'milestone': parseInt(milesotneVal.milestone)
        });
      }
      milestoneColl = new Backbone.Collection(MILESTONES);
      count = 0;
      for (_i = 0, _len = milestonesArray.length; _i < _len; _i++) {
        element = milestonesArray[_i];
        if (element.sort_index <= milestonemodel.get('sort_index')) {
          percentageValue = agreement * ((parseFloat(element.payment_percentage)) / 100);
          count = count + percentageValue;
        }
      }
      addon = parseFloat($('#payment').val()) - parseFloat(count);
      totalcost = parseFloat(stamp_duty) + parseFloat(reg_amt) + parseFloat(vat) + parseFloat(sales_tax);
      finalcost = parseFloat(maintenance) + parseFloat(membershipfees);
      finalvalue = parseFloat(totalcost) + parseFloat(finalcost) + parseFloat(agreement);
      $('.totalcost').autoNumeric('init');
      $('.finalcost').autoNumeric('init');
      $('.totalcost').autoNumeric('set', totalcost);
      $('.finalcost').autoNumeric('set', finalcost);
      $('.finalvalue').autoNumeric('init');
      return $('.finalvalue').autoNumeric('set', finalvalue);
    };

    ScreenFourLayout.prototype.updated1 = function() {
      var SettingModel, addon, agreement, agreement1, basicCost, basicCost1, buildingModel, costSheetArray, count, discount, element, finalcost, finalcost1, finalvalue1, floorRise, floorRiseValue, id1, infraArray, maintenance, membership_fees, membership_feesColl, membershipfees, milesotneVal, milestoneColl, milestonemodel, milestones, milestonesArray, milestonesArrayColl, milestoneselectedValue, paymentColl, percentageValue, pervalue, planselectedValue, ratePerSqFtPrice, reg_amt, reg_amt1, revisedhidden, revisedrate, sales_tax, sales_tax1, stamp_duty, stamp_duty1, table, totalcost, totalcost1, uniVariantModel, unitModel, unitTypeMemeber, unitVariantMemeber, unitVariantMemeberColl, univariantmem, vat, vat1, _i, _len;
      $('.infra1').autoNumeric('init');
      $('.infra1').autoNumeric('set', $('#infra1').val());
      $('.infra').autoNumeric('init');
      $('.infra').autoNumeric('set', $('#infra').val());
      costSheetArray = [];
      unitModel = App.master.unit.findWhere({
        id: parseInt(App.unit['name'])
      });
      uniVariantModel = App.master.unit_variant.findWhere({
        id: unitModel.get('unitVariant')
      });
      costSheetArray.push(uniVariantModel.get('sellablearea'));
      costSheetArray.push(unitModel.get('persqftprice'));
      buildingModel = App.master.building.findWhere({
        id: unitModel.get('building')
      });
      floorRise = buildingModel.get('floorrise');
      floorRiseValue = floorRise[unitModel.get('floor')];
      discount = 0;
      ratePerSqFtPrice = parseFloat(costSheetArray[1]) + parseFloat(floorRiseValue);
      if (perFlag === 1) {
        revisedhidden = "";
        discount = parseFloat($('#discountvalue').val());
      } else if (perFlag === 2) {
        revisedhidden = "";
        pervalue = parseFloat($('#discountper').val()) / 100;
        discount = parseFloat(ratePerSqFtPrice) * parseFloat(pervalue);
      }
      revisedrate = parseFloat(ratePerSqFtPrice) - (parseFloat(discount));
      costSheetArray.push(revisedrate);
      basicCost = parseFloat(uniVariantModel.get('sellablearea')) * parseFloat(revisedrate);
      costSheetArray.push(basicCost);
      costSheetArray.push(discount);
      table = "";
      buildingModel = App.master.building.findWhere({
        id: unitModel.get('building')
      });
      planselectedValue = buildingModel.get('payment_plan');
      milestoneselectedValue = buildingModel.get('milestone');
      $("#paymentplans option[value=" + planselectedValue + "]").prop('selected', true);
      $("#milestones option[value=" + milestoneselectedValue + "]").prop('selected', true);
      id1 = $('#paymentplans').val();
      maintenance = parseFloat(uniVariantModel.get('sellablearea')) * 100;
      SettingModel = new Backbone.Model(SETTINGS);
      stamp_duty = (basicCost * (parseFloat(SettingModel.get('stamp_duty')) / 100)) + 110;
      reg_amt = parseFloat(SettingModel.get('registration_amount'));
      vat = basicCost * (parseFloat(SettingModel.get('vat')) / 100);
      sales_tax = basicCost * (parseFloat(SettingModel.get('sales_tax')) / 100);
      infraArray = SettingModel.get('infrastructure_charges');
      membership_fees = SettingModel.get('membership_fees');
      membership_feesColl = new Backbone.Collection(membership_fees);
      unitTypeMemeber = membership_feesColl.findWhere({
        unit_type: parseInt(unitModel.get('unitType'))
      });
      if (unitTypeMemeber.get('membership_fees') === 0) {
        unitVariantMemeber = unitTypeMemeber.get('unit_variant');
        unitVariantMemeberColl = new Backbone.Collection(unitVariantMemeber);
        univariantmem = unitVariantMemeberColl.findWhere({
          unit_variant: parseInt(unitModel.get('unitVariant'))
        });
        membershipfees = univariantmem.get('membership_fees');
      } else {
        membershipfees = unitTypeMemeber.get('membership_fees');
      }
      table = "";
      basicCost1 = costSheetArray[0] * costSheetArray[1];
      agreement1 = parseFloat(basicCost1) + parseFloat($('#infra1').val());
      agreementValue1 = agreement1;
      agreement = parseFloat(basicCost) + parseFloat($('#infra').val());
      agreementValue = agreement;
      $('.agreement1').autoNumeric('init');
      $('.agreement1').autoNumeric('set', agreement1);
      stamp_duty1 = (basicCost1 * (parseFloat(SettingModel.get('stamp_duty')) / 100)) + 110;
      reg_amt1 = parseFloat(SettingModel.get('registration_amount'));
      vat1 = basicCost1 * (parseFloat(SettingModel.get('vat')) / 100);
      sales_tax1 = basicCost1 * (parseFloat(SettingModel.get('sales_tax')) / 100);
      totalcost1 = parseFloat(stamp_duty1) + parseFloat(reg_amt1) + parseFloat(vat1) + parseFloat(sales_tax1);
      finalcost1 = parseFloat(maintenance) + parseFloat(membershipfees);
      finalvalue1 = parseFloat(totalcost1) + parseFloat(finalcost1) + parseFloat(agreement1);
      $('.totalcost1').autoNumeric('init');
      $('.finalcost1').autoNumeric('init');
      $('.totalcost1').autoNumeric('set', totalcost1);
      $('.finalcost1').autoNumeric('set', finalcost1);
      $('.finalvalue1').autoNumeric('init');
      $('.finalvalue1').autoNumeric('set', finalvalue1);
      paymentColl = new Backbone.Collection(PAYMENTPLANS);
      milestones = paymentColl.get(parseInt($('#paymentplans').val()));
      milestonesArray = milestones.get('milestones');
      milestonesArrayColl = new Backbone.Collection(milestonesArray);
      milestonemodel = milestonesArrayColl.findWhere({
        'milestone': parseInt(buildingModel.get('milestone'))
      });
      milestonesArray = milestonesArray.sort(function(a, b) {
        return parseInt(a.sort_index) - parseInt(b.sort_index);
      });
      if (milestonemodel === void 0) {
        milesotneVal = _.first(milestonesArray);
        milestonemodel = milestonesArrayColl.findWhere({
          'milestone': parseInt(milesotneVal.milestone)
        });
      }
      milestoneColl = new Backbone.Collection(MILESTONES);
      count = 0;
      for (_i = 0, _len = milestonesArray.length; _i < _len; _i++) {
        element = milestonesArray[_i];
        if (element.sort_index <= milestonemodel.get('sort_index')) {
          percentageValue = agreement * ((parseFloat(element.payment_percentage)) / 100);
          count = count + percentageValue;
        }
      }
      addon = parseFloat($('#payment').val()) - parseFloat(count);
      totalcost = parseFloat(agreement) + parseFloat(stamp_duty) + parseFloat(reg_amt) + parseFloat(vat) + parseFloat(sales_tax);
      return finalcost = parseFloat(totalcost) + parseFloat(maintenance);
    };

    return ScreenFourLayout;

  })(Marionette.LayoutView);
  UnitsView = (function(_super) {
    __extends(UnitsView, _super);

    function UnitsView() {
      return UnitsView.__super__.constructor.apply(this, arguments);
    }

    UnitsView.prototype.tagName = 'li';

    UnitsView.prototype.className = 'vs-nav-current';

    return UnitsView;

  })(Marionette.ItemView);
  UnitTypeChildView = (function(_super) {
    __extends(UnitTypeChildView, _super);

    function UnitTypeChildView() {
      return UnitTypeChildView.__super__.constructor.apply(this, arguments);
    }

    UnitTypeChildView.prototype.tagName = 'ul';

    UnitTypeChildView.prototype.className = 'vs-nav';

    UnitTypeChildView.prototype.childView = UnitsView;

    return UnitTypeChildView;

  })(Marionette.CompositeView);
  UnitMainView = (function(_super) {
    __extends(UnitMainView, _super);

    function UnitMainView() {
      return UnitMainView.__super__.constructor.apply(this, arguments);
    }

    UnitMainView.prototype.template = '<div class="row m-l-0 m-r-0 bgClass"> <div class="col-md-5 col-lg-4 p-b-10 b-grey b-r"> <div class="unitDetails"> <div class="row"> <div class="col-lg-6"> <div class="unitBox unitNmbr"> <h3>{{name}}</h3> <h4 class="titles"><span class="sky-flag"></span> Flat No.</h4> </div> </div> <div class="col-lg-6"> <div class="unitBox chargeArea"> <h3>{{sellablearea}} <span class="light">Sq.Ft.</span></h3> <h4 class="titles"><span class="sky-banknote"></span> Total Area</h4> </div> </div> </div> <div class="row"> <div class="col-md-12"> <div class="unitBox"> {{#roomsizearray}} <div class="rooms">{{type}}: <h4 class="size">{{size}} Sq.Ft.</h4></div> {{/roomsizearray}} <h4 class="titles"><span class="sky-maximize"></span> Room Sizes</h4> </div> </div> </div> <div class="row"> <div class="col-md-12"> <div class="unitBox"> <div class="others"><h4 class="size">Terrace:</h4> {{terraceoptions}} </div> <div class="others"><h4 class="size">Views:</h4> {{facings_name}}</div> <div class="others"><h4 class="size">Entrance:</h4> {{views_name}}</div> <h4 class="titles"><span class="sky-location"></span> Other Details</h4> </div> </div> </div> <!--<div class="row"> <div class="col-md-12"> <div class="unitBox facing"> <h4 class="view">{{terraceoptions}}</h4> <h4 class="titles"><span class="sky-content-left"></span> Terrace</h4> </div> </div> </div> <div class="row"> <div class="col-md-12"> <div class="unitBox facing"> <h4 class="view facingclass">{{facings_name}}</h4> <h4 class="titles"><span class="sky-map"></span> Views</h4> </div> </div> </div> <div class="row"> <div class="col-md-12"> <div class="unitBox facing"> <h4 class="view viewclass">{{views_name}}</h4> <h4 class="titles"><span class="sky-location"></span> Entrance</h4> </div> </div> </div>--> </div> </div> <div class="col-md-7 col-lg-8"> <div class="liquid-slider center-block" id="slider-plans"> <div> <h2 class="title">2D Layout</h2> <img src="{{TwoDimage}}" class="img-responsive"> </div> <div> <h2 class="title">3D Layout</h2> <img src="{{ThreeDimage}}" class="img-responsive"> </div> <!--<div> <h2 class="title">Floor Layout</h2> <img src="{{floorLayoutimage}}" class="img-responsive"> </div>--> <div> <h2 class="title">Building Position</h2> <img src="{{BuildingPositionimage}}" class="img-responsive"> </div> </div> </div> </div>';

    UnitMainView.prototype.tagName = "section";

    UnitMainView.prototype.initialize = function() {
      return this.$el.prop("id", 'unit' + this.model.get("id"));
    };

    UnitMainView.prototype.onShow = function() {
      return $('#slider-plans').liquidSlider({
        slideEaseFunction: "easeInOutQuad",
        autoSlide: true,
        includeTitle: false,
        minHeight: 630,
        autoSlideInterval: 4000,
        mobileNavigation: false,
        hideArrowsWhenMobile: false,
        dynamicTabsAlign: "center",
        dynamicArrows: false
      });
    };

    return UnitMainView;

  })(Marionette.CompositeView);
  UnitTypeView = (function(_super) {
    __extends(UnitTypeView, _super);

    function UnitTypeView() {
      return UnitTypeView.__super__.constructor.apply(this, arguments);
    }

    UnitTypeView.prototype.className = "vs-wrapper";

    UnitTypeView.prototype.childView = UnitMainView;

    return UnitTypeView;

  })(Marionette.CompositeView);
  return {
    ScreenFourLayout: ScreenFourLayout,
    UnitTypeChildView: UnitTypeChildView,
    UnitTypeView: UnitTypeView
  };
});

// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/screen-four/screen-four-controller',['extm', 'src/apps/screen-four/screen-four-view'], function(Extm, ScreenFourView) {
  var ScreenFourController;
  ScreenFourController = (function(_super) {
    __extends(ScreenFourController, _super);

    function ScreenFourController() {
      this.showViews = __bind(this.showViews, this);
      return ScreenFourController.__super__.constructor.apply(this, arguments);
    }

    ScreenFourController.prototype.initialize = function(opt) {
      return this.getPerSqFtPrice();
    };

    ScreenFourController.prototype.showViews = function() {
      this.unitCollection = this.Collection[0];
      this.mainCollection = this.Collection[0];
      this.showUnitRegion(this.unitCollection);
      return this.showMainRegion(this.mainCollection);
    };

    ScreenFourController.prototype.showUnitRegion = function(unitCollection) {
      var itemview1;
      itemview1 = this.getView(unitCollection);
      return this.layout.unitRegion.show(itemview1);
    };

    ScreenFourController.prototype.showMainRegion = function(mainCollection) {
      var itemview2;
      itemview2 = this.getUnitsView(mainCollection);
      return this.layout.mainRegion.show(itemview2);
    };

    ScreenFourController.prototype.getView = function(unitCollection) {
      return new ScreenFourView.UnitTypeChildView({
        collection: unitCollection
      });
    };

    ScreenFourController.prototype.getUnitsView = function(mainCollection) {
      return new ScreenFourView.UnitTypeView({
        collection: mainCollection
      });
    };

    ScreenFourController.prototype._getSelelctedUnit = function() {
      var ModelActualArr, highLength, i, index, j, modelArr, modelIdArr, unitCollection, units, unitsArray;
      units = App.master.unit.where({
        id: parseInt(App.unit['name'])
      });
      unitsArray = App.master.unit.toArray();
      $.each(units, function(index, value) {
        var building, element, exceptionObject, facingModel, facingModelArray, facingssArray, floorLayoutimage, floorriserange, i, rangeArrayVal, roomSizesArray, roomsizearray, temp, terraceModel, terraceoptions, terraceoptionstext, terraceoptionstextArr, unitTypeModel, unitVariantModel, viewModel, viewModelArray, viewsArray, _i, _j, _len, _len1;
        unitVariantModel = App.master.unit_variant.findWhere({
          id: value.get('unitVariant')
        });
        unitTypeModel = App.master.unit_type.findWhere({
          id: value.get('unitType')
        });
        value.set('unittypename', unitTypeModel.get('name'));
        value.set('terracearea', unitVariantModel.get('terracearea'));
        value.set('sellablearea', unitVariantModel.get('sellablearea'));
        value.set('carpetarea', unitVariantModel.get('carpetarea'));
        value.set('unittypename', unitTypeModel.get('name'));
        value.set('TwoDimage', unitVariantModel.get('url2dlayout_image'));
        value.set('ThreeDimage', unitVariantModel.get('url3dlayout_image'));
        building = App.master.building.findWhere({
          id: value.get('building')
        });
        value.set('buildingname', building.get('name'));
        exceptionObject = building.get('floorexceptionpositions');
        floorLayoutimage = "";
        $.each(exceptionObject, function(index, value1) {
          var floorvalue;
          floorvalue = $.inArray(value.get('floor'), value1.floors);
          if (floorvalue === -1) {
            return floorLayoutimage = building.get('floor_layout_detailed').image_url;
          } else {
            if (value1.floor_layout_detailed.image_url === "") {
              return floorLayoutimage = building.get('floor_layout_detailed').image_url;
            } else {
              return floorLayoutimage = value1.floor_layout_detailed.image_url;
            }
          }
        });
        if (exceptionObject.legth === 0) {
          floorLayoutimage = building.get('floor_layout_detailed').image_url;
        }
        roomSizesArray = unitVariantModel.get('roomsizes');
        temp = [];
        roomsizearray = [];
        $.each(roomSizesArray, function(index, value1) {
          return roomsizearray.push({
            size: value1.room_size,
            type: value1.room_type
          });
        });
        viewModelArray = [];
        facingModelArray = [];
        if (value.get('views').length !== 0) {
          viewsArray = value.get('views');
          for (_i = 0, _len = viewsArray.length; _i < _len; _i++) {
            element = viewsArray[_i];
            viewModel = App.master.view.findWhere({
              id: parseInt(element)
            });
            viewModelArray.push(viewModel.get('name'));
          }
        } else {
          viewModelArray.push('-----');
        }
        value.set('facings_name', viewModelArray.join(', '));
        facingssArray = value.get('facing');
        if (facingssArray.length !== 0) {
          for (_j = 0, _len1 = facingssArray.length; _j < _len1; _j++) {
            element = facingssArray[_j];
            facingModel = App.master.facings.findWhere({
              id: parseInt(element)
            });
            facingModelArray.push(facingModel.get('name'));
          }
        } else {
          facingModelArray.push('-----');
        }
        value.set('views_name', facingModelArray.join(', '));
        terraceoptions = unitVariantModel.get('terraceoptions');
        terraceModel = App.master.terrace.findWhere({
          id: parseInt(terraceoptions)
        });
        terraceoptionstext = "";
        terraceoptionstextArr = [];
        if (terraceModel === void 0) {
          terraceoptionstext = '---------';
        } else {
          terraceoptionstext = terraceModel.get('name');
        }
        value.set('floorLayoutimage', floorLayoutimage);
        value.set('BuildingPositionimage', building.get('positioninproject').image_url);
        value.set('roomsizearray', roomsizearray);
        value.set('terraceoptions', terraceoptionstext);
        value.set('zoomedinimage', building.get('zoomedinimage').image_url);
        value.set('floor_layout_basic', building.get('floor_layout_basic').image_url);
        floorriserange = building.get('floorriserange');
        rangeArrayVal = [];
        i = 0;
        return $.each(floorriserange, function(index, value1) {
          var end, rangename, start;
          rangeArrayVal = [];
          i = 0;
          start = parseInt(value1.start);
          end = parseInt(value1.end);
          while (parseInt(start) <= parseInt(end)) {
            rangeArrayVal[i] = start;
            start = parseInt(start) + 1;
            i++;
          }
          rangename = "";
          if (jQuery.inArray(parseInt(value.get('floor')), rangeArrayVal) >= 0) {
            if (value.name1 === "medium") {
              rangename = "mid";
            } else {
              rangename = value1.name;
            }
            rangename = _.str.capitalize(rangename);
            return value.set("flooRange", rangename + 'rise');
          }
        });
      });
      units.sort(function(a, b) {
        return a.get('id') - b.get('id');
      });
      modelIdArr = [];
      modelArr = [];
      ModelActualArr = [];
      $.each(units, function(index, value) {
        return modelIdArr.push(value.get('id'));
      });
      index = _.indexOf(modelIdArr, parseInt(App.unit['name']));
      highLength = modelIdArr.length - index;
      i = index;
      while (i < modelIdArr.length) {
        modelArr.push(modelIdArr[i]);
        i++;
      }
      j = 0;
      while (j < index) {
        modelArr.push(modelIdArr[j]);
        j++;
      }
      unitCollection = new Backbone.Collection(units);
      $.each(modelArr, function(index, value) {
        return ModelActualArr.push(unitCollection.get(value));
      });
      unitCollection = new Backbone.Collection(ModelActualArr);
      return [unitCollection, PAYMENTPLANS];
    };

    ScreenFourController.prototype.getPerSqFtPrice = function() {
      var object, unitModel;
      unitModel = App.master.unit.findWhere({
        id: parseInt(App.unit['name'])
      });
      object = this;
      return $.ajax({
        method: "POST",
        url: AJAXURL + '?action=get_unit_single_details',
        data: 'id=' + unitModel.get('id'),
        success: function(result) {
          unitModel.set('persqftprice', result.persqftprice);
          unitModel.set('views', result.views);
          unitModel.set('facing', result.facings);
          object.Collection = object._getSelelctedUnit();
          object.layout = new ScreenFourView.ScreenFourLayout({
            templateHelpers: {
              paymentplans: object.Collection[1]
            }
          });
          object.listenTo(object.layout, "show", object.showViews);
          return object.show(object.layout);
        },
        error: function(result) {}
      });
    };

    return ScreenFourController;

  })(Extm.RegionController);
  return msgbus.registerController('screen:four', ScreenFourController);
});

// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/popup/popup-view',['marionette'], function(Mariontte) {
  var PopItemview, PopupView;
  PopItemview = (function(_super) {
    __extends(PopItemview, _super);

    function PopItemview() {
      return PopItemview.__super__.constructor.apply(this, arguments);
    }

    PopItemview.prototype.template = ' <ul> <li class="unitName"> <div class="small"> {{buidlingName}}</div>{{name}} </li> </ul> <!--BHK--> <ul> <li> {{unitTypeName}} </li> </ul> <!--Floor Info--> <ul> <li> {{flooRange}} </li> <li> {{floor}} </li> </ul> <!--View Info--> <ul> <li> {{facings}} </li> <li> {{views}} </li> </ul> <!--Area--> <ul> <li> {{sellablearea}} </li> <li> {{carpetarea}} </li> <li> {{terracearea}} </li> </ul> <!--Room Area--> <ul class="areas"> {{#mainArr}} <li> <ul> {{#subarray}} <li> {{room_size}} </li> {{/subarray}} </ul> </li> {{/mainArr}} </ul> <!--Layouts--> <ul class="layouts"> <li> <a class="2dlayout" data-fancybox-group="2dlayout" title="2D Layout - {{name}}" href="{{TwoDimage}}"><img src="{{TwoDimage}}" alt=""></a> </li> <li> <a class="2dlayout" data-fancybox-group="3dlayout" title="3D Layout - {{name}}" href="{{ThreeDimage}}"><img src="{{ThreeDimage}}" alt=""></a> </li> <li> <a class="2dlayout" data-fancybox-group="buildingposiiton" title="Building Position - {{name}}" href="{{BuildingPositionimage}}"><img src="{{BuildingPositionimage}}" alt=""></a> </li> </ul>';

    PopItemview.prototype.className = 'cd-table-column';

    return PopItemview;

  })(Marionette.ItemView);
  return PopupView = (function(_super) {
    __extends(PopupView, _super);

    function PopupView() {
      return PopupView.__super__.constructor.apply(this, arguments);
    }

    PopupView.prototype.template = '<div id="cd-table" class="compareWishlist"> <header class="cd-table-column"> <ul> <li class="noBG unitName"> </li> </ul> <ul> <li> BHK </li> </ul> <div class="compareHeader"><span class="sky-flag"></span> Floor Info </div> <ul> <li> Floor Range </li> <li> Floor </li> </ul> <div class="compareHeader"><span class="sky-location"></span> View Info</div> <ul> <li> Facing </li> <li> Views </li> </ul> <div class="compareHeader"><span class="sky-maximize"></span> Area <small>(Sq. Ft.)</small></div> <ul> <li> Total Area </li> <li> Carpet Area </li> <li> Terrace Area </li> </ul> <div class="compareHeader"><span class="sky-expand"></span> Room Area <small>(Sq. Ft.)</small></div> <ul> <li> Living/Dining </li> <li> Bedroom </li> <li> Bathroom </li> <li> Terrace </li> </ul> <div class="compareHeader"><span class="glyphicon glyphicon-picture"></span> Layouts</div> <ul> <li> 2D Layout </li> <li> 3D Layout </li> <li> Building Position </li> </ul> </header> <div class="cd-table-container"> <div class="cd-table-wrapper"> </div> </div> </div> <em class="cd-scroll-right"></em>';

    PopupView.prototype.childView = PopItemview;

    PopupView.prototype.childViewContainer = '.cd-table-wrapper';

    PopupView.prototype.className = 'page-container row-fluid';

    PopupView.prototype.events = {
      'click a': function(e) {
        return e.preventDefault();
      }
    };

    PopupView.prototype.onShow = function() {
      $('#showRightPush').hide();
      return $(".2dlayout").fancybox({
        margin: 90
      });
    };

    return PopupView;

  })(Marionette.CompositeView);
});

// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/popup/popup-controller',['extm', 'src/apps/popup/popup-view'], function(Extm, PopupView) {
  var PopupController;
  PopupController = (function(_super) {
    __extends(PopupController, _super);

    function PopupController() {
      return PopupController.__super__.constructor.apply(this, arguments);
    }

    PopupController.prototype.initialize = function(opt) {
      if (opt == null) {
        opt = {};
      }
      return this.getAjaxData();
    };

    PopupController.prototype._getPopupView = function(Collection) {
      return new PopupView({
        collection: Collection
      });
    };

    PopupController.prototype._getUnitsCountCollection = function(modelstring) {
      var buildingModel, classnamearr, cookeArray, element, exceptionObject, facingModel, facingModelArray, facingssArray, floorLayoutimage, floorriserange, i, mainArr, rangeArrayVal, roomSizesArray, roomSizesObject, roomTypeArr, roomsizearr, roomsizearray, roomsizesCollection, terraceoptions, terraceoptionstext, unitCollection, unitModel, unitModelArray, unitTypeModel, unitTypeModelName, unitVariantModel, view, viewModel, viewModelArray, viewsArray, _i, _j, _k, _len, _len1, _len2;
      cookeArray = modelstring;
      unitModelArray = [];
      classnamearr = [];
      floorLayoutimage = "";
      if (cookeArray.length !== 0) {
        for (_i = 0, _len = cookeArray.length; _i < _len; _i++) {
          element = cookeArray[_i];
          unitModel = element;
          buildingModel = App.master.building.findWhere({
            id: unitModel.get('building')
          });
          exceptionObject = buildingModel.get('floorexceptionpositions');
          $.each(exceptionObject, function(index, value1) {
            var floorvalue;
            floorvalue = $.inArray(unitModel.get('floor'), value1.floors);
            if (floorvalue === -1) {
              return floorLayoutimage = buildingModel.get('floor_layout_detailed').image_url;
            } else {
              if (value1.floor_layout_detailed.image_url === "") {
                return floorLayoutimage = buildingModel.get('floor_layout_detailed').image_url;
              } else {
                return floorLayoutimage = value1.floor_layout_detailed.image_url;
              }
            }
          });
          if (exceptionObject.legth === 0) {
            floorLayoutimage = building.get('floor_layout_detailed').image_url;
          }
          floorriserange = buildingModel.get('floorriserange');
          rangeArrayVal = [];
          i = 0;
          $.each(floorriserange, function(index, value) {
            var end, rangename, start;
            rangeArrayVal = [];
            i = 0;
            start = parseInt(value.start);
            end = parseInt(value.end);
            while (parseInt(start) <= parseInt(end)) {
              rangeArrayVal[i] = start;
              start = parseInt(start) + 1;
              i++;
            }
            rangename = "";
            if (jQuery.inArray(parseInt(unitModel.get('floor')), rangeArrayVal) >= 0) {
              if (value.name === "medium") {
                rangename = "mid";
              } else {
                rangename = value.name;
              }
              rangename = _.str.capitalize(rangename);
              return unitModel.set("flooRange", rangename + 'rise');
            }
          });
          viewModelArray = [];
          facingModelArray = [];
          unitTypeModel = App.master.unit_type.findWhere({
            id: unitModel.get('unitType')
          });
          unitTypeModelName = unitTypeModel.get('name').split(' ');
          unitVariantModel = App.master.unit_variant.findWhere({
            id: unitModel.get('unitVariant')
          });
          unitModel.set("sellablearea", unitVariantModel.get('sellablearea'));
          unitModel.set("carpetarea", unitVariantModel.get('carpetarea'));
          unitModel.set("terracearea", unitVariantModel.get('terracearea'));
          unitModel.set("unitTypeName", unitTypeModelName[0]);
          unitModel.set("buidlingName", buildingModel.get('name'));
          unitModel.set('TwoDimage', unitVariantModel.get('url2dlayout_image'));
          unitModel.set('ThreeDimage', unitVariantModel.get('url3dlayout_image'));
          unitModel.set('floorLayoutimage', floorLayoutimage);
          unitModel.set('BuildingPositionimage', buildingModel.get('positioninproject').image_url);
          if (unitModel.get('views_name') !== "") {
            viewsArray = unitModel.get('views_name');
            for (_j = 0, _len1 = viewsArray.length; _j < _len1; _j++) {
              element = viewsArray[_j];
              viewModel = App.master.view.findWhere({
                id: parseInt(element)
              });
              viewModelArray.push(viewModel.get('name'));
            }
          } else {
            viewModelArray.push('-----');
          }
          unitModel.set('views', viewModelArray.join(','));
          facingssArray = unitModel.get('facing_name');
          if (facingssArray.length !== 0) {
            for (_k = 0, _len2 = facingssArray.length; _k < _len2; _k++) {
              element = facingssArray[_k];
              facingModel = App.master.facings.findWhere({
                id: parseInt(element)
              });
              facingModelArray.push(facingModel.get('name'));
            }
          } else {
            facingModelArray.push('-----');
          }
          unitModel.set('facings', facingModelArray.join(','));
          roomSizesObject = unitVariantModel.get('roomsizes');
          roomsizearray = [];
          roomTypeArr = [68, 71, 72, 70];
          roomSizesArray = $.map(roomSizesObject, function(index, value1) {
            return [index];
          });
          terraceoptions = unitVariantModel.get('terraceoptions');
          if (terraceoptions === null) {
            terraceoptionstext = '---------';
          } else {
            terraceoptionstext = unitVariantModel.get('terraceoptions');
          }
          unitModel.set('terraceoptions', 'with ' + terraceoptionstext);
          terraceoptions = 'with ' + terraceoptionstext;
          roomsizearr = [];
          mainArr = [];
          roomsizesCollection = new Backbone.Collection(roomSizesArray);
          $.each(roomTypeArr, function(ind, val) {
            var ii, roomtype;
            roomsizearr = [];
            roomtype = roomsizesCollection.where({
              room_type_id: parseInt(val)
            });
            ii = 0;
            if (parseInt(val) === 70) {
              if (ii > 0) {
                terraceoptions = "";
              }
              $.each(roomtype, function(index1, value1) {
                roomsizearr.push({
                  room_size: value1.get('room_size'),
                  terace: terraceoptions
                });
                return ii++;
              });
            } else {
              $.each(roomtype, function(index1, value1) {
                return roomsizearr.push({
                  room_size: value1.get('room_size')
                });
              });
            }
            roomsizearr.sort(function(a, b) {
              return b.room_size - a.room_size;
            });
            if (roomsizearr.length === 0) {
              roomsizearr.push({
                room_size: "----------"
              });
            }
            return mainArr.push({
              subarray: roomsizearr
            });
          });
          $.each(mainArr, function(ind, val) {
            return $.each(val.subarray, function(ind1, val1) {
              if (val1.room_size === '----') {
                return classnamearr.push(val);
              }
            });
          });
          unitModel.set('mainArr', mainArr);
          unitModelArray.push(unitModel);
        }
        unitCollection = new Backbone.Collection(unitModelArray);
        this.view = view = this._getPopupView(unitCollection);
        return this.show(view);
      }
    };

    PopupController.prototype.getAjaxData = function() {
      var cookeArray, element, i, modelArray, object, unitModel, unitModelArray, _i, _len, _results;
      cookeArray = localStorage.getItem("cookievalue").split(',');
      unitModelArray = [];
      modelArray = [];
      i = 0;
      if (cookeArray.length !== 0) {
        _results = [];
        for (_i = 0, _len = cookeArray.length; _i < _len; _i++) {
          element = cookeArray[_i];
          unitModel = App.master.unit.findWhere({
            id: parseInt(element)
          });
          object = this;
          _results.push($.ajax({
            method: "POST",
            url: AJAXURL + '?action=get_unit_single_details',
            data: 'id=' + unitModel.get('id'),
            success: function(result) {
              var unitModel1;
              i++;
              unitModel1 = App.master.unit.findWhere({
                id: parseInt(result.id)
              });
              unitModel1.set('persqftprice', result.persqftprice);
              unitModel1.set('views_name', result.views);
              unitModel1.set('facing_name', result.facings);
              modelArray.push(unitModel1);
              if (i === cookeArray.length) {
                return object._getUnitsCountCollection(modelArray);
              }
            },
            error: function(result) {}
          }));
        }
        return _results;
      }
    };

    return PopupController;

  })(Extm.RegionController);
  return msgbus.registerController('popup', PopupController);
});

// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define('src/apps/main-app/main-layout',['extm'], function(Extm) {
  var MainController, facing, facingnames, mainView, view, viewnames;
  view = [];
  facing = [];
  facingnames = [];
  viewnames = [];
  MainController = (function(_super) {
    __extends(MainController, _super);

    function MainController() {
      this._getView = __bind(this._getView, this);
      this.showRegionViews = __bind(this.showRegionViews, this);
      return MainController.__super__.constructor.apply(this, arguments);
    }

    MainController.prototype.initialize = function() {
      var layout;
      this.layout = layout = this._getView();
      App.layout = this.layout;
      this.listenTo(layout, 'show', this.showRegionViews);
      return this.show(layout);
    };

    MainController.prototype.showRegionViews = function() {
      var params;
      App.filter(params = {});
      msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
      return msgbus.showApp('screen:one').insideRegion(this.layout.screenOneRegion).withOptions();
    };

    MainController.prototype._getView = function() {
      return new mainView({
        templateHelpers: {
          SITEURL: SITEURL,
          VIEWS: VIEWS,
          FACINGS: FACINGS
        }
      });
    };

    return MainController;

  })(Extm.RegionController);
  mainView = (function(_super) {
    __extends(mainView, _super);

    function mainView() {
      return mainView.__super__.constructor.apply(this, arguments);
    }

    mainView.prototype.template = '<div id="notify" class="notifyBox" style="display:none;"> You have clicked on a box! </div> <!--<div>dfsfsfs</div>--> <nav class="cbp-spmenu cbp-spmenu-vertical cbp-spmenu-right" id="cbp-spmenu-s2"> <h3>My Menu</h3> <ul> <li><a href="#"><span class="glyphicon glyphicon-heart"></span> Wishlist</a> <div id="comparetext" class="compareTxt"> Compare Apartments here!<br>You can compare up to 4 apartments. </div> <ul class="menuWishlist" id="showWishlist"> </ul> </li> <a href="#" id="compare" class="compareBtn">COMPARE</a> </ul> </nav> <div class="prntLoader hidden"></div> <div id="print-view" class="visible-print"> <div class="print-header"> <div class="row print-head"> <div class="col-sm-6 head"> <h1>Flat No: <strong><span id="flatno"></span></strong></h1> </div> <div class="col-sm-6 head"> <h1 id="towerno"></h1> </div> </div> <div class="row print-sub-head"> <div class="col-sm-6 head"> <h2>Flat Type: <strong><span id="unittypename"></span></strong>(<span id="area"></span> sq. ft.)</h2> </div> <div class="col-sm-6 head"> <h2>Floor Range: <strong><span id="floorrise"></span></strong></h2> </div> </div> </div> <div class="print-row"> <div class="row"> <div class="col-sm-5"> <img src="" id="zoomedinimage" /> </div> <div class="col-sm-7"> <div id="printmapplic1" class="towersMap center-block"></div> </div> </div> <div class="row"> <div class="col-sm-5"> <div id="floorlayoutbasic" class="floorlayout"></div> </div> <div class="col-sm-7"> <div id="towerview" ></div> </div> </div> </div> <div class="print-row areaInfo"> <div class="row"> <div class="col-sm-12"> <div class="details room"> </div> </div> </div> <div class="row extra-details"> <div class="col-sm-4"> <h5>Terrace</h5> <span id="terrace"></span> </div> <div class="col-sm-4"> <h5>Entrance</h5> <span id="printfacing"></span> </div> <div class="col-sm-4"> <h5>Views</h5> <span id="printview"></span> </div> </div> </div> <div class="print-row areaInfo last"> <div class="row"> <div class="col-sm-12"> <h4 class="layout-header">2D Layout</h4> <div class="details "> <img src="" id="twoDimage" /> </div> <h4 class="layout-header">3D Layout</h4> <div class="details "> <img src="" id="threeDimage" /> </div> </div> </div> </div> <div class="costsheetPrint special"> <div class="this-is"> <h3 class="light">Estimated Cost for Flat No. <span class="text-primary flatno"></span> in <span class="text-primary building"></span></h3> </div><!-- invoice headline --> <div class="row"> <div class="col-sm-3"> <h5>Prepared for:</h5> <span id="customerlabel" ></span> </div> <div class="col-sm-3"> <h5>Prepared by:</h5> <h4 class="preparedby"></h4> </div> <div class="col-sm-3"> </div> <div class="col-sm-3"> <h5>Prepared on:</h5> <h4 class="preparedon"></h4> </div> </div> <div class="row"> <div class="col-sm-4"> <h5 >Total Cost:</h5> <h4><span class="totalcost" data-a-sign="Rs. " data-d-group="2"></span></h4> </div> <div class="col-sm-4"> <h5>Current Milestone:</h5> <h4> <span class="currentmile"></span></h4> </div> <div class="col-sm-4"> <h5 >Amount Receivable as on Date:</h5> <h4><span class="rec" data-a-sign="Rs. " data-d-group="2"></span></h4> </div> </div> <div class="row"> <div class="col-sm-4"> <h5>Payment Plan: </h5> <h4><span class="paymentplan"></span></h4> </div> <div class="col-sm-4"> <h5>Actual Payment:</h5> <span class="actpayment" data-a-sign="Rs. " data-d-group=""></span></h4> </div> <div class="col-sm-4"> </div> </div> <div id="costSheetTableprint"> </div> <div class="invoice-items"> <h4 class="text-primary">Payment Schedule</h4> <ul id="paymentTableprint"> </ul> </div> </div> <div class="tandc text-center"> <h4 class="bold">Terms and Conditions</h4> <h5>This website and its contents are purely conceptual and merely to assist reader to navigate into images, architectural drawings, area, price & other information only. Enerrgia SKYi does not take responsibility that may rise from any information given in this website. None of the objects/representation mentioned herein constitute a legally binding offer or invitation to treat. Enerrgia SKYi reserves right to add, delete, alter or in any manner change the plans, specifications, images, architectural drawings, prices, data & other information in its endeavour to make improvements as and when required without prior notice or obligation.</h5> <p>To read full Terms &amp; Conditions, visit www.manaslake.com/terms-conditions</p> </div> </div> <div id="screen-one-region" class="section"> </div> <div id="screen-two-region" > </div> <div id="screen-three-region" > </div> <div id="screen-four-region" > </div>';

    mainView.prototype.events = {
      'click .view': function(e) {
        var index, viewString;
        viewString = 'All';
        if ($('#' + e.target.id).prop('checked') === true) {
          view.push($('#' + e.target.id).val());
          viewnames.push($('#' + e.target.id).attr('data-name'));
        } else {
          index = view.indexOf($('#' + e.target.id).val());
          if (index !== -1) {
            view.splice(index, 1);
            viewnames.splice(index, 1);
          }
        }
        if (view.length !== 0) {
          viewString = view.join(',');
        }
        App.defaults['view'] = viewString;
        return $('#viewName').text(viewnames.join(','));
      },
      'click .facing': function(e) {
        var facingString, index;
        facingString = 'All';
        if ($('#' + e.target.id).prop('checked') === true) {
          facing.push($('#' + e.target.id).val());
          facingnames.push($('#' + e.target.id).attr('data-name'));
        } else {
          index = facing.indexOf($('#' + e.target.id).val());
          if (index !== -1) {
            facing.splice(index, 1);
            facingnames.splice(index, 1);
          }
        }
        if (facing.length !== 0) {
          facingString = facing.join(',');
        }
        App.defaults['facing'] = facingString;
        return $('#facingName').text(facingnames.join(','));
      },
      'click #compare': function(e) {
        var body, menuRight, menuTop, showRightPush, showTop, win;
        win = window.open(SITEURL + "/wishlist/#wishList", '_blank');
        win.focus();
        menuRight = document.getElementById("cbp-spmenu-s2");
        menuTop = document.getElementById("cbp-spmenu-s3");
        showTop = document.getElementById("showTop");
        showRightPush = document.getElementById("showRightPush");
        body = document.body;
        classie.toggle(showRightPush, "active");
        classie.toggle(body, "cbp-spmenu-push-toleft");
        return classie.toggle(menuRight, "cbp-spmenu-open");
      },
      'click .del': function(e) {
        var body, index, menuRight, menuTop, showRightPush, showTop, val;
        App.cookieArray = App.cookieArray;
        val = $('#' + e.target.id).attr('data-id');
        index = App.cookieArray.indexOf(parseInt(val));
        App.cookieArray.splice(index, 1);
        if (App.cookieArray.length <= 1) {
          $('#compare').hide();
        }
        $.cookie('key', App.cookieArray);
        localStorage.setItem("cookievalue", App.cookieArray);
        $('#errormsg').text("");
        if (App.cookieArray.length < 1) {
          $("#showRightPush").addClass("hidden");
          menuRight = document.getElementById("cbp-spmenu-s2");
          menuTop = document.getElementById("cbp-spmenu-s3");
          showTop = document.getElementById("showTop");
          showRightPush = document.getElementById("showRightPush");
          body = document.body;
          classie.toggle(showRightPush, "active");
          classie.toggle(body, "cbp-spmenu-push-toleft");
          classie.toggle(menuRight, "cbp-spmenu-open");
        }
        return this.showWishList();
      },
      'click a': function(e) {
        return e.preventDefault();
      },
      'click .selectedunit': function(e) {
        var body, buildingModel, floorriserange, menuRight, menuTop, object, rangeArrayVal, rangeModel, showRightPush, showTop, unitModel;
        menuRight = document.getElementById("cbp-spmenu-s2");
        menuTop = document.getElementById("cbp-spmenu-s3");
        showTop = document.getElementById("showTop");
        showRightPush = document.getElementById("showRightPush");
        body = document.body;
        classie.toggle(showRightPush, "active");
        classie.toggle(body, "cbp-spmenu-push-toleft");
        classie.toggle(menuRight, "cbp-spmenu-open");
        App.unit['name'] = $('#' + e.target.id).attr('data-id');
        App.unit['flag'] = 1;
        unitModel = App.master.unit.findWhere({
          id: parseInt($('#' + e.target.id).attr('data-id'))
        });
        App.defaults['unitType'] = unitModel.get('unitType');
        App.defaults['building'] = unitModel.get('building');
        rangeModel = App.master.range;
        App.backFilter['screen3'].push("floor");
        App.backFilter['screen2'].push("floor", "unitVariant");
        buildingModel = App.master.building.findWhere({
          id: unitModel.get('building')
        });
        floorriserange = buildingModel.get('floorriserange');
        object = this;
        rangeArrayVal = [];
        $.each(floorriserange, function(index, value) {
          var end, i, start;
          rangeArrayVal = [];
          i = 0;
          start = parseInt(value.start);
          end = parseInt(value.end);
          while (parseInt(start) <= parseInt(end)) {
            rangeArrayVal[i] = start;
            start = parseInt(start) + 1;
            i++;
          }
          if (jQuery.inArray(parseInt(unitModel.get('floor')), rangeArrayVal) >= 0) {
            return App.defaults['floor'] = rangeArrayVal.join(',');
          }
        });
        App.navigate("screen-four");
        msgbus.showApp('header').insideRegion(App.headerRegion).withOptions();
        return msgbus.showApp('screen:four').insideRegion(App.layout.screenFourRegion).withOptions();
      }
    };

    mainView.prototype.regions = {
      screenOneRegion: '#screen-one-region',
      screenTwoRegion: '#screen-two-region',
      screenThreeRegion: '#screen-three-region',
      screenFourRegion: '#screen-four-region'
    };

    mainView.prototype.onShow = function() {
      var cookieOldValue, height;
      $.reject({
        reject: {
          msie: 8
        },
        display: [],
        browserShow: true,
        browserInfo: {
          chrome: {
            text: "Google Chrome",
            url: "http://www.google.com/chrome/"
          },
          firefox: {
            text: "Mozilla Firefox",
            url: "http://www.mozilla.com/firefox/"
          },
          safari: {
            text: "Safari",
            url: "http://www.apple.com/safari/download/"
          },
          opera: {
            text: "Opera",
            url: "http://www.opera.com/download/"
          },
          msie: {
            text: "Internet Explorer",
            url: "http://www.microsoft.com/windows/Internet-explorer/",
            allow: false
          }
        },
        header: "<div class='skyiLogo'></div>Oops! Your browser isn't supported!",
        paragraph1: "Your browser is out of date, and is not compatible with " + "our website.",
        paragraph2: "A list of the most popular web browsers can be found below. Just click on the icons to go to the download page.",
        close: false,
        closeMessage: "By closing this window you acknowledge that your experience " + "on this website may be degraded",
        closeLink: "Close This Window",
        closeURL: "#",
        closeESC: false,
        closeCookie: false,
        cookieSettings: {
          path: "/",
          expires: 0
        },
        imagePath: "../wp-content/themes/apartmentselector/images/",
        overlayBgColor: "#fff",
        overlayOpacity: 1,
        fadeInTime: "1",
        fadeOutTime: "fast",
        analytics: false
      });
      height = $(window).scrollTop();
      $(window).scroll(function() {
        height = $(window).scrollTop();
        if (height < 300) {
          return $('.backBtn').addClass('hidden');
        } else {
          return $('.backBtn').removeClass('hidden');
        }
      });
      cookieOldValue = $.cookie("key");
      if (cookieOldValue === void 0 || $.cookie("key") === "") {
        cookieOldValue = [];
      } else {
        cookieOldValue = $.cookie("key").split(',').map(function(item) {
          return parseInt(item);
        });
      }
      if (cookieOldValue.length <= 1) {
        $('#compare').hide();
      }
      App.cookieArray = cookieOldValue;
      localStorage.setItem("cookievalue", App.cookieArray);
      return this.showWishList();
    };

    mainView.prototype.showWishList = function() {
      var building, element, model, selectedUnitsArray, table, unitType, unitVariant, _i, _len;
      table = "";
      if ($.cookie("key") !== void 0 && $.cookie("key") !== "") {
        selectedUnitsArray = $.cookie("key").split(",");
        table = "";
        for (_i = 0, _len = selectedUnitsArray.length; _i < _len; _i++) {
          element = selectedUnitsArray[_i];
          model = App.master.unit.findWhere({
            id: parseInt(element)
          });
          unitType = App.master.unit_type.findWhere({
            id: model.get('unitType')
          });
          unitVariant = App.master.unit_variant.findWhere({
            id: model.get('unitVariant')
          });
          building = App.master.building.findWhere({
            id: model.get('building')
          });
          table += '<li> <a href="#" id="unit' + element + '" data-id="' + element + '" class="selectedunit">' + model.get('name') + ' - ' + building.get('name') + '</a> <a href="#" class="del" id="' + element + '" data-id="' + element + '"  ></a> <div class="clearfix"></div> </li>';
        }
      }
      return $('#showWishlist').html(table);
    };

    return mainView;

  })(Marionette.LayoutView);
  return msgbus.registerController('main:app', MainController);
});

define('plugin-loader', ['underscorestring', 'fancybox'], function() {});

define('apps-loader', ['src/apps/footer/footer-controller', 'src/apps/header/header-controller', 'src/apps/screen-one/screen-one-controller', 'src/apps/screen-two/screen-two-controller', 'src/apps/screen-three/screen-three-controller', 'src/apps/screen-four/screen-four-controller', 'src/apps/popup/popup-controller', 'src/apps/main-app/main-layout'], function() {});

require(['plugin-loader', 'spec/javascripts/fixtures/json/range', 'extm', 'src/classes/ap-store', 'src/apps/router', 'apps-loader'], function(plugins, range, Extm) {
  var staticApps;
  window.App = new Extm.Application;
  App.addRegions({
    headerRegion: '#header-region',
    footerRegion: '#footer-region',
    filterRegion: '#filter-region',
    mainRegion: '#main-region',
    wishListRegion: '#wishlist-region'
  });
  App.currentStore = {
    'unit': new Backbone.Collection(UNITS),
    'view': new Backbone.Collection(VIEWS),
    'building': new Backbone.Collection(BUILDINGS),
    'unit_variant': new Backbone.Collection(UNITVARIANTS),
    'unit_type': new Backbone.Collection(UNITTYPES),
    'range': new Backbone.Collection(range),
    'status': new Backbone.Collection(STATUS),
    'facings': new Backbone.Collection(FACINGS)
  };
  App.master = {
    'unit': new Backbone.Collection(UNITS),
    'view': new Backbone.Collection(VIEWS),
    'building': new Backbone.Collection(BUILDINGS),
    'unit_variant': new Backbone.Collection(UNITVARIANTS),
    'unit_type': new Backbone.Collection(UNITTYPES),
    'range': new Backbone.Collection(range),
    'status': new Backbone.Collection(STATUS),
    'facings': new Backbone.Collection(FACINGS)
  };
  App.unit = {
    name: '',
    flag: 0
  };
  App.screenOneFilter = {
    key: '',
    value: ''
  };
  App.backFilter = {
    'screen1': [],
    'screen2': [],
    'screen3': [],
    'back': ""
  };
  App.defaults = {
    "unitType": 'All',
    'budget': 'All',
    "building": 'All',
    "unitVariant": 'All',
    'floor': 'All',
    'view': 'All'
  };
  App.layout = "";
  App.range = range;
  App.currentRoute = [];
  staticApps = [];
  if (window.location.hash === '') {
    staticApps.push(['header', App.headerRegion]);
    staticApps.push(['popup', App.mainRegion]);
  }
  App.addStaticApps(staticApps);
  return App.start();
});

define("src/wishlist.spa.js", function(){});

