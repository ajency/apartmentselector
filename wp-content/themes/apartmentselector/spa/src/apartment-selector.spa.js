// Generated by CoffeeScript 1.7.1
define('plugin-loader', ['modernizr', 'slick', 'classie', 'selectFx', 'jquerymousewheel', 'jqueryeasing', 'mapplic'], function() {});

define('apps-loader', ['src/apps/footer/footer-controller', 'src/apps/header/header-controller', 'src/apps/screen-one/screen-one-controller', 'src/apps/screen-two/screen-two-controller', 'src/apps/screen-three/screen-three-controller', 'src/apps/screen-four/screen-four-controller'], function() {});

require(['plugin-loader', 'spec/javascripts/fixtures/json/units', 'spec/javascripts/fixtures/json/views', 'spec/javascripts/fixtures/json/building', 'spec/javascripts/fixtures/json/unitvariants', 'spec/javascripts/fixtures/json/unittypes', 'spec/javascripts/fixtures/json/range', 'spec/javascripts/fixtures/json/status', 'extm', 'src/classes/ap-store', 'src/apps/router', 'apps-loader'], function(plugins, units, views, buildings, unitvariants, unittypes, range, status, Extm) {
  var staticApps;
  window.App = new Extm.Application;
  App.addRegions({
    headerRegion: '#header-region',
    footerRegion: '#footer-region',
    filterRegion: '#filter-region',
    mainRegion: '#main-region'
  });
  App.store = {
    'unit': new Backbone.Collection(UNITS),
    'view': new Backbone.Collection(views),
    'building': new Backbone.Collection(BUILDINGS),
    'unit_variant': new Backbone.Collection(UNITVARIANTS),
    'unit_type': new Backbone.Collection(UNITTYPES),
    'range': new Backbone.Collection(range),
    'status': new Backbone.Collection(STATUS)
  };
  App.currentStore = App.store;
  App.building = {
    name: ''
  };
  App.unit = {
    name: ''
  };
  App.screenOneFilter = {
    key: '',
    value: ''
  };
  App.backFilter = {
    'screen1': [],
    'screen2': [],
    'screen3': []
  };
  App.defaults = {
    "building": 'All',
    "unitType": 'All',
    "unitVariant": 'All',
    'floor': 'All',
    'view': 'All',
    'budget': 'All'
  };
  App.filter = function(params) {
    var budgetUnitArray, buildingArray, buildingModel, element, index, key, param_arr, param_key, paramsArray, uniqBuildings, uniqUnittype, uniqUnitvariant, uniqviews, unittype, unittypeArray, unittypeModel, unitvariant, unitvariantArray, unitvariantModel, view, viewArray, viewModel, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m;
    if (params == null) {
      params = {};
    }
    if (window.location.href.indexOf('=') > -1) {
      params = params;
      paramsArray = params.split('&');
      for (index = _i = 0, _len = paramsArray.length; _i < _len; index = ++_i) {
        element = paramsArray[index];
        param_key = element.split('=');
        key = App.defaults.hasOwnProperty(param_key[0]);
        if (key === true) {
          if (window.location.href.indexOf('screen-two') > -1) {
            App.backFilter['screen2'].push(param_key[0]);
          } else if (window.location.href.indexOf('screen-three') > -1) {
            App.backFilter['screen3'].push(param_key[0]);
          } else {
            App.backFilter['screen1'].push(param_key[0]);
          }
          App.defaults[param_key[0]] = param_key[1];
        }
      }
      params = 'building=' + App.defaults['building'] + '&unitType=' + App.defaults['unitType'] + '&unitVariant=' + App.defaults['unitVariant'] + '&floor=' + App.defaults['floor'] + '&view=' + App.defaults['view'] + '&budget=' + App.defaults['budget'];
    } else {
      params = 'building=' + App.defaults['building'] + '&unitType=' + App.defaults['unitType'] + '&unitVariant=' + App.defaults['unitVariant'] + '&floor=' + App.defaults['floor'] + '&view=' + App.defaults['view'] + '&budget=' + App.defaults['budget'];
    }
    console.log(App.defaults);
    param_arr = params.split('&');
    budgetUnitArray = [];
    $.each(param_arr, function(index, value) {
      var attribute, budget_arr, collection, param_val, param_val_arr, paramkey, value_arr;
      value_arr = value.split('=');
      attribute = {};
      attribute[param_key] = param_key;
      param_key = value_arr[0];
      param_val = value_arr[1];
      param_val_arr = param_val.split(',');
      paramkey = {};
      paramkey[param_key] = parseInt(param_val);
      if (param_val_arr.length > 1) {
        collection = Array();
        $.each(param_val_arr, function(index, value) {
          var collectionNew;
          paramkey = {};
          collectionNew = Array();
          paramkey[param_key] = parseInt(value);
          collectionNew = App.currentStore.unit.where(paramkey);
          return $.each(collectionNew, function(index, value) {
            return collection.push(value);
          });
        });
      } else if (param_val_arr.length === 1) {
        budget_arr = param_val_arr[0].split('-');
        console.log(budget_arr.length);
        if (param_val_arr[0].toUpperCase() === 'ALL') {
          collection = App.currentStore.unit.toArray();
        } else if (budget_arr.length > 1) {
          units = App.currentStore.unit;
          units.each(function(item) {
            var buildingModel, floorRise, floorRiseValue, unitPrice, unitVariantmodel;
            buildingModel = App.currentStore.building.findWhere({
              'id': item.get('building')
            });
            floorRise = buildingModel.get('floorrise');
            floorRiseValue = floorRise[item.get('floor')];
            unitVariantmodel = App.currentStore.unit_variant.findWhere({
              'id': item.get('unitVariant')
            });
            unitPrice = (parseInt(unitVariantmodel.get('persqftprice')) + parseInt(floorRiseValue)) * parseInt(unitVariantmodel.get('sellablearea'));
            item.set({
              'unitPrice': 'unitPrice',
              unitPrice: unitPrice
            });
            if (item.get('unitPrice') > parseInt(budget_arr[0]) && item.get('unitPrice') < parseInt(budget_arr[1])) {
              budgetUnitArray.push(item);
            }
            return collection = budgetUnitArray;
          });
        } else {
          collection = App.currentStore.unit.where(paramkey);
        }
      }
      return App.currentStore.unit.reset(collection);
    });
    buildings = App.currentStore.unit.pluck("building");
    uniqBuildings = _.uniq(buildings);
    buildingArray = Array();
    for (index = _j = 0, _len1 = uniqBuildings.length; _j < _len1; index = ++_j) {
      element = uniqBuildings[index];
      buildingModel = App.currentStore.building.get(element);
      buildingArray.push(buildingModel);
    }
    unittype = App.currentStore.unit.pluck("unitType");
    uniqUnittype = _.uniq(unittype);
    unittypeArray = Array();
    for (index = _k = 0, _len2 = uniqUnittype.length; _k < _len2; index = ++_k) {
      element = uniqUnittype[index];
      unittypeModel = App.currentStore.unit_type.get(element);
      unittypeArray.push(unittypeModel);
    }
    unitvariant = App.currentStore.unit.pluck("unitVariant");
    uniqUnitvariant = _.uniq(unitvariant);
    unitvariantArray = Array();
    for (index = _l = 0, _len3 = uniqUnitvariant.length; _l < _len3; index = ++_l) {
      element = uniqUnitvariant[index];
      unitvariantModel = App.currentStore.unit_variant.get(element);
      unitvariantArray.push(unitvariantModel);
    }
    view = App.currentStore.unit.pluck("view");
    uniqviews = _.uniq(buildings);
    viewArray = Array();
    for (index = _m = 0, _len4 = uniqviews.length; _m < _len4; index = ++_m) {
      element = uniqviews[index];
      viewModel = App.currentStore.view.get(element);
      viewArray.push(viewModel);
    }
    App.currentStore.building.reset(buildingArray);
    App.currentStore.unit_type.reset(unittypeArray);
    App.currentStore.unit_variant.reset(unitvariantArray);
    App.currentStore.view.reset(viewArray);
    return App.currentStore.unit;
  };
  App.filterparam = function(params) {
    if (params == null) {
      params = {};
    }
    App.defaults = {
      "building": [2, 3],
      "unitType": 3,
      "unitVariant": 'All',
      'floor': 'All',
      'view': 'All'
    };
    App.defaults.hasOwnProperty("name");
    units = App.currentStore.unit.filter(function(model) {
      var building, buildingArray, element, index, _i, _len, _ref;
      App.defaults['building'].length;
      buildingArray = Array();
      _ref = App.defaults['building'];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        element = _ref[index];
        building = model.get('building') === element;
      }
      return building;
    });
    return units;
  };
  App.currentRoute = [];
  staticApps = [];
  if (window.location.hash === '') {
    App.filter();
    staticApps.push(['header', App.headerRegion]);
    staticApps.push(['screen:one', App.mainRegion]);
  }
  App.addStaticApps(staticApps);
  return App.start();
});
