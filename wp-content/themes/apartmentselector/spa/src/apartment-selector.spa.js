// Generated by CoffeeScript 1.7.1
define('plugin-loader', ['preload'], function() {});

define('apps-loader', ['src/apps/footer/footer-controller', 'src/apps/header/header-controller', 'src/apps/screen-one/screen-one-controller', 'src/apps/screen-two/screen-two-controller', 'src/apps/screen-three/screen-three-controller', 'src/apps/screen-four/screen-four-controller'], function() {});

require(['spec/javascripts/fixtures/json/units', 'spec/javascripts/fixtures/json/views', 'spec/javascripts/fixtures/json/buildings', 'spec/javascripts/fixtures/json/unitvariants', 'spec/javascripts/fixtures/json/unittypes', 'spec/javascripts/fixtures/json/lowrange', 'spec/javascripts/fixtures/json/mediumrange', 'spec/javascripts/fixtures/json/highrange', 'plugin-loader', 'extm', 'src/classes/ap-store', 'src/apps/router', 'apps-loader'], function(units, views, buildings, unitvariants, unittypes, low, medium, high, plugins, Extm) {
  var staticApps;
  window.App = new Extm.Application;
  App.addRegions({
    headerRegion: '#header-region',
    footerRegion: '#footer-region',
    filterRegion: '#filter-region',
    mainRegion: '#main-region'
  });
  App.store = {
    'unit': new Backbone.Collection(units),
    'view': new Backbone.Collection(views),
    'building': new Backbone.Collection(buildings),
    'unit_variant': new Backbone.Collection(unitvariants),
    'unit_type': new Backbone.Collection(unittypes),
    'low': new Backbone.Collection(low),
    'medium': new Backbone.Collection(medium),
    'high': new Backbone.Collection(high)
  };
  App.currentStore = App.store;
  App.filter = function(params) {
    var buildingArray, buildingModel, element, index, othermodels, param_arr, uniqBuildings, uniqUnittype, uniqUnitvariant, uniqviews, unittype, unittypeArray, unittypeModel, unitvariant, unitvariantArray, unitvariantModel, view, viewArray, viewModel, _i, _j, _k, _l, _len, _len1, _len2, _len3;
    if (params == null) {
      params = {};
    }
    param_arr = params.split('&');
    othermodels = Array();
    $.each(param_arr, function(index, value) {
      var collection, param_key, param_val, param_val_arr, paramkey, value_arr;
      value_arr = value.split('=');
      param_key = value_arr[0];
      param_val = value_arr[1];
      param_val_arr = param_val.split(',');
      paramkey = {};
      paramkey[param_key] = parseInt(param_val);
      if (param_val_arr.length > 1) {
        collection = Array();
        $.each(param_val_arr, function(index, value) {
          var collectionNew;
          paramkey = {};
          collectionNew = Array();
          paramkey[param_key] = parseInt(value);
          collectionNew = App.currentStore.unit.where(paramkey);
          return $.each(collectionNew, function(index, value) {
            return collection.push(value);
          });
        });
      } else if (param_val_arr.length === 1) {
        if (param_val_arr[0].toUpperCase() === 'ALL') {
          collection = App.currentStore.unit.toArray();
        } else {
          collection = App.currentStore.unit.where(paramkey);
        }
      }
      return App.currentStore.unit.reset(collection);
    });
    buildings = App.currentStore.unit.pluck("building");
    uniqBuildings = _.uniq(buildings);
    buildingArray = Array();
    for (index = _i = 0, _len = uniqBuildings.length; _i < _len; index = ++_i) {
      element = uniqBuildings[index];
      buildingModel = App.currentStore.building.get(element);
      buildingArray.push(buildingModel);
    }
    unittype = App.currentStore.unit.pluck("unitType");
    uniqUnittype = _.uniq(unittype);
    unittypeArray = Array();
    for (index = _j = 0, _len1 = uniqUnittype.length; _j < _len1; index = ++_j) {
      element = uniqUnittype[index];
      unittypeModel = App.currentStore.unit_type.get(element);
      unittypeArray.push(unittypeModel);
    }
    unitvariant = App.currentStore.unit.pluck("unitVariant");
    uniqUnitvariant = _.uniq(unitvariant);
    unitvariantArray = Array();
    for (index = _k = 0, _len2 = uniqUnitvariant.length; _k < _len2; index = ++_k) {
      element = uniqUnitvariant[index];
      unitvariantModel = App.currentStore.unit_variant.get(element);
      unitvariantArray.push(unitvariantModel);
    }
    view = App.currentStore.unit.pluck("view");
    uniqviews = _.uniq(buildings);
    viewArray = Array();
    for (index = _l = 0, _len3 = uniqviews.length; _l < _len3; index = ++_l) {
      element = uniqviews[index];
      viewModel = App.currentStore.view.get(element);
      viewArray.push(viewModel);
    }
    App.currentStore.building.reset(buildingArray);
    App.currentStore.unit_type.reset(unittypeArray);
    App.currentStore.unit_variant.reset(unitvariantArray);
    App.currentStore.view.reset(viewArray);
    return App.currentStore.unit;
  };
  App.currentRoute = [];
  staticApps = [['footer', App.footerRegion]];
  if (window.location.hash === '') {
    staticApps.push(['header', App.headerRegion]);
    staticApps.push(['screen:one', App.mainRegion]);
  }
  App.addStaticApps(staticApps);
  return App.start();
});
