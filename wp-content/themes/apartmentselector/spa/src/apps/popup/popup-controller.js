// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['extm', 'src/apps/popup/popup-view'], function(Extm, PopupView) {
  var PopupController;
  PopupController = (function(_super) {
    __extends(PopupController, _super);

    function PopupController() {
      return PopupController.__super__.constructor.apply(this, arguments);
    }

    PopupController.prototype.initialize = function(opt) {
      var view;
      if (opt == null) {
        opt = {};
      }
      this.Collection = this._getUnitsCountCollection();
      this.view = view = this._getPopupView(this.Collection);
      return this.show(view);
    };

    PopupController.prototype._getPopupView = function(Collection) {
      console.log(Collection);
      return new PopupView({
        collection: Collection
      });
    };

    PopupController.prototype._getUnitsCountCollection = function() {
      var buildingModel, cookeArray, element, facingModel, facingModelArray, facingssArray, floorriserange, i, rangeArrayVal, unitCollection, unitModel, unitModelArray, unitTypeModel, unitTypeModelName, unitVariantModel, viewModel, viewModelArray, viewsArray, _i, _j, _k, _len, _len1, _len2;
      console.log(cookeArray = localStorage.getItem("cookievalue").split(','));
      unitModelArray = [];
      if (cookeArray.length !== 0) {
        for (_i = 0, _len = cookeArray.length; _i < _len; _i++) {
          element = cookeArray[_i];
          unitModel = App.master.unit.findWhere({
            id: parseInt(element)
          });
          console.log(buildingModel = App.master.building.findWhere({
            id: unitModel.get('building')
          }));
          floorriserange = buildingModel.get('floorriserange');
          rangeArrayVal = [];
          i = 0;
          $.each(floorriserange, function(index, value) {
            var end, rangename, start;
            rangeArrayVal = [];
            i = 0;
            start = parseInt(value.start);
            end = parseInt(value.end);
            while (parseInt(start) <= parseInt(end)) {
              rangeArrayVal[i] = start;
              start = parseInt(start) + 1;
              i++;
            }
            console.log(rangeArrayVal);
            rangename = "";
            if (jQuery.inArray(parseInt(unitModel.get('floor')), rangeArrayVal) >= 0) {
              if (value.name === "medium") {
                rangename = "mid";
              } else {
                rangename = value.name;
              }
              console.log(rangename);
              rangename = _.str.capitalize(rangename);
              return unitModel.set("flooRange", rangename + 'rise');
            }
          });
          viewModelArray = [];
          facingModelArray = [];
          unitTypeModel = App.master.unit_type.findWhere({
            id: unitModel.get('unitType')
          });
          unitTypeModelName = unitTypeModel.get('name').split(' ');
          unitVariantModel = App.master.unit_variant.findWhere({
            id: unitModel.get('unitVariant')
          });
          unitModel.set("sellablearea", unitVariantModel.get('sellablearea'));
          unitModel.set("carpetarea", unitVariantModel.get('carpetarea'));
          unitModel.set("unitTypeName", unitTypeModelName[0]);
          unitModel.set("buidlingName", buildingModel.get('name'));
          console.log(unitModel.get('views'));
          if (unitModel.get('views') !== "") {
            viewsArray = unitModel.get('views');
            console.log(viewsArray.length);
            for (_j = 0, _len1 = viewsArray.length; _j < _len1; _j++) {
              element = viewsArray[_j];
              viewModel = App.master.view.findWhere({
                id: parseInt(element)
              });
              viewModelArray.push(viewModel.get('name'));
            }
          } else {
            viewModelArray.push('-----');
          }
          unitModel.set('views', viewModelArray.join(','));
          facingssArray = unitModel.get('facing');
          if (facingssArray.length !== 0) {
            for (_k = 0, _len2 = facingssArray.length; _k < _len2; _k++) {
              element = facingssArray[_k];
              facingModel = App.master.facings.findWhere({
                id: parseInt(element)
              });
              facingModelArray.push(facingModel.get('name'));
            }
          } else {
            facingModelArray.push('-----');
          }
          unitModel.set('facings', facingModelArray.join(','));
          unitModelArray.push(unitModel);
        }
        unitCollection = new Backbone.Collection(unitModelArray);
        return unitCollection;
      }
    };

    return PopupController;

  })(Extm.RegionController);
  return msgbus.registerController('popup', PopupController);
});
