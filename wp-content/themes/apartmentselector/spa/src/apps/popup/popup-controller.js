// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['extm', 'src/apps/popup/popup-view'], function(Extm, PopupView) {
  var PopupController;
  PopupController = (function(_super) {
    __extends(PopupController, _super);

    function PopupController() {
      return PopupController.__super__.constructor.apply(this, arguments);
    }

    PopupController.prototype.initialize = function(opt) {
      var view;
      if (opt == null) {
        opt = {};
      }
      this.Collection = this._getUnitsCountCollection();
      this.view = view = this._getPopupView(this.Collection);
      return this.show(view);
    };

    PopupController.prototype._getPopupView = function(Collection) {
      console.log(Collection);
      return new PopupView({
        templateHelpers: {
          high: Collection[0],
          medium: Collection[1],
          low: Collection[2]
        }
      });
    };

    PopupController.prototype._getUnitsCountCollection = function() {
      var Countunits, MainCollection, buildingArray, buildingArrayModel, flag, hnewarr, hunique, hunitTypeArray, lnewarr, lunique, lunitTypeArray, mainnewarr, mainunique, mainunitTypeArray, mainunitsTypeArray, mnewarr, munique, munitTypeArray, param, paramkey, status, templateArr, unitColl, units;
      buildingArray = Array();
      buildingArrayModel = Array();
      unitColl = Array();
      templateArr = [];
      mainunitTypeArray = [];
      mainnewarr = [];
      mainunique = {};
      MainCollection = new Backbone.Model();
      status = App.currentStore.status.findWhere({
        'name': 'Available'
      });
      units = App.currentStore.unit.where({
        'status': status.get('id')
      });
      Countunits = App.currentStore.unit.where({
        'status': status.get('id')
      });
      param = {};
      paramkey = {};
      flag = 0;
      mainunitsTypeArray = [];
      lunitTypeArray = [];
      lnewarr = [];
      lunique = {};
      munitTypeArray = [];
      mnewarr = [];
      munique = {};
      hunitTypeArray = [];
      hnewarr = [];
      hunique = {};
      $.each(units, function(index, value) {
        var lowUnits, maxcoll, unitType, unittypemodel;
        maxcoll = Array();
        if (buildingArray.indexOf(value.get('building')) === -1) {
          buildingArray.push(value.get('building'));
        }
        lowUnits = App.currentStore.range.findWhere({
          name: 'low'
        });
        if (value.get('floor') >= lowUnits.get('start') && value.get('floor') <= lowUnits.get('end')) {
          unittypemodel = App.currentStore.unit_type.findWhere({
            id: value.get('unitType')
          });
          mainunitsTypeArray.push({
            id: unittypemodel.get('id'),
            name: unittypemodel.get('name')
          });
        }
        unitType = App.currentStore.unit_type.findWhere({
          id: value.get('unitType')
        });
        return mainunitTypeArray.push({
          id: unitType.get('id'),
          name: unitType.get('name')
        });
      });
      $.each(mainunitsTypeArray, function(key, item) {
        var count;
        if (!lunique[item.id]) {
          lunitTypeArray = [];
          status = App.currentStore.status.findWhere({
            'name': 'Available'
          });
          count = App.currentStore.unit.where({
            unitType: item.id,
            'status': status.get('id')
          });
          $.each(count, function(index, value) {
            var lowUnits;
            lowUnits = App.currentStore.range.findWhere({
              name: 'low'
            });
            if ((value.get('floor') >= lowUnits.get('start') && value.get('floor') <= lowUnits.get('end')) && item.id === value.get('unitType')) {
              return lunitTypeArray.push(value.get('id'));
            }
          });
          lnewarr.push({
            id: item.id,
            name: item.name,
            count: lunitTypeArray.length
          });
          return lunique[item.id] = item;
        }
      });
      $.each(mainunitsTypeArray, function(key, item) {
        var count;
        if (!munique[item.id]) {
          munitTypeArray = [];
          status = App.currentStore.status.findWhere({
            'name': 'Available'
          });
          count = App.currentStore.unit.where({
            unitType: item.id,
            'status': status.get('id')
          });
          $.each(count, function(index, value) {
            var mediumUnits;
            mediumUnits = App.currentStore.range.findWhere({
              name: 'medium'
            });
            if ((value.get('floor') >= mediumUnits.get('start') && value.get('floor') <= mediumUnits.get('end')) && item.id === value.get('unitType')) {
              return munitTypeArray.push(value.get('id'));
            }
          });
          mnewarr.push({
            id: item.id,
            name: item.name,
            count: munitTypeArray.length
          });
          return munique[item.id] = item;
        }
      });
      $.each(mainunitsTypeArray, function(key, item) {
        var count;
        if (!hunique[item.id]) {
          hunitTypeArray = [];
          status = App.currentStore.status.findWhere({
            'name': 'Available'
          });
          count = App.currentStore.unit.where({
            unitType: item.id,
            'status': status.get('id')
          });
          $.each(count, function(index, value) {
            var highUnits;
            highUnits = App.currentStore.range.findWhere({
              name: 'high'
            });
            if ((value.get('floor') >= highUnits.get('start') && value.get('floor') <= highUnits.get('end')) && item.id === value.get('unitType')) {
              return hunitTypeArray.push(value.get('id'));
            }
          });
          hnewarr.push({
            id: item.id,
            name: item.name,
            count: hunitTypeArray.length
          });
          return hunique[item.id] = item;
        }
      });
      console.log(hnewarr);
      return [hnewarr, mnewarr, lnewarr];
    };

    return PopupController;

  })(Extm.RegionController);
  return msgbus.registerController('popup', PopupController);
});
