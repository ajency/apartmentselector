// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['extm', 'marionette'], function(Extm, Marionette) {
  var ScreenTwoLayout, UnitTypeChildView, UnitTypeView;
  UnitTypeView = (function(_super) {
    __extends(UnitTypeView, _super);

    function UnitTypeView() {
      return UnitTypeView.__super__.constructor.apply(this, arguments);
    }

    UnitTypeView.prototype.template = '<section id="tower1"> <div class="vs-content"> <div class="text-center"> <div class="flatNos">05</div> </div> <div class="text-center"> <div class="flatNos">05</div> </div> <div class="text-center"> <div class="flatNos">05</div> </div> </div> </section>';

    UnitTypeView.prototype.events = {
      'click ': 'typeOfUnitSelected'
    };

    UnitTypeView.prototype.typeOfUnitSelected = function(evt) {
      evt.preventDefault();
      return this.trigger('type:unit:clicked', this.model.get('buildingid'), this.model.get('unitType'), this.model.get('range'));
    };

    return UnitTypeView;

  })(Marionette.ItemView);
  UnitTypeChildView = (function(_super) {
    __extends(UnitTypeChildView, _super);

    function UnitTypeChildView() {
      return UnitTypeChildView.__super__.constructor.apply(this, arguments);
    }

    UnitTypeChildView.prototype.template = '<a href="#tower1">{{buildingname}}</a>';

    UnitTypeChildView.prototype.tagName = 'ul';

    UnitTypeChildView.prototype.clasName = 'vs-nav';

    UnitTypeChildView.prototype.initialize = function() {
      console.log(this.model.get('units'));
      return this.collection = this.model.get('units');
    };

    return UnitTypeChildView;

  })(Marionette.CompositeView);
  return ScreenTwoLayout = (function(_super) {
    __extends(ScreenTwoLayout, _super);

    function ScreenTwoLayout() {
      return ScreenTwoLayout.__super__.constructor.apply(this, arguments);
    }

    ScreenTwoLayout.prototype.template = '<h3 class="text-center introTxt">We have <span class="bold">100 options</span> for 1BHK <br><small>Just select your floors to get started</small></h3> <div class="towerTable"><div class="tableHeader"> <ul> <li><a href="#modal"><span class="bold">HIGHRISE</span><br>15-11 Floors</a></li> <li><a href="#modal"><span class="bold">MIDRISE</span><br>15-11 Floors</a></li> <li><a href="#modal"><span class="bold">LOWRISE</span><br>15-11 Floors</a></li> </ul> </div><div class="tableBody"> <div id="vs-container2" class="vs-container"> <header class="vs-header"></header> <ul class="vs-nav" id="building-region"></ul><div id="unit-region" class="vs-wrapper"></div></div></div>';

    ScreenTwoLayout.prototype.className = 'page-container row-fluid';

    ScreenTwoLayout.prototype.regions = {
      buildingRegion: '#building-region',
      unitRegion: '#unit-region'
    };

    return ScreenTwoLayout;

  })(Marionette.LayoutView);
});
