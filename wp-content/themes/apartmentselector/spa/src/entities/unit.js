// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['app', 'backbone'], function(App) {
  return App.module("Entities.Unit", function(Unit, App) {
    var API, UnitMemberCollection, unitCollection;
    Unit = (function(_super) {
      __extends(Unit, _super);

      function Unit() {
        return Unit.__super__.constructor.apply(this, arguments);
      }

      Unit.prototype.idAttribute = 'ID';

      Unit.prototype.defaults = {
        name: '',
        unitType: '',
        unitVariant: '',
        building: '',
        floor: '',
        view: '',
        status: ''
      };

      Unit.prototype.name = 'unit';

      return Unit;

    })(Backbone.Model);
    UnitMemberCollection = (function(_super) {
      __extends(UnitMemberCollection, _super);

      function UnitMemberCollection() {
        return UnitMemberCollection.__super__.constructor.apply(this, arguments);
      }

      UnitMemberCollection.prototype.model = Unit;

      UnitMemberCollection.prototype.filterbyname = function(data) {
        var events, object;
        console.log(data);
        object = this;
        events = "";
        $.each(data, function(val, key) {
          console.log(val);
          return events = object.filter(function(model) {
            var ref;
            if (val) {
              console.log('ref');
              ref = data.unitvar1 === model.get('unitVariant');
            }
            return ref;
          });
        });
        return events;
      };

      UnitMemberCollection.prototype.url = function() {
        return AJAXURL;
      };

      return UnitMemberCollection;

    })(Backbone.Collection);
    unitCollection = new UnitCollection;
    API = {
      getUnits: function() {
        var buildingArray, buildingCollection, buildingModel, element, floorArray, index, jsondata, noofbuildings, nooffloors, noofstatus, noofunitType, noofunitVariant, noofviews, statusArray, uniqbuildings, uniqnooffloors, uniqstatus, uniqunitType, uniqunitVariant, uniqviews, unitModel, unitVariantModel, unittypeArray, unittypeCollection, unitval, unitvariantArray, unitvariantCollection, viewArray, viewCollection, viewModel, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n;
        buildingArray = Array();
        floorArray = Array();
        viewArray = Array();
        statusArray = Array();
        unittypeArray = Array();
        unitvariantArray = Array();
        jsondata = JSON.parse(UNIT);
        unitCollection.add(jsondata);
        buildingCollection = App.request("get:building:collection");
        unittypeCollection = App.request("get:unittype:collection");
        unitvariantCollection = App.request("get:unitvariant:collection");
        viewCollection = App.request("get:view:collection");
        noofbuildings = unitCollection.pluck('building');
        console.log(uniqbuildings = _.uniq(noofbuildings));
        for (index = _i = 0, _len = uniqbuildings.length; _i < _len; index = ++_i) {
          element = uniqbuildings[index];
          buildingModel = buildingCollection.get(element);
          buildingArray.push({
            'id': element,
            'name': buildingModel.get('name')
          });
        }
        nooffloors = unitCollection.pluck('floor');
        console.log(uniqnooffloors = _.uniq(nooffloors));
        for (index = _j = 0, _len1 = uniqnooffloors.length; _j < _len1; index = ++_j) {
          element = uniqnooffloors[index];
          floorArray.push({
            'id': element,
            'name': element
          });
        }
        noofviews = unitCollection.pluck('view');
        console.log(uniqviews = _.uniq(noofviews));
        for (index = _k = 0, _len2 = uniqviews.length; _k < _len2; index = ++_k) {
          element = uniqviews[index];
          viewModel = viewCollection.get(element);
          viewArray.push({
            'id': element,
            'name': viewModel.get('name')
          });
        }
        noofstatus = unitCollection.pluck('status');
        console.log(uniqstatus = _.uniq(noofstatus));
        for (index = _l = 0, _len3 = uniqstatus.length; _l < _len3; index = ++_l) {
          element = uniqstatus[index];
          statusArray.push({
            'id': index,
            'name': element
          });
        }
        noofunitType = unitCollection.pluck('unitType');
        console.log(uniqunitType = _.uniq(noofunitType));
        for (index = _m = 0, _len4 = uniqunitType.length; _m < _len4; index = ++_m) {
          element = uniqunitType[index];
          unitModel = unittypeCollection.get(element);
          unittypeArray.push({
            'id': element,
            'name': unitModel.get('name')
          });
        }
        noofunitVariant = unitCollection.pluck('unitVariant');
        console.log(uniqunitVariant = _.uniq(noofunitVariant));
        for (index = _n = 0, _len5 = uniqunitVariant.length; _n < _len5; index = ++_n) {
          element = uniqunitVariant[index];
          unitVariantModel = unitvariantCollection.get(element);
          unitvariantArray.push({
            'id': element,
            'name': unitVariantModel.get('name')
          });
        }
        unitCollection.each(function(logdata) {
          var building, unittype, unitvariant, view;
          building = buildingCollection.get(logdata.get('building'));
          unittype = unittypeCollection.get(logdata.get('unitType'));
          unitvariant = unitvariantCollection.get(logdata.get('unitVariant'));
          view = viewCollection.get(logdata.get('view'));
          logdata.set('building', building.get('name'));
          logdata.set('unitType', unittype.get('name'));
          logdata.set('unitVariant', unitvariant.get('name'));
          return logdata.set('view', view.get('name'));
        });
        unitval = {
          'collection': unitCollection,
          'building': buildingArray,
          'floor': floorArray,
          'view': viewArray,
          'status': statusArray,
          'unittype': unittypeArray,
          'unitVariant': unitvariantArray
        };
        return unitval;
      },
      filterUnits: function(data) {
        var memberArray;
        memberArray = unitCollection.filterbyname(data);
        return memberArray;
      }
    };
    App.reqres.setHandler("get:member:collection", function() {
      return API.getUnits();
    });
    return App.reqres.setHandler("filter:member:model", function(data) {
      return API.filterUnits(data);
    });
  });
});
